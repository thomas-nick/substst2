{
    "pipes": [
        {
            "name": "AddressHiddenPipe",
            "id": "pipe-AddressHiddenPipe-cfeb810b2cb7545231f4207680526ff6",
            "file": "src/app/shared/pipes/address-hidden.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "12"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "12",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "addressHidden",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'addressHidden',\n})\nexport class AddressHiddenPipe implements PipeTransform {\n  transform(value: string, length: number = 12): string {\n    if (length > value.length) {\n      return value;\n    } else {\n      const index = Math.floor(length / 2);\n      return value.substring(0, index) + '...' + value.slice(-index);\n    }\n  }\n}\n"
        },
        {
            "name": "DayjsPipe",
            "id": "pipe-DayjsPipe-eea913a3323686a64aa8756076f4af92",
            "file": "src/app/shared/pipes/dayjs.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "day",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport * as dayjs from 'dayjs';\r\nimport { DateService } from '../services/date.service';\r\n\r\n@Pipe({\r\n  name: 'day',\r\n})\r\nexport class DayjsPipe implements PipeTransform {\r\n  constructor(private dateService: DateService) {}\r\n\r\n  transform(value: string | number): string {\r\n    return this.dateService.fromNow(value);\r\n  }\r\n}\r\n"
        },
        {
            "name": "ImageUrlPipe",
            "id": "pipe-ImageUrlPipe-63cea012f48e0dd0dff62b696c38e02e",
            "file": "src/app/shared/pipes/image-url.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "imageHash",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "imageHash",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "imageUrl",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { environment } from '../../../environments/environment';\r\n\r\n@Pipe({\r\n  name: 'imageUrl',\r\n})\r\nexport class ImageUrlPipe implements PipeTransform {\r\n  transform(imageHash: string): string {\r\n    return environment.ipfsUrl + imageHash;\r\n  }\r\n}\r\n"
        },
        {
            "name": "LinkToIconPipe",
            "id": "pipe-LinkToIconPipe-5107ff5cb4d619df6734ab3f77fa4478",
            "file": "src/app/shared/pipes/link-to-icon.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [
                {
                    "name": "linkPrefix",
                    "defaultValue": "'^(https?://)?([a-z0-9-]+.)?'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "newSocialLinkRegExp",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "socialLinksRegExp",
                    "defaultValue": "{\r\n    facebook: [\r\n      this.newSocialLinkRegExp('facebook.com'),\r\n      this.newSocialLinkRegExp('fb.me'),\r\n      this.newSocialLinkRegExp('fb.com'),\r\n      this.newSocialLinkRegExp('facebook.me'),\r\n    ],\r\n    twitter: [this.newSocialLinkRegExp('twitter.com')],\r\n    medium: [this.newSocialLinkRegExp('medium.com')],\r\n    linkedin: [\r\n      this.newSocialLinkRegExp('linkedin.com'),\r\n      this.newSocialLinkRegExp('linked.in'),\r\n    ],\r\n    github: [this.newSocialLinkRegExp('github.com')],\r\n    reddit: [this.newSocialLinkRegExp('reddit.com')],\r\n    youtube: [\r\n      this.newSocialLinkRegExp('youtube.com'),\r\n      this.newSocialLinkRegExp('youtu.be'),\r\n    ],\r\n    telegram: [\r\n      this.newSocialLinkRegExp('t.me'),\r\n      this.newSocialLinkRegExp('telegram.me'),\r\n    ],\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "KeyValuePair<RegExp[]>",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methods": [
                {
                    "name": "getLinkBrand",
                    "args": [
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isSocialBrandLink",
                    "args": [
                        {
                            "name": "brand",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "brand",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "linkToIcon",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { KeyValuePair } from '../../core/models/key-value-pair.model';\r\n\r\n@Pipe({\r\n  name: 'linkToIcon',\r\n})\r\nexport class LinkToIconPipe implements PipeTransform {\r\n  transform(link: string): string {\r\n    return this.getLinkBrand(link);\r\n  }\r\n\r\n  isSocialBrandLink(brand: string, link: string): boolean {\r\n    if (!link) {\r\n      return false;\r\n    }\r\n\r\n    link = link.trim().toLowerCase();\r\n    return !!this.socialLinksRegExp[brand].find((r) => r.test(link));\r\n  }\r\n\r\n  getLinkBrand(link: string): string {\r\n    for (const key in this.socialLinksRegExp) {\r\n      if (this.isSocialBrandLink(key, link)) {\r\n        return key;\r\n      }\r\n    }\r\n    return 'web';\r\n  }\r\n\r\n  newSocialLinkRegExp = (brandDomain: string): RegExp => {\r\n    return new RegExp(this.linkPrefix + brandDomain);\r\n  };\r\n\r\n  linkPrefix = '^(https?://)?([a-z0-9-]+.)?';\r\n\r\n  socialLinksRegExp: KeyValuePair<RegExp[]> = {\r\n    facebook: [\r\n      this.newSocialLinkRegExp('facebook.com'),\r\n      this.newSocialLinkRegExp('fb.me'),\r\n      this.newSocialLinkRegExp('fb.com'),\r\n      this.newSocialLinkRegExp('facebook.me'),\r\n    ],\r\n    twitter: [this.newSocialLinkRegExp('twitter.com')],\r\n    medium: [this.newSocialLinkRegExp('medium.com')],\r\n    linkedin: [\r\n      this.newSocialLinkRegExp('linkedin.com'),\r\n      this.newSocialLinkRegExp('linked.in'),\r\n    ],\r\n    github: [this.newSocialLinkRegExp('github.com')],\r\n    reddit: [this.newSocialLinkRegExp('reddit.com')],\r\n    youtube: [\r\n      this.newSocialLinkRegExp('youtube.com'),\r\n      this.newSocialLinkRegExp('youtu.be'),\r\n    ],\r\n    telegram: [\r\n      this.newSocialLinkRegExp('t.me'),\r\n      this.newSocialLinkRegExp('telegram.me'),\r\n    ],\r\n  };\r\n}\r\n"
        },
        {
            "name": "NumeralPipe",
            "id": "pipe-NumeralPipe-fe0aaedbce9d4f0d23419bd7fadab581",
            "file": "src/app/shared/pipes/numeral.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "numeral",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport * as numeral from 'numeral';\r\n\r\n@Pipe({\r\n  name: 'numeral',\r\n})\r\nexport class NumeralPipe implements PipeTransform {\r\n  transform(value: number): string {\r\n    return numeral(value).format('0,0a');\r\n  }\r\n}\r\n"
        },
        {
            "name": "PluralizePipe",
            "id": "pipe-PluralizePipe-7c26beec0a35af6383f5550ee178edae",
            "file": "src/app/shared/pipes/pluralize.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "word",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "word",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "pluralize",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport * as pluralize from 'pluralize';\n\n\n@Pipe({\n  name: 'pluralize'\n})\nexport class PluralizePipe implements PipeTransform {\n\n  transform(value: number, word: string): string {\n    return pluralize(word, value);\n  }\n\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "AppState",
            "id": "interface-AppState-a5258c54416c276edd04276838f9a9f8",
            "file": "src/app/state/state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ActionReducerMap } from '@ngrx/store';\r\nimport { spaceReducer } from './space/space.reducer';\r\nimport { contentReducer } from './content/content.reducer';\r\nimport { SpaceState } from './space/space.state';\r\nimport { ContentState } from './content/content.state';\r\nimport { postReducer } from './post/post.reducer';\r\nimport { PostState } from './post/post.state';\r\nimport { profileReducer } from './profile/profile.reducer';\r\nimport { ProfileState } from './profile/profile.state';\r\nimport { ReplyIdState } from './reply-id/reply-id.state';\r\nimport { replyIdReducer } from './reply-id/reply-id.reducer';\r\nimport { LoaderState } from './loader/loader.state';\r\nimport { loaderReducer } from './loader/loader.reducer';\r\nimport { MyAccountState } from './my-account/my-account.state';\r\nimport { myAccountReducer } from './my-account/my-account.reducer';\r\nimport { MyPostReactionsState } from './my-post-reactions/my-post-reactions.state';\r\nimport { myPostReactionsReducer } from './my-post-reactions/my-post-reactions.reducer';\r\n\r\nexport interface AppState {\r\n  spaces: SpaceState;\r\n  contents: ContentState;\r\n  posts: PostState;\r\n  profiles: ProfileState;\r\n  replyIds: ReplyIdState;\r\n  loader: LoaderState;\r\n  myAccount: MyAccountState;\r\n  myPostReactions: MyPostReactionsState;\r\n}\r\n\r\nexport const appReducers: ActionReducerMap<AppState> = {\r\n  spaces: spaceReducer,\r\n  contents: contentReducer,\r\n  posts: postReducer,\r\n  profiles: profileReducer,\r\n  replyIds: replyIdReducer,\r\n  loader: loaderReducer,\r\n  myAccount: myAccountReducer,\r\n  myPostReactions: myPostReactionsReducer,\r\n};\r\n",
            "properties": [
                {
                    "name": "contents",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ContentState",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "loader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LoaderState",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "myAccount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MyAccountState",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "myPostReactions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MyPostReactionsState",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "posts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PostState",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "profiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProfileState",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "replyIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReplyIdState",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "spaces",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SpaceState",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "ContentEntity",
            "id": "interface-ContentEntity-71f4d0b15beb73683385e04cc414f9f7",
            "file": "src/app/core/entities/content-entity.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ContentEntity {\r\n  id: string;\r\n  body: string;\r\n  canonical: string;\r\n  image: string;\r\n  tags: Array<string>;\r\n  title: string;\r\n  summary: string;\r\n  isShowMore: boolean;\r\n  name: string;\r\n  avatar: string;\r\n  link?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "avatar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "body",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "canonical",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "isShowMore",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "summary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "tags",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "ContentState",
            "id": "interface-ContentState-c3b81a5adda2383f7cc8d5f68b50c27a",
            "file": "src/app/state/content/content.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\r\nimport { Content } from '../../core/types/content.type';\r\n\r\nexport interface ContentState extends EntityState<Content> {}\r\n\r\nexport const contentAdapter: EntityAdapter<Content> =\r\n  createEntityAdapter<Content>();\r\n\r\nexport const initialContentState: ContentState =\r\n  contentAdapter.getInitialState();\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "Entity",
            "id": "interface-Entity-121d048e7f9082d783b0f9344e6718fe",
            "file": "src/app/core/entities/entity.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Entity<T> {\r\n  [id: string]: T;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-121d048e7f9082d783b0f9344e6718fe",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "T",
                    "line": 1,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 174,
            "methods": []
        },
        {
            "name": "FollowedAccountIdsState",
            "id": "interface-FollowedAccountIdsState-6481bce0233bc4cdad77b08753a9031f",
            "file": "src/app/state/followed-account-ids/followed-account-ids.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\r\n\r\nexport interface FollowedAccountIdsState extends EntityState<FollowedAccountIdsStruct> {}\r\n\r\nexport type FollowedAccountIdsStruct = {\r\n  id: string;\r\n  followingAccountIds: Array<string>;\r\n}\r\n\r\nexport const followedAccountIdsAdapter: EntityAdapter<FollowedAccountIdsStruct> =\r\n  createEntityAdapter<FollowedAccountIdsStruct>();\r\n\r\nexport const initialFollowedAccountIdsState: FollowedAccountIdsState =\r\n  followedAccountIdsAdapter.getInitialState();\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "FollowedSpaceIdsState",
            "id": "interface-FollowedSpaceIdsState-cbc35f8a8dd3aa230845ea8e2c431a0e",
            "file": "src/app/state/followed-space-ids/followed-space-ids.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\r\n\r\nexport interface FollowedSpaceIdsState\r\n  extends EntityState<FollowedSpaceIdsStruct> {}\r\n\r\nexport type FollowedSpaceIdsStruct = {\r\n  id: string;\r\n  followingAccountIds: Array<string>;\r\n};\r\n\r\nexport const followedSpaceIdsAdapter: EntityAdapter<FollowedSpaceIdsStruct> =\r\n  createEntityAdapter<FollowedSpaceIdsStruct>();\r\n\r\nexport const initialFollowedSpaceIdsState: FollowedSpaceIdsState =\r\n  followedSpaceIdsAdapter.getInitialState();\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "KeyValuePair",
            "id": "interface-KeyValuePair-e5cfdeed3f1d30dc229284c1ae3287c3",
            "file": "src/app/core/models/key-value-pair.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface KeyValuePair<T> {\r\n  [key: string]: T;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-e5cfdeed3f1d30dc229284c1ae3287c3",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "T",
                    "line": 1,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 174,
            "methods": []
        },
        {
            "name": "LoaderState",
            "id": "interface-LoaderState-f31f67dc10e0a935e01b12529a03222f",
            "file": "src/app/state/loader/loader.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export const initialLoaderState: LoaderState = {\r\n  isLoading: false,\r\n};\r\n\r\nexport interface LoaderState {\r\n  isLoading: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "isLoading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "MockupData",
            "id": "interface-MockupData-017500f9636a4b2487d27dc564336ec8",
            "file": "src/app/core/models/mockup-data.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {ContentEntity} from \"../entities/content-entity.model\";\r\nimport {KeyValuePair} from \"./key-value-pair.model\";\r\nimport {ProfileEntity} from \"../entities/profile-entity.model\";\r\nimport {SpaceEntity} from \"../entities/space-entity.model\";\r\nimport {PostEntity} from \"../entities/post-entity.model\";\r\n\r\nexport interface MockupData {\r\n  contents: KeyValuePair<ContentEntity>;\r\n  profiles: KeyValuePair<ProfileEntity>;\r\n  spaces: KeyValuePair<SpaceEntity>;\r\n  posts: KeyValuePair<PostEntity>;\r\n}\r\n",
            "properties": [
                {
                    "name": "contents",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "KeyValuePair<ContentEntity>",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "posts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "KeyValuePair<PostEntity>",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "profiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "KeyValuePair<ProfileEntity>",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "spaces",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "KeyValuePair<SpaceEntity>",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "MyAccountState",
            "id": "interface-MyAccountState-c976bb5a5eeaeaa0772285ed9f87f03b",
            "file": "src/app/state/my-account/my-account.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MyAccountState {\r\n  address: string;\r\n  blocked: boolean;\r\n  nonce: number;\r\n}\r\n\r\nexport const initialMyAccountState: MyAccountState = {\r\n  address: '',\r\n  blocked: false,\r\n  nonce: 0,\r\n};\r\n",
            "properties": [
                {
                    "name": "address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "blocked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "nonce",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "MyPostReactionsState",
            "id": "interface-MyPostReactionsState-421d8ced82c0a1e3db6c29575d7223fe",
            "file": "src/app/state/my-post-reactions/my-post-reactions.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\r\n\r\nexport type MyPostReactionsStruct = {\r\n  id: string;\r\n  reactionId?: string;\r\n  kind?: 'Upvote' | 'Downvote';\r\n};\r\n\r\nexport interface MyPostReactionsState\r\n  extends EntityState<MyPostReactionsStruct> {}\r\n\r\nexport const myPostReactionsAdapter: EntityAdapter<MyPostReactionsStruct> =\r\n  createEntityAdapter<MyPostReactionsStruct>();\r\n\r\nexport const initialMyPostReactionsState: MyPostReactionsState =\r\n  myPostReactionsAdapter.getInitialState();\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "OnViewReaction",
            "id": "interface-OnViewReaction-b432379c6c5002cf9d17181e0d423b00",
            "file": "src/app/core/interfaces/on-view-reaction.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface OnViewReaction {\r\n  onViewReaction(): void;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 166,
            "methods": [
                {
                    "name": "onViewReaction",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ]
        },
        {
            "name": "OwnSpaceIdsState",
            "id": "interface-OwnSpaceIdsState-59170cb51b75467a5388617227f6c8a1",
            "file": "src/app/state/own-space-ids/own-space-ids.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\r\nexport type OwnSpaceIdsStruct = {\r\n  id: string;\r\n  ownSpaceIds: Array<string>;\r\n};\r\n\r\nexport interface OwnSpaceIdsState extends EntityState<OwnSpaceIdsStruct> {}\r\n\r\nexport const ownSpaceIdsAdapter: EntityAdapter<OwnSpaceIdsStruct> =\r\n  createEntityAdapter<OwnSpaceIdsStruct>();\r\n\r\nexport const initialOwnSpaceIdsState: OwnSpaceIdsState =\r\n  ownSpaceIdsAdapter.getInitialState();\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "PostEntity",
            "id": "interface-PostEntity-e2f6ed3834ddaa999e1e19fba12a6c5d",
            "file": "src/app/core/entities/post-entity.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface PostEntity {\r\n  createdByAccount: string;\r\n  createdAtBlock: number;\r\n  createdAtTime: number;\r\n  isUpdated: boolean;\r\n  contentId: string;\r\n  id: string;\r\n  ownerId: string;\r\n  hidden: boolean;\r\n  spaceId: string;\r\n  repliesCount: number;\r\n  hiddenRepliesCount: number;\r\n  visibleRepliesCount: number;\r\n  sharesCount: number;\r\n  upvotesCount: number;\r\n  downvotesCount: number;\r\n  score: number;\r\n  isRegularPost: boolean;\r\n  isSharedPost: boolean;\r\n  isComment: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "contentId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "createdAtBlock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "createdAtTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "createdByAccount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "downvotesCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "hidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "hiddenRepliesCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "isComment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "isRegularPost",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isSharedPost",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "isUpdated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "ownerId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "repliesCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "score",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "sharesCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "spaceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "upvotesCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "visibleRepliesCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "PostListItemData",
            "id": "interface-PostListItemData-e01190f1dde092422a7f57e0dd34f5e5",
            "file": "src/app/core/models/post/post-list-item.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface PostListItemData {\r\n  id: string;\r\n  ownerId: string;\r\n  ownerImageUrl: string;\r\n  spaceName: string;\r\n  title: string;\r\n  summary: string;\r\n  imageUrl: string;\r\n  createdAtTime: number;\r\n  repliesCount: number;\r\n  hiddenRepliesCount: number;\r\n  visibleRepliesCount: number;\r\n  sharesCount: number;\r\n  upvotesCount: number;\r\n  downvotesCount: number;\r\n  isSharedPost: boolean;\r\n  isComment: boolean;\r\n  isShowMore: boolean;\r\n  ownerName: string;\r\n  postLink: string;\r\n  isMyPost: boolean;\r\n  hidden: boolean;\r\n  body: string;\r\n  tags: string[];\r\n  spaceId?: string;\r\n  link?: string;\r\n  sharedPostId?: string;\r\n  spaceLink?: string;\r\n  upvoteActive?: boolean;\r\n  downvoteActive?: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "body",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "createdAtTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "downvoteActive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "downvotesCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "hidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "hiddenRepliesCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "imageUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "isComment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "isMyPost",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "isSharedPost",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isShowMore",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "ownerId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "ownerImageUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "ownerName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "postLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "repliesCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "sharedPostId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "sharesCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "spaceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "spaceLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "spaceName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "summary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "tags",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "upvoteActive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "upvotesCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "visibleRepliesCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "PostState",
            "id": "interface-PostState-e358d64b36b46173c6aa4de468933f7b",
            "file": "src/app/state/post/post.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\r\nimport { PostStruct } from '@subsocial/api/flat-subsocial/flatteners';\r\n\r\nexport interface PostState extends EntityState<PostStruct> {}\r\n\r\nexport const postAdapter: EntityAdapter<PostStruct> =\r\n  createEntityAdapter<PostStruct>();\r\n\r\nexport const initialPostState: PostState = postAdapter.getInitialState();\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "ProfileEntity",
            "id": "interface-ProfileEntity-3998d75cfc3d47c21641cc5a2e64776b",
            "file": "src/app/core/entities/profile-entity.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ProfileEntity {\r\n  id: string;\r\n  followersCount: number;\r\n  followingAccountsCount: number;\r\n  followingSpacesCount: number;\r\n  reputation: number;\r\n  hasProfile: boolean;\r\n  createdByAccount: string;\r\n  createdAtBlock: number;\r\n  createdAtTime: number;\r\n  isUpdated: boolean;\r\n  updatedByAccount: string;\r\n  updatedAtBlock: number;\r\n  updatedAtTime: number;\r\n  contentId: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "contentId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "createdAtBlock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "createdAtTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "createdByAccount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "followersCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "followingAccountsCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "followingSpacesCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "hasProfile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "isUpdated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "reputation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "updatedAtBlock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "updatedAtTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "updatedByAccount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "ProfileState",
            "id": "interface-ProfileState-49c550d68a09136679187d46fdba9ae5",
            "file": "src/app/state/profile/profile.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\r\nimport { ProfileStruct } from '@subsocial/api/flat-subsocial/flatteners';\r\n\r\nexport interface ProfileState extends EntityState<ProfileStruct> {}\r\n\r\nexport const profileAdapter: EntityAdapter<ProfileStruct> =\r\n  createEntityAdapter<ProfileStruct>();\r\n\r\nexport const initialProfileState: ProfileState =\r\n  profileAdapter.getInitialState();\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "ReplyIdState",
            "id": "interface-ReplyIdState-e474984c425bd576d84f7dc9e772aca6",
            "file": "src/app/state/reply-id/reply-id.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\r\nimport { ReplyIdStruct } from '../../core/types/reply-id.type';\r\n\r\nexport interface ReplyIdState extends EntityState<ReplyIdStruct> {}\r\n\r\nexport const replyIdAdapter: EntityAdapter<ReplyIdStruct> =\r\n  createEntityAdapter<ReplyIdStruct>();\r\n\r\nexport const initialReplyIdState: ReplyIdState =\r\n  replyIdAdapter.getInitialState();\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "SpaceEntity",
            "id": "interface-SpaceEntity-688beb9a176b7886ce5f16f858e3b30e",
            "file": "src/app/core/entities/space-entity.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { WithId } from '../base-entity/with-id';\r\n\r\nexport interface SpaceEntity extends WithId {\r\n  createdByAccount: string;\r\n  createdAtBlock: number;\r\n  createdAtTime: number;\r\n  isUpdated: boolean;\r\n  updatedByAccount: string;\r\n  updatedAtBlock: number;\r\n  updatedAtTime: number;\r\n  contentId: string;\r\n  ownerId: string;\r\n  hidden: boolean;\r\n  handle: string;\r\n  canFollowerCreatePosts: boolean;\r\n  canEveryoneCreatePosts: boolean;\r\n  postsCount: number;\r\n  hiddenPostsCount: number;\r\n  visiblePostsCount: number;\r\n  followersCount: number;\r\n  score: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "canEveryoneCreatePosts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "canFollowerCreatePosts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "contentId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "createdAtBlock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "createdAtTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "createdByAccount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "followersCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "handle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "hidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "hiddenPostsCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isUpdated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "ownerId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "postsCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "score",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "updatedAtBlock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "updatedAtTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "updatedByAccount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "visiblePostsCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": [],
            "extends": "WithId"
        },
        {
            "name": "SpaceState",
            "id": "interface-SpaceState-8e88dcbfbcaf088409b24ac4e1ddb153",
            "file": "src/app/state/space/space.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\r\nimport { SpaceStruct } from '@subsocial/api/flat-subsocial/flatteners';\r\n\r\nexport interface SpaceState extends EntityState<SpaceStruct> {}\r\n\r\nexport const spaceAdapter: EntityAdapter<SpaceStruct> =\r\n  createEntityAdapter<SpaceStruct>();\r\n\r\nexport const initialSpaceState: SpaceState = spaceAdapter.getInitialState();\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "StateEntity",
            "id": "interface-StateEntity-0ca15ddb8648ff362cb54cac19b523ec",
            "file": "src/app/core/entities/state-entity.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Entity } from './entity.model';\r\n\r\nexport interface StateEntity<T> {\r\n  ids: Array<string>;\r\n  entities: Entity<T>;\r\n}\r\n",
            "properties": [
                {
                    "name": "entities",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Entity<T>",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "ids",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "TabLinkData",
            "id": "interface-TabLinkData-70d9dc53e0a2731dca029aee250d4564",
            "file": "src/app/core/models/tab-link-data.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TabLinkData {\r\n  tabName: string;\r\n  additionalInfo?: string | number;\r\n}\r\n",
            "properties": [
                {
                    "name": "additionalInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "tabName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "WithId",
            "id": "interface-WithId-14bb9ebf3e91524b983cd469842c22d4",
            "file": "src/app/core/base-entity/with-id.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface WithId {\r\n  id: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AccountService",
            "id": "injectable-AccountService-9c47dfc164e2b5e2986c410b6f3cf899",
            "file": "src/app/shared/services/account.service.ts",
            "properties": [
                {
                    "name": "accounts$",
                    "defaultValue": "this.accountsSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "accountsSource",
                    "defaultValue": "new BehaviorSubject<PolkadotAccount[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "balance$",
                    "defaultValue": "this.balanceSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "balanceSource",
                    "defaultValue": "new BehaviorSubject<string>('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "currentAccount$",
                    "defaultValue": "this.currentAccountsSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "currentAccountsSource",
                    "defaultValue": "new BehaviorSubject<AccountData | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "status$",
                    "defaultValue": "this.statusSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "statusSource",
                    "defaultValue": "new BehaviorSubject<ACCOUNT_STATUS>(\n    ACCOUNT_STATUS.INIT\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "checkIfAlreadySignIn",
                    "args": [
                        {
                            "name": "accountData",
                            "type": "AccountData[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 190,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "accountData",
                            "type": "AccountData[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "extractAccountData",
                    "args": [
                        {
                            "name": "accountRawData",
                            "type": "AccountRawData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "accountRawData",
                            "type": "AccountRawData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAccountsData",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<AccountData[]>",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getAnonymousAccountData",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 198,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBalance",
                    "args": [
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBalances",
                    "args": [
                        {
                            "name": "accounts",
                            "type": "PolkadotAccount[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "accounts",
                            "type": "PolkadotAccount[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFormattedBalance",
                    "args": [
                        {
                            "name": "balance",
                            "type": "Balance | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 179,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "balance",
                            "type": "Balance | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMyAccountData",
                    "args": [
                        {
                            "name": "profileStruct",
                            "type": "ProfileStruct",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "MyAccountState",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "profileStruct",
                            "type": "ProfileStruct",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        130
                    ]
                },
                {
                    "name": "loadFormattedBalance",
                    "args": [
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadProfile",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadProfilesByPolkadotAccount",
                    "args": [
                        {
                            "name": "polkadotAccount",
                            "type": "PolkadotAccount[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "polkadotAccount",
                            "type": "PolkadotAccount[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setBalance",
                    "args": [
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setCurrentAccount",
                    "args": [
                        {
                            "name": "account",
                            "type": "AccountData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "account",
                            "type": "AccountData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setStatus",
                    "args": [
                        {
                            "name": "status",
                            "type": "ACCOUNT_STATUS",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "ACCOUNT_STATUS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { web3Enable } from '@polkadot/extension-dapp';\nimport { BehaviorSubject, forkJoin, from, Observable } from 'rxjs';\nimport { SubsocialApiService } from './subsocial-api.service';\nimport { Store } from '@ngrx/store';\nimport { AppState } from '../../state/state';\nimport { ProfileStruct } from '@subsocial/api/flat-subsocial/flatteners';\nimport { MyAccountState } from '../../state/my-account/my-account.state';\nimport { loadMyProfile } from '../../state/profile/profile.actions';\nimport { asAccountId } from '@subsocial/api';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport {\n  AccountData,\n  AccountRawData,\n  Balance,\n  PolkadotAccount,\n} from '../../core/types/account.types';\nimport { formatBalance } from '@polkadot/util';\nimport { environment } from '../../../environments/environment';\nimport { StorageService } from './storage.service';\nimport { ProfileData } from '@subsocial/api/flat-subsocial/dto';\n\nexport enum ACCOUNT_STATUS {\n  INIT,\n  EXTENSION_NOT_FOUND,\n  ACCOUNTS_NOT_FOUND,\n  UNAUTHORIZED,\n  AUTHORIZED,\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AccountService {\n  private accountsSource = new BehaviorSubject<PolkadotAccount[]>([]);\n  private currentAccountsSource = new BehaviorSubject<AccountData | null>(null);\n  private statusSource = new BehaviorSubject<ACCOUNT_STATUS>(\n    ACCOUNT_STATUS.INIT\n  );\n\n  private balanceSource = new BehaviorSubject<string>('');\n\n  public accounts$ = this.accountsSource.asObservable();\n  public currentAccount$ = this.currentAccountsSource.asObservable();\n  public status$ = this.statusSource.asObservable();\n  public balance$ = this.balanceSource.asObservable();\n\n  constructor(\n    private api: SubsocialApiService,\n    private store: Store<AppState>,\n    private storage: StorageService\n  ) {\n    const { decimals, currency: unit } = environment;\n    formatBalance.setDefaults({ decimals, unit });\n  }\n\n  public async initAccount() {\n    const injectedExtensions = await web3Enable('Subsocial');\n    const polkadotJs = injectedExtensions.find(\n      (extension) => extension.name === 'polkadot-js'\n    );\n\n    if (injectedExtensions.length === 0) {\n      this.setStatus(ACCOUNT_STATUS.EXTENSION_NOT_FOUND);\n    }\n\n    if (!polkadotJs) return;\n\n    const unsub = polkadotJs!.accounts.subscribe((accounts) => {\n      if (accounts?.length > 0) {\n        this.accountsSource.next(accounts as PolkadotAccount[]);\n        this.setStatus(ACCOUNT_STATUS.UNAUTHORIZED);\n      } else {\n        this.setStatus(ACCOUNT_STATUS.ACCOUNTS_NOT_FOUND);\n      }\n    });\n  }\n\n  public getAccountsData(): Observable<AccountData[]> {\n    return this.accounts$.pipe(\n      switchMap((accounts) =>\n        this.getBalances(accounts).pipe(\n          map((balances) => {\n            return { accounts, balances };\n          })\n        )\n      ),\n      switchMap((data) =>\n        from(this.loadProfilesByPolkadotAccount(data.accounts)).pipe(\n          map((profiles) => {\n            return { ...data, profiles };\n          })\n        )\n      ),\n      map((accountRawData) => this.extractAccountData(accountRawData)),\n      tap((accountData) => this.checkIfAlreadySignIn(accountData))\n    );\n  }\n\n  public extractAccountData(accountRawData: AccountRawData) {\n    return accountRawData.accounts.map((account) => {\n      const id = asAccountId(account.address)!.toString();\n      const profile = accountRawData.profiles.find(\n        (profile) => profile.id === id\n      );\n      const balance = accountRawData.balances.find(\n        (balance) => balance.accountId.toString() === id\n      )!;\n\n      return {\n        id,\n        name: profile?.content?.name || account.name,\n        balance: this.getFormattedBalance(balance),\n        avatar: profile?.content?.avatar,\n      } as AccountData;\n    });\n  }\n\n  public async loadProfilesByPolkadotAccount(\n    polkadotAccount: PolkadotAccount[]\n  ) {\n    const ids = polkadotAccount.map((account) => account.address);\n    return await this.api.api.findProfiles(ids);\n  }\n\n  public async setCurrentAccount(account: AccountData) {\n    await this.setBalance(account.id);\n    this.store.dispatch(loadMyProfile({ id: account.id }));\n    this.storage.setCurrentAccountId(account.id);\n    this.currentAccountsSource.next(account);\n  }\n\n  public async loadProfile(id: string) {\n    const profileData = await this.api.api.findProfile(id);\n    if (profileData?.content && profileData?.struct) {\n      const struct = profileData?.struct;\n      if (struct) {\n        const content = { ...profileData.content, id: struct.contentId };\n        return { struct, content };\n      }\n    }\n\n    return this.getAnonymousAccountData(id);\n  }\n\n  public getMyAccountData(profileStruct: ProfileStruct): MyAccountState {\n    return { address: profileStruct.id, nonce: 0, blocked: false };\n  }\n\n  public signOut() {\n    this.currentAccountsSource.next(null);\n  }\n\n  public async setBalance(address: string) {\n    const balance = await this.getBalance(address);\n    this.balanceSource.next(this.getFormattedBalance(balance));\n  }\n\n  public async getBalance(address: string) {\n    const api = await this.api.api.subsocial.substrate.api;\n    return await api.derive.balances.all(address);\n  }\n\n  public async loadFormattedBalance(address: string) {\n    const balance = await this.getBalance(address);\n    return this.getFormattedBalance(balance);\n  }\n\n  private setStatus(status: ACCOUNT_STATUS) {\n    this.statusSource.next(status);\n  }\n\n  private getBalances(accounts: PolkadotAccount[]) {\n    return forkJoin(\n      accounts.map((account) => from(this.getBalance(account.address)))\n    );\n  }\n\n  private getFormattedBalance(balance: Balance | undefined) {\n    const [prefix, postfix] = balance\n      ? formatBalance(balance.freeBalance, {\n          forceUnit: '-',\n          withSi: false,\n        }).split('.')\n      : ['0', undefined];\n\n    return prefix + '.' + (postfix || '0000');\n  }\n\n  private async checkIfAlreadySignIn(accountData: AccountData[]) {\n    const id = this.storage.getAccountId();\n    const account = accountData.find((accountData) => accountData.id === id);\n    if (account) {\n      await this.setCurrentAccount(account);\n    }\n  }\n\n  private getAnonymousAccountData(id: string) {\n    return {\n      id,\n      struct: {\n        id,\n        followersCount: 0,\n        followingAccountsCount: 0,\n        followingSpacesCount: 0,\n        reputation: 0,\n        hasProfile: false,\n      },\n    } as ProfileData;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "api",
                        "type": "SubsocialApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "storage",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 46,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "SubsocialApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storage",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CommentService",
            "id": "injectable-CommentService-d6bdb71bc99a5b39992d4cc6e6680489",
            "file": "src/app/shared/services/comment.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getPostReplyId",
                    "args": [
                        {
                            "name": "postId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ReplyIdStruct>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "postId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { SubsocialApiService } from './subsocial-api.service';\r\nimport { ReplyIdStruct } from '../../core/types/reply-id.type';\r\nimport { ConvertService } from './convert.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CommentService {\r\n  constructor(\r\n    private api: SubsocialApiService,\r\n    private convert: ConvertService\r\n  ) {}\r\n\r\n  public async getPostReplyId(postId: string): Promise<ReplyIdStruct> {\r\n    const ids = await this.api.api.subsocial.substrate.getReplyIdsByPostId(\r\n      this.convert.convertToBN(postId)\r\n    );\r\n\r\n    return { id: postId, replyIds: ids.map((id) => id.toString()) };\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "api",
                        "type": "SubsocialApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "convert",
                        "type": "ConvertService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "SubsocialApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "convert",
                        "type": "ConvertService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ContentEffects",
            "id": "injectable-ContentEffects-be0029f3049e45280fb6f4791164c98a",
            "file": "src/app/state/content/content.effects.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions } from '@ngrx/effects';\r\nimport { ContentService } from '../../shared/services/content.service';\r\n\r\n@Injectable()\r\nexport class ContentEffects {\r\n  constructor(\r\n    private action$: Actions,\r\n    private contentService: ContentService\r\n  ) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "contentService",
                        "type": "ContentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "contentService",
                        "type": "ContentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ContentService",
            "id": "injectable-ContentService-e3bdcf481e8062580acc2cf1ac1c6ad8",
            "file": "src/app/shared/services/content.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getEntityContentArray",
                    "args": [
                        {
                            "name": "entity",
                            "type": "Array<CanHaveContent>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "Array<CanHaveContent>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { SubsocialApiService } from './subsocial-api.service';\r\nimport { CanHaveContent } from '@subsocial/api/flat-subsocial/flatteners';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ContentService {\r\n  constructor(private apiService: SubsocialApiService) {}\r\n\r\n  public async getEntityContentArray(entity: Array<CanHaveContent>) {\r\n    const ids: string[] = entity\r\n      .filter((e) => e.contentId !== undefined)\r\n      .map((e) => e.contentId!);\r\n    return await this.apiService.getContentArray(ids);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiService",
                        "type": "SubsocialApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "apiService",
                        "type": "SubsocialApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ConvertService",
            "id": "injectable-ConvertService-386f9a466b392eb7f4a3e95f45f4856d",
            "file": "src/app/shared/services/convert.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "convertBN",
                    "args": [
                        {
                            "name": "value",
                            "type": "BN",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "BN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertBNs",
                    "args": [
                        {
                            "name": "bns",
                            "type": "Array<BN>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "bns",
                            "type": "Array<BN>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertToBN",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertToBNArray",
                    "args": [
                        {
                            "name": "array",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "array",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport * as BN from 'bn.js';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConvertService {\n  constructor() {}\n\n  public convertToBN(value: string) {\n    return new BN(value);\n  }\n\n  public convertToBNArray(array: string[]) {\n    return array.map((el) => this.convertToBN(el));\n  }\n\n  public convertBN(value: BN) {\n    return value.toString();\n  }\n\n  public convertBNs(bns: Array<BN>) {\n    return bns.map((bn) => bn.toString());\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "type": "injectable"
        },
        {
            "name": "DateService",
            "id": "injectable-DateService-1f17a3a1b5fc9d5132129aa22fc12b23",
            "file": "src/app/shared/services/date.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "fromNow",
                    "args": [
                        {
                            "name": "date",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport * as dayjs from 'dayjs';\r\nimport * as relativeTime from 'dayjs/plugin/relativeTime';\r\nimport * as updateLocale from 'dayjs/plugin/updateLocale';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class DateService {\r\n  constructor() {\r\n    dayjs.extend(relativeTime);\r\n    dayjs.extend(updateLocale);\r\n    dayjs.updateLocale('en', {\r\n      relativeTime: {\r\n        future: 'in %s',\r\n        past: '%s ago',\r\n        s: 'a few seconds',\r\n        m: 'a minute',\r\n        mm: '%dm',\r\n        h: 'an hour',\r\n        hh: '%dh',\r\n        d: 'a day',\r\n        dd: '%dd',\r\n        M: 'a month',\r\n        MM: '%d months',\r\n        y: 'a year',\r\n        yy: '%d years',\r\n      },\r\n    });\r\n  }\r\n\r\n  fromNow(date: string | number) {\r\n    const diff = dayjs().diff(dayjs(date), 'days');\r\n\r\n    if (diff < 7) {\r\n      return dayjs(date).fromNow().toLowerCase();\r\n    } else if (diff > 7 && diff < 365) {\r\n      return dayjs(date).format('DD MMM');\r\n    } else {\r\n      return dayjs(date).format('DD MMM YY');\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "type": "injectable"
        },
        {
            "name": "DeviceService",
            "id": "injectable-DeviceService-badee43470041955a33118d8c720834f",
            "file": "src/app/shared/services/device.service.ts",
            "properties": [
                {
                    "name": "isMobile$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, fromEvent, Observable } from 'rxjs';\r\nimport {\r\n  distinctUntilChanged,\r\n  map,\r\n  shareReplay,\r\n  startWith,\r\n  tap,\r\n} from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class DeviceService {\r\n  public isMobile$: Observable<boolean>;\r\n\r\n  constructor() {}\r\n\r\n  init() {\r\n    this.isMobile$ = fromEvent<any>(window, 'resize').pipe(\r\n      map((event) => {\r\n        return event.target.innerWidth < 768;\r\n      }),\r\n      startWith(window.innerWidth < 768),\r\n      distinctUntilChanged(),\r\n      shareReplay(1)\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "type": "injectable"
        },
        {
            "name": "HttpService",
            "id": "injectable-HttpService-48ebd46e11dcf6d4986a524093ea27eb",
            "file": "src/app/shared/services/http.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class HttpService {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  get<T>(url: string, params?: object): Observable<T> {\r\n    const httpParams = new HttpParams(params);\r\n    return this.http.get<T>(url, { params: httpParams });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "IconRegistryService",
            "id": "injectable-IconRegistryService-535bf5c2bb71207046b99b2ef05f48b0",
            "file": "src/app/shared/services/icon-registry.service.ts",
            "properties": [
                {
                    "name": "ICON_NAMES",
                    "defaultValue": "[\r\n    'option',\r\n    'copy',\r\n    'copy-white',\r\n    'menu',\r\n    'upvote-default',\r\n    'downvote-default',\r\n    'upvote-active',\r\n    'downvote-active',\r\n    'comment',\r\n    'share',\r\n    'purse',\r\n    'qr',\r\n    'close',\r\n    'profile',\r\n    'setting',\r\n    'reply',\r\n    'edit',\r\n    'photo',\r\n    'photo-white',\r\n    'remove',\r\n    'remove-white',\r\n    'coin',\r\n    'option-hor',\r\n    'info',\r\n    'arrow',\r\n    'info-yellow',\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "SOCIAL_ICONS_NAMES",
                    "defaultValue": "[\r\n    'github',\r\n    'linkedin',\r\n    'medium',\r\n    'telegram',\r\n    'twitter',\r\n    'web',\r\n    'youtube',\r\n    'reddit',\r\n    'facebook',\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 47
                }
            ],
            "methods": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registryIcons",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "iconNames",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "iconNames",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { isPlatformServer } from '@angular/common';\r\nimport { PLATFORM_ID } from '@angular/core';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { MatIconRegistry } from '@angular/material/icon';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { environment } from '../../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class IconRegistryService {\r\n  constructor(\r\n    private iconRegistry: MatIconRegistry,\r\n    private sanitizer: DomSanitizer,\r\n    @Inject(PLATFORM_ID) private platformId: Object\r\n  ) {}\r\n\r\n  ICON_NAMES = [\r\n    'option',\r\n    'copy',\r\n    'copy-white',\r\n    'menu',\r\n    'upvote-default',\r\n    'downvote-default',\r\n    'upvote-active',\r\n    'downvote-active',\r\n    'comment',\r\n    'share',\r\n    'purse',\r\n    'qr',\r\n    'close',\r\n    'profile',\r\n    'setting',\r\n    'reply',\r\n    'edit',\r\n    'photo',\r\n    'photo-white',\r\n    'remove',\r\n    'remove-white',\r\n    'coin',\r\n    'option-hor',\r\n    'info',\r\n    'arrow',\r\n    'info-yellow',\r\n  ];\r\n\r\n  SOCIAL_ICONS_NAMES = [\r\n    'github',\r\n    'linkedin',\r\n    'medium',\r\n    'telegram',\r\n    'twitter',\r\n    'web',\r\n    'youtube',\r\n    'reddit',\r\n    'facebook',\r\n  ];\r\n\r\n  init() {\r\n    let url = 'assets/icons/';\r\n    if (isPlatformServer(this.platformId)) {\r\n      url = environment.domainUrl + url;\r\n    }\r\n\r\n    this.registryIcons(url, this.ICON_NAMES);\r\n    this.registryIcons(url + 'links/', this.SOCIAL_ICONS_NAMES);\r\n  }\r\n\r\n  private registryIcons(url: string, iconNames: string[]): void {\r\n    for (const name of iconNames) {\r\n      this.iconRegistry.addSvgIcon(\r\n        name + '-icon',\r\n        this.sanitizer.bypassSecurityTrustResourceUrl(url + name + '.svg')\r\n      );\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "iconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "iconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LinkService",
            "id": "injectable-LinkService-4e88239c0ca1f9eeeb5f11f063b96f13",
            "file": "src/app/shared/services/link.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getPostIdFromLink",
                    "args": [
                        {
                            "name": "link",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPostLink",
                    "args": [
                        {
                            "name": "spaceHandle",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "spaceHandle",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport slug from 'slugify';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class LinkService {\r\n  constructor() {}\r\n\r\n  getPostLink(spaceHandle: string, title: string, id: string): string {\r\n    return `/@${spaceHandle}/${slug(title)}-${id}`;\r\n  }\r\n\r\n  getPostIdFromLink(link: string | null) {\r\n    return link ? link.trim().split('-').pop()! : '';\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "type": "injectable"
        },
        {
            "name": "LoaderEffects",
            "id": "injectable-LoaderEffects-190469222414455cab943421a159e49c",
            "file": "src/app/state/loader/loader.effects.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\n\r\n@Injectable()\r\nexport class LoaderEffects {\r\n  constructor(private action$: Actions) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MyPostReactionsEffects",
            "id": "injectable-MyPostReactionsEffects-b569f12bf9c4d2477de705285d3d7b3c",
            "file": "src/app/state/my-post-reactions/my-post-reactions.effects.ts",
            "properties": [
                {
                    "name": "loadMyPostReactions$",
                    "defaultValue": "createEffect(() =>\r\n    this.action$.pipe(\r\n      ofType(MyPostReactionsActions.getGetMyPostReactionsByPostIds),\r\n      switchMap(({ ids }) =>\r\n        from(this.reactionsService.getReactionsIdsByPostIds(ids)).pipe(\r\n          filter(\r\n            (reactions) => reactions !== undefined && reactions.length > 0\r\n          ),\r\n          map((reactions) =>\r\n            MyPostReactionsActions.upsertMyPostReactions({\r\n              payload: reactions!,\r\n            })\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport * as MyPostReactionsActions from './my-post-reactions.actions';\r\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\r\nimport { from } from 'rxjs';\r\nimport { CommentService } from '../../shared/services/comment.service';\r\nimport { ReactionsService } from '../../shared/services/reactions.service';\r\n\r\n@Injectable()\r\nexport class MyPostReactionsEffects {\r\n  constructor(\r\n    private action$: Actions,\r\n    private reactionsService: ReactionsService\r\n  ) {}\r\n\r\n  loadMyPostReactions$ = createEffect(() =>\r\n    this.action$.pipe(\r\n      ofType(MyPostReactionsActions.getGetMyPostReactionsByPostIds),\r\n      switchMap(({ ids }) =>\r\n        from(this.reactionsService.getReactionsIdsByPostIds(ids)).pipe(\r\n          filter(\r\n            (reactions) => reactions !== undefined && reactions.length > 0\r\n          ),\r\n          map((reactions) =>\r\n            MyPostReactionsActions.upsertMyPostReactions({\r\n              payload: reactions!,\r\n            })\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "reactionsService",
                        "type": "ReactionsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "reactionsService",
                        "type": "ReactionsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "NavigationService",
            "id": "injectable-NavigationService-f74fd2ab1a685eddf9729d3a9e08c32a",
            "file": "src/app/shared/services/navigation.service.ts",
            "properties": [
                {
                    "name": "activeTab$",
                    "defaultValue": "this.activeTabSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "activeTabSource",
                    "defaultValue": "new BehaviorSubject<TabLinkData | null>({\r\n    tabName: 'feed',\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "isShowTab$",
                    "defaultValue": "this.isShowTabSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isShowTabSource",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "tabLinks",
                    "defaultValue": "[\r\n    { tabName: 'posts' },\r\n    { tabName: 'spaces' },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TabLinkData[]",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "hideTab",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showTab",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "switchTab",
                    "args": [
                        {
                            "name": "tab",
                            "type": "TabLinkData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "TabLinkData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateUrlQueryParams",
                    "args": [
                        {
                            "name": "queryParam",
                            "type": "Params",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "queryParam",
                            "type": "Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { Params, Router } from '@angular/router';\r\nimport { TabLinkData } from '../../core/models/tab-link-data.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class NavigationService {\r\n  private activeTabSource = new BehaviorSubject<TabLinkData | null>({\r\n    tabName: 'feed',\r\n  });\r\n  public activeTab$ = this.activeTabSource.asObservable();\r\n  private isShowTabSource = new BehaviorSubject<boolean>(false);\r\n  public isShowTab$ = this.isShowTabSource.asObservable();\r\n  public tabLinks: TabLinkData[] = [\r\n    { tabName: 'posts' },\r\n    { tabName: 'spaces' },\r\n  ];\r\n\r\n  constructor(private router: Router) {}\r\n\r\n  public switchTab(tab: TabLinkData) {\r\n    const params: Params = { tab: tab.tabName };\r\n    this.updateUrlQueryParams(params);\r\n    this.activeTabSource.next(tab);\r\n  }\r\n\r\n  public showTab() {\r\n    this.isShowTabSource.next(true);\r\n  }\r\n\r\n  public hideTab() {\r\n    this.isShowTabSource.next(false);\r\n    this.activeTabSource.next(null);\r\n  }\r\n\r\n  private updateUrlQueryParams(queryParam: Params) {\r\n    this.router.navigate(['/'], {\r\n      queryParams: queryParam,\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PostEffects",
            "id": "injectable-PostEffects-dcd9ef560bbb036c2b19080185952630",
            "file": "src/app/state/post/post.effects.ts",
            "properties": [
                {
                    "name": "loadPosts$",
                    "defaultValue": "createEffect(() =>\r\n    this.action$.pipe(\r\n      ofType(PostActions.getPostsByIds),\r\n      mergeMap(({ payload }) =>\r\n        this.store.select(selectNonExistingPostIds(payload.ids)).pipe(\r\n          take(1),\r\n          map((ids) => {\r\n            return { ids: ids, type: payload.type };\r\n          })\r\n        )\r\n      ),\r\n      tap((data) =>\r\n        this.store.dispatch(\r\n          MyPostReactionsActions.getGetMyPostReactionsByPostIds({\r\n            ids: data.ids,\r\n          })\r\n        )\r\n      ),\r\n      concatMap((data) =>\r\n        from(this.postService.getPostsWithAllData(data.ids, data.type)).pipe(\r\n          switchMap((postsData) => [\r\n            ContentActions.upsertContents({ payload: postsData.contents }),\r\n            SpaceActions.upsertSpaces({ payload: postsData.spaces }),\r\n            ProfileActions.upsertProfiles({ payload: postsData.profiles }),\r\n            PostActions.upsertPosts({ payload: postsData.posts }),\r\n            PostActions.loadPostsSuccess(),\r\n          ])\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "loadReplyPosts$",
                    "defaultValue": "createEffect(() =>\r\n    this.action$.pipe(\r\n      ofType(ReplyIdAction.upsertReplyIds),\r\n      map(({ payload }) =>\r\n        PostActions.getPostsByIds({ payload: { ids: payload.replyIds } })\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 65
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { PostService } from '../../post/services/post.service';\r\nimport * as PostActions from './post.actions';\r\nimport * as ContentActions from '../content/content.actions';\r\nimport * as SpaceActions from '../space/space.actions';\r\nimport * as ProfileActions from '../profile/profile.actions';\r\nimport * as LoaderActions from '../loader/loader.actions';\r\nimport * as MyPostReactionsActions from '../my-post-reactions/my-post-reactions.actions';\r\nimport {\r\n  concatMap,\r\n  first,\r\n  map,\r\n  mergeMap,\r\n  switchMap,\r\n  take,\r\n  tap,\r\n} from 'rxjs/operators';\r\nimport { from } from 'rxjs';\r\nimport * as ReplyIdAction from '../reply-id/reply-id.actions';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from '../state';\r\nimport { selectNonExistingPostIds } from './post.selectors';\r\n\r\n@Injectable()\r\nexport class PostEffects {\r\n  constructor(\r\n    private action$: Actions,\r\n    private postService: PostService,\r\n    private store: Store<AppState>\r\n  ) {}\r\n\r\n  loadPosts$ = createEffect(() =>\r\n    this.action$.pipe(\r\n      ofType(PostActions.getPostsByIds),\r\n      mergeMap(({ payload }) =>\r\n        this.store.select(selectNonExistingPostIds(payload.ids)).pipe(\r\n          take(1),\r\n          map((ids) => {\r\n            return { ids: ids, type: payload.type };\r\n          })\r\n        )\r\n      ),\r\n      tap((data) =>\r\n        this.store.dispatch(\r\n          MyPostReactionsActions.getGetMyPostReactionsByPostIds({\r\n            ids: data.ids,\r\n          })\r\n        )\r\n      ),\r\n      concatMap((data) =>\r\n        from(this.postService.getPostsWithAllData(data.ids, data.type)).pipe(\r\n          switchMap((postsData) => [\r\n            ContentActions.upsertContents({ payload: postsData.contents }),\r\n            SpaceActions.upsertSpaces({ payload: postsData.spaces }),\r\n            ProfileActions.upsertProfiles({ payload: postsData.profiles }),\r\n            PostActions.upsertPosts({ payload: postsData.posts }),\r\n            PostActions.loadPostsSuccess(),\r\n          ])\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  loadReplyPosts$ = createEffect(() =>\r\n    this.action$.pipe(\r\n      ofType(ReplyIdAction.upsertReplyIds),\r\n      map(({ payload }) =>\r\n        PostActions.getPostsByIds({ payload: { ids: payload.replyIds } })\r\n      )\r\n    )\r\n  );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postService",
                        "type": "PostService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postService",
                        "type": "PostService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PostService",
            "id": "injectable-PostService-16a804340a41b72dd25ad4069f9486dc",
            "file": "src/app/post/services/post.service.ts",
            "properties": [
                {
                    "name": "spaceIds",
                    "defaultValue": "environment.recommendedSpaceIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methods": [
                {
                    "name": "findPostsWithAllDetails",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findPublicPostsWithAllDetails",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFlatPostsByIds",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOrLoadPost",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"all\" | \"public\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'public'"
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"all\" | \"public\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'public'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPostIdsBySpaceId",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPostIdsBySpaceIds",
                    "args": [
                        {
                            "name": "spaceIds",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string[]>",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "spaceIds",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPostsWithAllData",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"public\" | \"all\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'public'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TransformPostWithAllDetails>",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"public\" | \"all\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'public'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getReactionIdsByPostId",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getReactionsByIds",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSuggestedPostsIds",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "splitPostWithAllDataByEntity",
                    "args": [
                        {
                            "name": "postsAllData",
                            "type": "PostWithAllDetails[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TransformPostWithAllDetails",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "postsAllData",
                            "type": "PostWithAllDetails[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { forkJoin, from, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { environment } from '../../../environments/environment';\r\nimport { LinkService } from '../../shared/services/link.service';\r\nimport { SubsocialApiService } from '../../shared/services/subsocial-api.service';\r\nimport { PostId } from '@subsocial/types/substrate/interfaces';\r\nimport { transformEntityDataArray } from '../../core/utils';\r\nimport { PostWithAllDetails } from '@subsocial/api/flat-subsocial/dto';\r\nimport {\r\n  PostStruct,\r\n  ProfileStruct,\r\n  SpaceStruct,\r\n} from '@subsocial/api/flat-subsocial/flatteners';\r\nimport { Content } from '../../core/types/content.type';\r\nimport { TransformPostWithAllDetails } from '../../core/types/transform-dto.types';\r\nimport { METHODS, PALLETS } from '../../core/constants/query.const';\r\nimport { flatReaction } from '../../core/mapper/flatten.map';\r\nimport { ConvertService } from '../../shared/services/convert.service';\r\nimport { StoreService } from '../../state/store.service';\r\nimport { selectPostWithAllDetailsById } from '../../state/post/post.selectors';\r\nimport { getPostsByIds, loadPostsSuccess } from '../../state/post/post.actions';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PostService {\r\n  spaceIds = environment.recommendedSpaceIds;\r\n  constructor(\r\n    private http: HttpClient,\r\n    private link: LinkService,\r\n    private api: SubsocialApiService,\r\n    private convert: ConvertService,\r\n    private storeService: StoreService\r\n  ) {}\r\n\r\n  async getOrLoadPost(id: string, type: 'all' | 'public' = 'public') {\r\n    const loadProps = {\r\n      payload: {\r\n        ids: [id],\r\n        type,\r\n      },\r\n    };\r\n\r\n    return await this.storeService.getOrLoadEntities(\r\n      selectPostWithAllDetailsById,\r\n      getPostsByIds,\r\n      loadPostsSuccess,\r\n      id,\r\n      loadProps\r\n    );\r\n  }\r\n\r\n  getSuggestedPostsIds() {\r\n    return this.getPostIdsBySpaceIds(this.spaceIds);\r\n  }\r\n\r\n  getPostIdsBySpaceIds(spaceIds: string[]): Observable<string[]> {\r\n    const allIds$: Observable<PostId[]>[] = [];\r\n    spaceIds.forEach((id) => {\r\n      allIds$.push(\r\n        from(\r\n          this.api.api.subsocial.substrate.postIdsBySpaceId(\r\n            this.convert.convertToBN(id)\r\n          )\r\n        )\r\n      );\r\n    });\r\n\r\n    return forkJoin(allIds$).pipe(\r\n      map((postIds) => {\r\n        return postIds\r\n          .flat()\r\n          .sort((a, b) => b.sub(a).toNumber())\r\n          .map((id) => id.toString());\r\n      })\r\n    );\r\n  }\r\n\r\n  async getPostIdsBySpaceId(id: string) {\r\n    const ids = await this.api.api.subsocial.substrate.postIdsBySpaceId(\r\n      this.convert.convertToBN(id)\r\n    );\r\n    return ids.sort((a, b) => b.sub(a).toNumber()).map((id) => id.toString());\r\n  }\r\n\r\n  async getFlatPostsByIds(ids: string[]) {\r\n    const anyPostId = this.convert.convertToBNArray(ids);\r\n    const postsData = await this.api.api.findPublicPosts(anyPostId);\r\n    return transformEntityDataArray(postsData);\r\n  }\r\n\r\n  async getPostsWithAllData(\r\n    ids: string[],\r\n    type: 'public' | 'all' = 'public'\r\n  ): Promise<TransformPostWithAllDetails> {\r\n    const postsData =\r\n      type === 'public'\r\n        ? await this.findPublicPostsWithAllDetails(ids)\r\n        : await this.findPostsWithAllDetails(ids);\r\n\r\n    return this.splitPostWithAllDataByEntity(postsData);\r\n  }\r\n\r\n  async findPublicPostsWithAllDetails(ids: string[]) {\r\n    return await this.api.api.findPublicPostsWithAllDetails(\r\n      this.convert.convertToBNArray(ids)\r\n    );\r\n  }\r\n\r\n  async findPostsWithAllDetails(ids: string[]) {\r\n    return await this.api.api.findPostsWithAllDetails({\r\n      ids: this.convert.convertToBNArray(ids),\r\n    });\r\n  }\r\n\r\n  async getReactionIdsByPostId(id: string) {\r\n    return await this.api.getSubstrateIdsById({\r\n      pallet: PALLETS.reactions,\r\n      method: METHODS.reactionIdsByPostId,\r\n      id,\r\n    });\r\n  }\r\n\r\n  async getReactionsByIds(ids: string[]) {\r\n    const reactions = await this.api.api.subsocial.substrate.findReactions(\r\n      this.convert.convertToBNArray(ids)\r\n    );\r\n\r\n    return reactions.map((reaction) => flatReaction(reaction));\r\n  }\r\n\r\n  public splitPostWithAllDataByEntity(\r\n    postsAllData: PostWithAllDetails[]\r\n  ): TransformPostWithAllDetails {\r\n    const posts: PostStruct[] = [];\r\n    const spaces: SpaceStruct[] = [];\r\n    const profiles: ProfileStruct[] = [];\r\n    const contents: Content[] = [];\r\n\r\n    postsAllData.forEach((postAllData) => {\r\n      const { post, space, owner } = postAllData;\r\n\r\n      if (post?.content && space?.content) {\r\n        posts.push(post.struct);\r\n        spaces.push(space.struct);\r\n\r\n        const postContent = post.content as Content;\r\n        postContent['id'] = post.struct.contentId!;\r\n\r\n        const spaceContent = space.content as Content;\r\n        spaceContent['id'] = space.struct.contentId!;\r\n\r\n        contents.push(postContent, spaceContent);\r\n      }\r\n\r\n      if (owner?.content) {\r\n        profiles.push(owner.struct);\r\n        const profileContent = owner.content as Content;\r\n        profileContent['id'] = owner.struct.contentId!;\r\n        contents.push(profileContent);\r\n      }\r\n    });\r\n\r\n    return { posts, contents, profiles, spaces };\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "link",
                        "type": "LinkService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "api",
                        "type": "SubsocialApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "convert",
                        "type": "ConvertService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "storeService",
                        "type": "StoreService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "link",
                        "type": "LinkService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "api",
                        "type": "SubsocialApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "convert",
                        "type": "ConvertService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storeService",
                        "type": "StoreService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ProfileEffects",
            "id": "injectable-ProfileEffects-9f9a51533a5fe8cdd4424e301b2ba35f",
            "file": "src/app/state/profile/profile.effects.ts",
            "properties": [
                {
                    "name": "loadMyProfiles$",
                    "defaultValue": "createEffect(() =>\r\n    this.action$.pipe(\r\n      ofType(ProfileAction.loadMyProfile),\r\n      switchMap(({ id }) =>\r\n        from(this.accountService.loadProfile(id)).pipe(\r\n          filter((profileData) => !!profileData),\r\n          concatMap((profileData) => {\r\n            if (profileData?.content) {\r\n              return [\r\n                MyAccountAction.setMyAccount({\r\n                  payload: this.accountService.getMyAccountData(\r\n                    profileData!.struct\r\n                  ),\r\n                }),\r\n                ProfileAction.upsertProfile({\r\n                  payload: profileData!.struct,\r\n                }),\r\n                ContentAction.upsertContent({\r\n                  payload: profileData!.content as Content,\r\n                }),\r\n                ProfileAction.saveProfilesSuccess(),\r\n              ];\r\n            } else {\r\n              return [\r\n                MyAccountAction.setMyAccount({\r\n                  payload: this.accountService.getMyAccountData(\r\n                    profileData!.struct\r\n                  ),\r\n                }),\r\n                ProfileAction.upsertProfile({\r\n                  payload: profileData!.struct,\r\n                }),\r\n                ProfileAction.saveProfilesSuccess(),\r\n              ];\r\n            }\r\n          })\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "loadProfile$",
                    "defaultValue": "createEffect(() =>\r\n    this.action$.pipe(\r\n      ofType(ProfileAction.loadProfile),\r\n      switchMap(({ id }) =>\r\n        from(this.accountService.loadProfile(id)).pipe(\r\n          filter((profileData) => !!profileData),\r\n          switchMap((profileData) => [\r\n            ProfileAction.upsertProfile({\r\n              payload: profileData!.struct,\r\n            }),\r\n            ContentAction.upsertContent({\r\n              payload: profileData!.content as Content,\r\n            }),\r\n            ProfileAction.saveProfilesSuccess(),\r\n          ])\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "loadProfiles$",
                    "defaultValue": "createEffect(() =>\r\n    this.action$.pipe(\r\n      ofType(ProfileAction.loadProfiles),\r\n      switchMap(({ payload }) =>\r\n        from(this.profileService.getProfilesByIds(payload.ids)).pipe(\r\n          filter((profileData) => !!profileData),\r\n          switchMap((profileData) => [\r\n            ContentAction.upsertContents({\r\n              payload: profileData!.contents,\r\n            }),\r\n            LoaderAction.setLoader({ isLoading: false }),\r\n            ProfileAction.upsertProfiles({\r\n              payload: profileData!.structs,\r\n            }),\r\n            ProfileAction.saveProfilesSuccess(),\r\n          ])\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { AccountService } from '../../shared/services/account.service';\r\nimport * as ProfileAction from './profile.actions';\r\nimport * as ContentAction from '../content/content.actions';\r\nimport * as LoaderAction from '../loader/loader.actions';\r\nimport * as MyAccountAction from '../my-account/my-account.actions';\r\nimport { concatMap, filter, switchMap, tap } from 'rxjs/operators';\r\nimport { from } from 'rxjs';\r\nimport { Content } from 'src/app/core/types/content.type';\r\nimport { ProfileService } from '../../account/services/profile.service';\r\n\r\n@Injectable()\r\nexport class ProfileEffects {\r\n  constructor(\r\n    private action$: Actions,\r\n    private accountService: AccountService,\r\n    private profileService: ProfileService\r\n  ) {}\r\n\r\n  loadProfile$ = createEffect(() =>\r\n    this.action$.pipe(\r\n      ofType(ProfileAction.loadProfile),\r\n      switchMap(({ id }) =>\r\n        from(this.accountService.loadProfile(id)).pipe(\r\n          filter((profileData) => !!profileData),\r\n          switchMap((profileData) => [\r\n            ProfileAction.upsertProfile({\r\n              payload: profileData!.struct,\r\n            }),\r\n            ContentAction.upsertContent({\r\n              payload: profileData!.content as Content,\r\n            }),\r\n            ProfileAction.saveProfilesSuccess(),\r\n          ])\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  loadProfiles$ = createEffect(() =>\r\n    this.action$.pipe(\r\n      ofType(ProfileAction.loadProfiles),\r\n      switchMap(({ payload }) =>\r\n        from(this.profileService.getProfilesByIds(payload.ids)).pipe(\r\n          filter((profileData) => !!profileData),\r\n          switchMap((profileData) => [\r\n            ContentAction.upsertContents({\r\n              payload: profileData!.contents,\r\n            }),\r\n            LoaderAction.setLoader({ isLoading: false }),\r\n            ProfileAction.upsertProfiles({\r\n              payload: profileData!.structs,\r\n            }),\r\n            ProfileAction.saveProfilesSuccess(),\r\n          ])\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  loadMyProfiles$ = createEffect(() =>\r\n    this.action$.pipe(\r\n      ofType(ProfileAction.loadMyProfile),\r\n      switchMap(({ id }) =>\r\n        from(this.accountService.loadProfile(id)).pipe(\r\n          filter((profileData) => !!profileData),\r\n          concatMap((profileData) => {\r\n            if (profileData?.content) {\r\n              return [\r\n                MyAccountAction.setMyAccount({\r\n                  payload: this.accountService.getMyAccountData(\r\n                    profileData!.struct\r\n                  ),\r\n                }),\r\n                ProfileAction.upsertProfile({\r\n                  payload: profileData!.struct,\r\n                }),\r\n                ContentAction.upsertContent({\r\n                  payload: profileData!.content as Content,\r\n                }),\r\n                ProfileAction.saveProfilesSuccess(),\r\n              ];\r\n            } else {\r\n              return [\r\n                MyAccountAction.setMyAccount({\r\n                  payload: this.accountService.getMyAccountData(\r\n                    profileData!.struct\r\n                  ),\r\n                }),\r\n                ProfileAction.upsertProfile({\r\n                  payload: profileData!.struct,\r\n                }),\r\n                ProfileAction.saveProfilesSuccess(),\r\n              ];\r\n            }\r\n          })\r\n        )\r\n      )\r\n    )\r\n  );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileService",
                        "type": "ProfileService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileService",
                        "type": "ProfileService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ProfileService",
            "id": "injectable-ProfileService-3b72131084a15657c6c223a0201bf9e8",
            "file": "src/app/account/services/profile.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getFollowersIds",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFollowingIds",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProfilesByIds",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { SubsocialApiService } from '../../shared/services/subsocial-api.service';\nimport { METHODS, PALLETS } from '../../core/constants/query.const';\nimport { ProfileStruct } from '@subsocial/api/flat-subsocial/flatteners';\nimport { Content } from '../../core/types/content.type';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProfileService {\n  constructor(private api: SubsocialApiService) {}\n\n  async getFollowingIds(id: string) {\n    return await this.api.getSubstrateIdsById({\n      pallet: PALLETS.profileFollows,\n      method: METHODS.accountsFollowedByAccount,\n      id,\n    });\n  }\n\n  async getFollowersIds(id: string) {\n    return await this.api.getSubstrateIdsById({\n      pallet: PALLETS.profileFollows,\n      method: METHODS.accountFollowers,\n      id,\n    });\n  }\n\n  async getProfilesByIds(ids: string[]) {\n    const profileData = await this.api.api.findProfiles(ids);\n    const structs: ProfileStruct[] = [];\n    const contents: Content[] = [];\n\n    profileData.forEach((data) => {\n      structs.push(data.struct);\n      if (data.content && data.struct.contentId) {\n        const content = data.content as Content;\n        content['id'] = data.struct.contentId;\n        contents.push(content);\n      }\n    });\n\n    return { structs, contents };\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "api",
                        "type": "SubsocialApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "SubsocialApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ReactionsService",
            "id": "injectable-ReactionsService-182f1e1fa53162b9c8f6ff9a8151a710",
            "file": "src/app/shared/services/reactions.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getReactionsIdsByPostIds",
                    "args": [
                        {
                            "name": "postIds",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "postIds",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { AccountService } from './account.service';\nimport { SubsocialApiService } from './subsocial-api.service';\nimport { METHODS, PALLETS } from '../../core/constants/query.const';\nimport { AnyReactionId } from '@subsocial/types';\nimport { filter, skipWhile, take } from 'rxjs/operators';\nimport { MyPostReactionsStruct } from '../../state/my-post-reactions/my-post-reactions.state';\nimport BN from 'bn.js';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReactionsService {\n  constructor(\n    private accountService: AccountService,\n    private api: SubsocialApiService\n  ) {}\n\n  async getReactionsIdsByPostIds(postIds: string[]) {\n    const account = await this.accountService.currentAccount$\n      .pipe(\n        skipWhile((account) => !account),\n        take(1)\n      )\n      .toPromise();\n\n    if (!account) return;\n\n    const tuples = postIds.map((postId) => [account.id, postId]);\n\n    const reactionIds = await this.api.getSubstrateIdsByMulti({\n      pallet: PALLETS.reactions,\n      method: METHODS.postReactionIdByAccount,\n      tuples,\n    });\n\n    const filteredReactionIds: BN[] = [];\n\n    const reactionIdByPostIds = new Map<string, string>();\n    tuples.map(([, postIds], index) => {\n      const reactionId = reactionIds[index] as unknown as BN;\n      if (!reactionId.eqn(0)) {\n        reactionIdByPostIds.set(reactionId.toString(), postIds);\n        filteredReactionIds.push(reactionId);\n      }\n    });\n\n    const reactionsRaw = await this.api.substrate.findReactions(\n      filteredReactionIds\n    );\n\n    return reactionsRaw.map((reactionRaw) => {\n      const id = reactionRaw.id.toString();\n\n      return {\n        id:\n          reactionRaw.created.account.toString() +\n          '-' +\n          reactionIdByPostIds.get(id),\n        reactionId: id,\n        kind: reactionRaw.kind.isUpvote ? 'Upvote' : 'Downvote',\n      } as MyPostReactionsStruct;\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "api",
                        "type": "SubsocialApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "api",
                        "type": "SubsocialApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ReplyIdEffects",
            "id": "injectable-ReplyIdEffects-093dde89cd81cf2b09f2447533953d68",
            "file": "src/app/state/reply-id/reply-id.effects.ts",
            "properties": [
                {
                    "name": "loadReplyIds$",
                    "defaultValue": "createEffect(() =>\r\n    this.action$.pipe(\r\n      ofType(ReplyIdAction.getReplyIdsByParentPostId),\r\n      switchMap(({ id }) =>\r\n        from(this.commentService.getPostReplyId(id)).pipe(\r\n          map((replyIds) => ReplyIdAction.upsertReplyIds({ payload: replyIds }))\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { PostService } from '../../post/services/post.service';\r\nimport * as ReplyIdAction from './reply-id.actions';\r\nimport { map, switchMap } from 'rxjs/operators';\r\nimport { from } from 'rxjs';\r\nimport { CommentService } from '../../shared/services/comment.service';\r\n\r\n@Injectable()\r\nexport class ReplyIdEffects {\r\n  constructor(\r\n    private action$: Actions,\r\n    private commentService: CommentService\r\n  ) {}\r\n\r\n  loadReplyIds$ = createEffect(() =>\r\n    this.action$.pipe(\r\n      ofType(ReplyIdAction.getReplyIdsByParentPostId),\r\n      switchMap(({ id }) =>\r\n        from(this.commentService.getPostReplyId(id)).pipe(\r\n          map((replyIds) => ReplyIdAction.upsertReplyIds({ payload: replyIds }))\r\n        )\r\n      )\r\n    )\r\n  );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "commentService",
                        "type": "CommentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "commentService",
                        "type": "CommentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SideNavService",
            "id": "injectable-SideNavService-021aae4dffd3b5adfa890af41c377305",
            "file": "src/app/shared/services/side-nav.service.ts",
            "properties": [
                {
                    "name": "isShowAccountSideNav$",
                    "defaultValue": "this.isShowAccountSideNavSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isShowAccountSideNavSource",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "closeAccountSideNav",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openAccountSideNav",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SideNavService {\r\n  private isShowAccountSideNavSource = new BehaviorSubject<boolean>(false);\r\n  public isShowAccountSideNav$: Observable<boolean> =\r\n    this.isShowAccountSideNavSource.asObservable();\r\n\r\n  constructor() {}\r\n\r\n  openAccountSideNav() {\r\n    this.isShowAccountSideNavSource.next(true);\r\n  }\r\n\r\n  closeAccountSideNav() {\r\n    this.isShowAccountSideNavSource.next(false);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "type": "injectable"
        },
        {
            "name": "SnackBarService",
            "id": "injectable-SnackBarService-e10f39cc3f3fc72ed8c72cc085ed42f2",
            "file": "src/app/shared/services/snack-bar.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "openSimpleSnackBar",
                    "args": [
                        {
                            "name": "options",
                            "type": "SimpleSnackBarOption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "SimpleSnackBarOption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport {\n  SimpleSnackBarComponent,\n  SimpleSnackBarOption,\n} from '../components/simple-snack-bar/simple-snack-bar.component';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SnackBarService {\n  constructor(readonly snackBar: MatSnackBar) {}\n\n  public openSimpleSnackBar(options: SimpleSnackBarOption) {\n    return this.snackBar.openFromComponent(SimpleSnackBarComponent, {\n      data: options,\n      horizontalPosition: 'start',\n      verticalPosition: 'bottom',\n      duration: options.duration,\n      panelClass: ['white-snackbar'],\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SpaceEffects",
            "id": "injectable-SpaceEffects-60de1f9fc980a3d6c2a784d191bba51f",
            "file": "src/app/state/space/space.effects.ts",
            "properties": [
                {
                    "name": "loadSpace$",
                    "defaultValue": "createEffect(() =>\r\n    this.action$.pipe(\r\n      ofType(SpaceActions.loadSpaceById),\r\n      switchMap(({ id }) =>\r\n        from(this.spaceService.getSpaceById(id)).pipe(\r\n          filter((space) => space !== undefined),\r\n          switchMap((space) => [\r\n            SpaceActions.upsertSpace({ payload: space!.struct as SpaceStruct }),\r\n            ContentActions.upsertContent({\r\n              payload: space!.content as Content,\r\n            }),\r\n            SpaceActions.loadSpaceSuccess(),\r\n          ])\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "loadSpaces$",
                    "defaultValue": "createEffect(() =>\r\n    this.action$.pipe(\r\n      ofType(SpaceActions.getSpacesByIds),\r\n      switchMap(({ payload }) =>\r\n        from(\r\n          this.spaceService.getFlatSpacesById(payload.ids, payload.type)\r\n        ).pipe(\r\n          switchMap((spaceData) => [\r\n            ContentActions.upsertContents({ payload: spaceData.contents }),\r\n            LoaderActions.setLoader({ isLoading: false }),\r\n            SpaceActions.upsertSpaces({\r\n              payload: spaceData.structs as Array<SpaceStruct>,\r\n            }),\r\n            SpaceActions.loadSpaceSuccess(),\r\n          ])\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport * as SpaceActions from './space.actions';\r\nimport * as ContentActions from '../content/content.actions';\r\nimport * as LoaderActions from '../loader/loader.actions';\r\nimport { filter, map, switchMap } from 'rxjs/operators';\r\nimport { SpaceService } from '../../space/services/space.service';\r\nimport { from } from 'rxjs';\r\nimport { Content } from '../../core/types/content.type';\r\nimport { SpaceStruct } from '@subsocial/api/flat-subsocial/flatteners';\r\n\r\n@Injectable()\r\nexport class SpaceEffects {\r\n  constructor(private action$: Actions, private spaceService: SpaceService) {}\r\n\r\n  loadSpaces$ = createEffect(() =>\r\n    this.action$.pipe(\r\n      ofType(SpaceActions.getSpacesByIds),\r\n      switchMap(({ payload }) =>\r\n        from(\r\n          this.spaceService.getFlatSpacesById(payload.ids, payload.type)\r\n        ).pipe(\r\n          switchMap((spaceData) => [\r\n            ContentActions.upsertContents({ payload: spaceData.contents }),\r\n            LoaderActions.setLoader({ isLoading: false }),\r\n            SpaceActions.upsertSpaces({\r\n              payload: spaceData.structs as Array<SpaceStruct>,\r\n            }),\r\n            SpaceActions.loadSpaceSuccess(),\r\n          ])\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  loadSpace$ = createEffect(() =>\r\n    this.action$.pipe(\r\n      ofType(SpaceActions.loadSpaceById),\r\n      switchMap(({ id }) =>\r\n        from(this.spaceService.getSpaceById(id)).pipe(\r\n          filter((space) => space !== undefined),\r\n          switchMap((space) => [\r\n            SpaceActions.upsertSpace({ payload: space!.struct as SpaceStruct }),\r\n            ContentActions.upsertContent({\r\n              payload: space!.content as Content,\r\n            }),\r\n            SpaceActions.loadSpaceSuccess(),\r\n          ])\r\n        )\r\n      )\r\n    )\r\n  );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "spaceService",
                        "type": "SpaceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "spaceService",
                        "type": "SpaceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SpaceService",
            "id": "injectable-SpaceService-3e649586a200b9fea81ed363321daa38",
            "file": "src/app/space/services/space.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getFlatSpacesById",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"public\" | \"all\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'public'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TransformDataArray>",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"public\" | \"all\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'public'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFollowersIdsBySpaceId",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOrFetchSpaceById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSpaceById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSpaceIdByHandle",
                    "args": [
                        {
                            "name": "handle",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<string | undefined>",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "handle",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSpaceIdsByAccount",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSpacesByIds",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<SpaceStruct[]>",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { SubsocialApiService } from '../../shared/services/subsocial-api.service';\r\nimport { SpaceStruct } from '@subsocial/api/flat-subsocial/flatteners';\r\nimport { SpaceData } from '@subsocial/api/flat-subsocial/dto';\r\nimport { Content } from '../../core/types/content.type';\r\nimport { SpaceId } from '@subsocial/types/substrate/interfaces';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from '../../state/state';\r\nimport { selectSpaceById } from '../../state/space/space.selectors';\r\nimport {\r\n  loadSpaceById,\r\n  loadSpaceSuccess,\r\n} from '../../state/space/space.actions';\r\nimport {\r\n  TransformData,\r\n  TransformDataArray,\r\n} from '../../core/types/transform-dto.types';\r\nimport { transformEntityDataArray } from '../../core/utils';\r\nimport { METHODS, PALLETS } from '../../core/constants/query.const';\r\nimport { ConvertService } from '../../shared/services/convert.service';\r\nimport { StoreService } from '../../state/store.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SpaceService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private apiService: SubsocialApiService,\r\n    private store: Store<AppState>,\r\n    private convert: ConvertService,\r\n    private storeService: StoreService\r\n  ) {}\r\n\r\n  public async getSpacesByIds(ids: string[]): Promise<SpaceStruct[]> {\r\n    return await this.apiService.api.findSpaceStructs(ids);\r\n  }\r\n\r\n  public async getFlatSpacesById(\r\n    ids: string[],\r\n    type: 'public' | 'all' = 'public'\r\n  ): Promise<TransformDataArray> {\r\n    const spaceData: SpaceData[] = await this.apiService.api.findPublicSpaces(\r\n      ids\r\n    );\r\n\r\n    if (type === 'public') {\r\n      const unlistedSpaces = await this.apiService.api.findUnlistedSpaces(ids);\r\n      spaceData.push(...unlistedSpaces);\r\n    }\r\n\r\n    return transformEntityDataArray(spaceData);\r\n  }\r\n\r\n  async getSpaceIdByHandle(handle: string): Promise<string | undefined> {\r\n    const res: SpaceId | undefined =\r\n      await this.apiService.api.subsocial.substrate.getSpaceIdByHandle(\r\n        handle.toLowerCase()\r\n      );\r\n\r\n    return res?.toString();\r\n  }\r\n\r\n  async getSpaceById(id: string) {\r\n    const spaceData = await this.apiService.api.findSpace({\r\n      id: this.convert.convertToBN(id),\r\n    });\r\n    if (spaceData && spaceData.struct.contentId) {\r\n      const transformSpaceData: TransformData = {\r\n        struct: spaceData!.struct,\r\n        content: spaceData.content as Content,\r\n      };\r\n      transformSpaceData.content['id'] = spaceData.struct.contentId;\r\n\r\n      return transformSpaceData;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  async getFollowersIdsBySpaceId(id: string) {\r\n    return await this.apiService.getSubstrateIdsById({\r\n      pallet: PALLETS.spaceFollows,\r\n      method: METHODS.spaceFollowers,\r\n      id,\r\n    });\r\n  }\r\n\r\n  async getOrFetchSpaceById(id: string | undefined) {\r\n    return await this.storeService.getOrLoadEntities(\r\n      selectSpaceById,\r\n      loadSpaceById,\r\n      loadSpaceSuccess,\r\n      id,\r\n      { id }\r\n    );\r\n  }\r\n\r\n  async getSpaceIdsByAccount(id: string) {\r\n    const spaceId =\r\n      await this.apiService.api.subsocial.substrate.spaceIdsByOwner(id);\r\n    return spaceId.map((id) => id.toString());\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "apiService",
                        "type": "SubsocialApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "convert",
                        "type": "ConvertService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "storeService",
                        "type": "StoreService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apiService",
                        "type": "SubsocialApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "convert",
                        "type": "ConvertService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storeService",
                        "type": "StoreService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "StorageService",
            "id": "injectable-StorageService-d276454b410c75fd93d17c251c7aef43",
            "file": "src/app/shared/services/storage.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getAccountId",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeAccountId",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setCurrentAccountId",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\n\nexport const STORAGE_KEYS = {\n  accountId: 'accountId',\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StorageService {\n  constructor() {}\n\n  setCurrentAccountId(id: string) {\n    localStorage.setItem(STORAGE_KEYS.accountId, id);\n  }\n\n  getAccountId() {\n    return localStorage.getItem(STORAGE_KEYS.accountId);\n  }\n\n  removeAccountId() {\n    localStorage.removeItem(STORAGE_KEYS.accountId);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "type": "injectable"
        },
        {
            "name": "StoreService",
            "id": "injectable-StoreService-fb1b35e9b8cb788f008f347155a4433e",
            "file": "src/app/state/store.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getOrLoadEntities",
                    "args": [
                        {
                            "name": "selector",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "loadAction",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "successAction",
                            "type": "ActionCreator",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "getProps",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "loadProps",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "selector",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "loadAction",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "successAction",
                            "type": "ActionCreator",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "getProps",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "loadProps",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getValueFromStore",
                    "args": [
                        {
                            "name": "selector",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "ActionCreator",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "getProps",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "selector",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "ActionCreator",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "getProps",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ActionCreator, Store } from '@ngrx/store';\nimport { AppState } from './state';\nimport { Actions, ofType } from '@ngrx/effects';\nimport { mergeMap, take } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StoreService {\n  constructor(private store: Store<AppState>, private action$: Actions) {}\n\n  public async getValueFromStore(\n    selector: Function,\n    action: ActionCreator,\n    getProps: any\n  ) {\n    return await this.action$\n      .pipe(\n        ofType(action),\n        mergeMap((_) => this.store.select(selector(getProps))),\n        take(1)\n      )\n      .toPromise();\n  }\n\n  public async getOrLoadEntities(\n    selector: Function,\n    loadAction: Function,\n    successAction: ActionCreator,\n    getProps: any,\n    loadProps: any\n  ) {\n    const entitiesFromStore = await this.store\n      .select(selector(getProps))\n      .pipe(take(1))\n      .toPromise();\n\n    if (!entitiesFromStore) {\n      this.store.dispatch(loadAction(loadProps));\n\n      return await this.getValueFromStore(selector, successAction, getProps);\n    }\n\n    return entitiesFromStore;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SubsocialApiService",
            "id": "injectable-SubsocialApiService-80618fd7147a02a90c12448179a91c88",
            "file": "src/app/shared/services/subsocial-api.service.ts",
            "properties": [
                {
                    "name": "api",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FlatSubsocialApi",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getContentArray",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSubstrateIdsById",
                    "args": [
                        {
                            "name": "props",
                            "type": "FetchSubstrateProps",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "props",
                            "type": "FetchSubstrateProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSubstrateIdsByMulti",
                    "args": [
                        {
                            "name": "props",
                            "type": "FetchSubstrateMultiProps",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "props",
                            "type": "FetchSubstrateMultiProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initSubsocialApi",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\r\nimport { newFlatSubsocialApi, SubsocialSubstrateApi } from '@subsocial/api';\r\nimport { environment } from '../../../environments/environment';\r\nimport { FlatSubsocialApi } from '@subsocial/api/flat-subsocial';\r\nimport { isPlatformBrowser } from '@angular/common';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { AnyId } from '@subsocial/api/flat-subsocial/dto';\r\nimport { SnackBarService } from './snack-bar.service';\r\nimport { ConvertService } from './convert.service';\r\nimport BN from 'bn.js';\r\n\r\ntype FetchSubstrateProps = {\r\n  pallet: string;\r\n  method: string;\r\n  id: AnyId;\r\n};\r\n\r\ntype FetchSubstrateMultiProps = {\r\n  pallet: string;\r\n  method: string;\r\n  tuples: string[][];\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SubsocialApiService {\r\n  constructor(\r\n    @Inject(PLATFORM_ID) private platformId: Object,\r\n    private _snackBar: MatSnackBar,\r\n    private snackBarService: SnackBarService,\r\n    private convert: ConvertService\r\n  ) {}\r\n  public api: FlatSubsocialApi;\r\n\r\n  public get substrate() {\r\n    return this.api.subsocial.substrate;\r\n  }\r\n\r\n  async initSubsocialApi() {\r\n    const snackBar = this.snackBarService.openSimpleSnackBar({\r\n      message: 'Connecting to network...',\r\n      iconName: 'info-icon',\r\n    });\r\n\r\n    const { substrateNodeUrl, offchainUrl, ipfsNodeUrl } = environment;\r\n    this.api = await newFlatSubsocialApi({\r\n      substrateNodeUrl,\r\n      offchainUrl,\r\n      ipfsNodeUrl,\r\n      useServer: {\r\n        httpRequestMethod: 'get',\r\n      },\r\n    });\r\n\r\n    snackBar.dismiss();\r\n  }\r\n\r\n  async getSubstrateIdsById(props: FetchSubstrateProps) {\r\n    const readyApi = await this.api.subsocial.substrate.api;\r\n    const { pallet, method, id } = props;\r\n    const ids = await readyApi.query[pallet][method](id);\r\n    return (ids.toJSON() as Array<any>).map((id) => id.toString());\r\n  }\r\n\r\n  async getSubstrateIdsByMulti(props: FetchSubstrateMultiProps) {\r\n    const readyApi = await this.api.subsocial.substrate.api;\r\n    const { pallet, method, tuples } = props;\r\n    const ids = await readyApi.query[pallet][method].multi(tuples);\r\n    return ids;\r\n  }\r\n\r\n  async getContentArray(ids: string[]) {\r\n    return await this.api.subsocial.ipfs.getContentArray(ids);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBarService",
                        "type": "SnackBarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "convert",
                        "type": "ConvertService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBarService",
                        "type": "SnackBarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "convert",
                        "type": "ConvertService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "substrate": {
                    "name": "substrate",
                    "getSignature": {
                        "name": "substrate",
                        "type": "",
                        "returnType": "",
                        "line": 36
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "TransferStateService",
            "id": "injectable-TransferStateService-50d0dc1f281253fd87b44c85113f984d",
            "file": "src/app/shared/services/transfer-state.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "set",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "object",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "object",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { makeStateKey, TransferState } from '@angular/platform-browser';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TransferStateService {\n  constructor(private transferState: TransferState) {}\n\n  public set<T>(key: string, object: T) {\n    const stateKey = makeStateKey<T>(key);\n    this.transferState.set<T>(stateKey, object);\n  }\n\n  public get<T>(key: string): T {\n    const stateKey = makeStateKey<T>(key);\n    return this.transferState.get<T>(stateKey, <any>null);\n  }\n\n  public remove<T>(key: string) {\n    const stateKey = makeStateKey<T>(key);\n    this.transferState.remove<T>(stateKey);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "transferState",
                        "type": "TransferState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "transferState",
                        "type": "TransferState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "AppErrorStateMatcher",
            "id": "class-AppErrorStateMatcher-71854ad84ee65f6fbd9ba36731a196b6",
            "file": "src/app/core/errors/error-matcher.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { FormControl, FormGroupDirective, NgForm } from '@angular/forms';\r\nimport { ErrorStateMatcher } from '@angular/material/core';\r\n\r\nexport class AppErrorStateMatcher implements ErrorStateMatcher {\r\n  isErrorState(\r\n    control: FormControl | null,\r\n    form: FormGroupDirective | NgForm | null\r\n  ): boolean {\r\n    const isSubmitted = form && form.submitted;\r\n    return !!(\r\n      control &&\r\n      control.invalid &&\r\n      (control.dirty || control.touched || isSubmitted)\r\n    );\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "isErrorState",
                    "args": [
                        {
                            "name": "control",
                            "type": "FormControl | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "form",
                            "type": "FormGroupDirective | NgForm | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "FormControl | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "form",
                            "type": "FormGroupDirective | NgForm | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ErrorStateMatcher"
            ]
        },
        {
            "name": "ScrollProps",
            "id": "class-ScrollProps-7b8860311733d97e69d5c9db209960ba",
            "file": "src/app/core/classes/scroll-props.class.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ScrollProps {\r\n  startIndex: number = 0;\r\n  step: number;\r\n  endIndex: number;\r\n\r\n  public isFinish: boolean = false;\r\n\r\n  get max() {\r\n    return this._max;\r\n  }\r\n\r\n  set max(value: number) {\r\n    this._max = value;\r\n  }\r\n  private _max = Number.MAX_SAFE_INTEGER;\r\n\r\n  constructor(step: number) {\r\n    this.step = step;\r\n    this.endIndex = step;\r\n  }\r\n\r\n  public next() {\r\n    this.startIndex += this.step;\r\n    if (this.startIndex + this.step > this.max) {\r\n      this.endIndex = this.max;\r\n    } else {\r\n      this.endIndex = this.startIndex + this.step;\r\n    }\r\n\r\n    this.isFinish = this.startIndex > this.max;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "step",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "step",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_max",
                    "defaultValue": "Number.MAX_SAFE_INTEGER",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "endIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "isFinish",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "startIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "step",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [
                {
                    "name": "next",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "max": {
                    "name": "max",
                    "setSignature": {
                        "name": "max",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 12,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "max",
                        "type": "",
                        "returnType": "",
                        "line": 8
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "IfDesktopDirective",
            "id": "directive-IfDesktopDirective-57ab6e314874efb304297107937ca0ec",
            "file": "src/app/shared/directives/if-desktop.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  AfterContentInit,\r\n  Directive,\r\n  ElementRef,\r\n  Renderer2,\r\n} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[ifDesktop]',\r\n})\r\nexport class IfDesktopDirective implements AfterContentInit {\r\n  constructor(private elementRef: ElementRef, private renderer: Renderer2) {}\r\n\r\n  ngAfterContentInit(): void {\r\n    this.renderer.addClass(this.elementRef.nativeElement, 'if-desktop');\r\n  }\r\n}\r\n",
            "selector": "[ifDesktop]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "AfterContentInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "IfMobileDirective",
            "id": "directive-IfMobileDirective-e55ca8de535deff07a1f417fd0b72a7b",
            "file": "src/app/shared/directives/if-mobile.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  AfterContentInit,\r\n  Directive,\r\n  ElementRef,\r\n  Renderer2,\r\n} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[ifMobile]',\r\n})\r\nexport class IfMobileDirective implements AfterContentInit {\r\n  constructor(private renderer: Renderer2, private elementRef: ElementRef) {}\r\n\r\n  ngAfterContentInit(): void {\r\n    this.renderer.addClass(this.elementRef.nativeElement, 'if-mobile');\r\n  }\r\n}\r\n",
            "selector": "[ifMobile]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "AfterContentInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AccountComponent",
            "id": "component-AccountComponent-0bd708757a4e6d482587e0b035568b97",
            "file": "src/app/account/account/account.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-account",
            "styleUrls": [
                "./account.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./account.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-account',\r\n  templateUrl: './account.component.html',\r\n  styleUrls: ['./account.component.scss']\r\n})\r\nexport class AccountComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./account.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-profile></app-profile>\r\n\r\n"
        },
        {
            "name": "AccountListItemComponent",
            "id": "component-AccountListItemComponent-f1dff315e4880227524f2f0eee322f6b",
            "file": "src/app/ui-lib/profile/account-list-item/account-list-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-account-list-item",
            "styleUrls": [
                "./account-list-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./account-list-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "accountData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "AccountData"
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "avatarBaseUrl",
                    "defaultValue": "environment.ipfsUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showCopyButton",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "onMouseHover",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseover'"
                        }
                    ]
                },
                {
                    "name": "onMouseLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseleave'"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "mouseleave",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29
                },
                {
                    "name": "mouseover",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostListener,\n  Input,\n  Output,\n} from '@angular/core';\nimport { environment } from '../../../../environments/environment';\nimport { MatDialog } from '@angular/material/dialog';\nimport { AccountData } from '../../../core/types/account.types';\n\n@Component({\n  selector: 'app-account-list-item',\n  templateUrl: './account-list-item.component.html',\n  styleUrls: ['./account-list-item.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AccountListItemComponent {\n  @Input() accountData: AccountData;\n  @Output() onClick = new EventEmitter();\n  showCopyButton = false;\n  avatarBaseUrl = environment.ipfsUrl;\n\n  @HostListener('mouseover') onMouseHover() {\n    this.showCopyButton = true;\n  }\n\n  @HostListener('mouseleave') onMouseLeave() {\n    this.showCopyButton = false;\n  }\n\n  constructor(public dialogRef: MatDialog) {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n\r\n   &:hover {\r\n     cursor: pointer;\r\n     background-color: var(--hover-color-light);\r\n   }\r\n}\r\n\r\n",
                    "styleUrl": "./account-list-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<ng-container *ngIf=\"accountData\">\n\n  <app-row [h]=\"'space-between'\"\n           [v]=\"'center'\" (click)=\"onClick.emit()\"\n           mat-ripple\n           [style.height]=\"'65px'\"\n  ><app-row>\n\n      <app-avatar [src]=\"accountData.avatar\"\n                  [jdentityValue]=\"accountData.id\"\n                  [style.margin-right]=\"'16px'\"\n      ></app-avatar>\n\n      <app-column>\n\n        <app-title [text]=\"accountData.name || (accountData.id | addressHidden)\"\n                   type=\"small\"\n        ></app-title>\n\n        <app-address [address]=\"accountData.id\"\n                     [showCopyButton]=\"showCopyButton\"\n        ></app-address>\n\n      </app-column>\n\n    </app-row>\n\n    <app-tokens [tokens]=\"accountData.balance\"\n                [style.margin-right]=\"'5px'\"\n    ></app-tokens>\n\n  </app-row>\n\n</ng-container>\n"
        },
        {
            "name": "AccountSidenavComponent",
            "id": "component-AccountSidenavComponent-889114f73ad495ef0a4230d93f61d1f7",
            "file": "src/app/shared/modal-dialogs/account-sidenav/account-sidenav.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-account-sidenav",
            "styleUrls": [
                "./account-sidenav.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./account-sidenav.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "accounts",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccountData[]",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "accountService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccountService",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "deviceService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DeviceService",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "myProfileData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProfileComponentData",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "myProfileData$",
                    "defaultValue": "this.store.select(selectMyAccountProfileData)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "sideNav",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSidenav",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatSidenav"
                        }
                    ]
                },
                {
                    "name": "sideNavService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SideNavService",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "unsubscribe$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getAccountsData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getMyProfile",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChangeAccount",
                    "args": [
                        {
                            "name": "account",
                            "type": "AccountData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "account",
                            "type": "AccountData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  OnDestroy,\r\n  OnInit,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { SideNavService } from '../../services/side-nav.service';\r\nimport { MatSidenav } from '@angular/material/sidenav';\r\nimport { DeviceService } from '../../services/device.service';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from '../../../state/state';\r\nimport { selectMyAccountProfileData } from '../../../state/profile/profile.selectors';\r\nimport { ProfileComponentData } from '../../../core/types/profile-component-data.type';\r\nimport { AccountService } from '../../services/account.service';\r\nimport { StorageService } from '../../services/storage.service';\r\nimport { AccountData } from '../../../core/types/account.types';\r\nimport { Subject } from 'rxjs';\r\nimport { filter, map, mergeMap, takeUntil } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-account-sidenav',\r\n  templateUrl: './account-sidenav.component.html',\r\n  styleUrls: ['./account-sidenav.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AccountSidenavComponent\r\n  implements OnInit, AfterViewInit, OnDestroy\r\n{\r\n  @ViewChild(MatSidenav) sideNav: MatSidenav;\r\n\r\n  accounts: AccountData[] = [];\r\n  myProfileData: ProfileComponentData;\r\n\r\n  private myProfileData$ = this.store.select(selectMyAccountProfileData);\r\n  private unsubscribe$: Subject<void> = new Subject();\r\n\r\n  constructor(\r\n    public accountService: AccountService,\r\n    public sideNavService: SideNavService,\r\n    public deviceService: DeviceService,\r\n    private store: Store<AppState>,\r\n    private storage: StorageService,\r\n    private cd: ChangeDetectorRef\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.getMyProfile();\r\n    this.getAccountsData();\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.sideNavService.isShowAccountSideNav$.subscribe((isShow) => {\r\n      isShow ? this.sideNav.open() : this.sideNav.close();\r\n      this.cd.markForCheck();\r\n    });\r\n  }\r\n\r\n  signOut() {\r\n    this.storage.removeAccountId();\r\n    this.accountService.signOut();\r\n    this.sideNavService.closeAccountSideNav();\r\n  }\r\n\r\n  async onChangeAccount(account: AccountData) {\r\n    const currentAccount = this.accounts.find(\r\n      (accountData) => accountData.id === account.id\r\n    );\r\n\r\n    if (currentAccount) {\r\n      await this.accountService.setCurrentAccount(currentAccount);\r\n    }\r\n  }\r\n\r\n  private getMyProfile() {\r\n    this.myProfileData$\r\n      .pipe(\r\n        filter((profile) => !!profile),\r\n        takeUntil(this.unsubscribe$)\r\n      )\r\n      .subscribe((myProfile) => {\r\n        this.myProfileData = myProfile!;\r\n        this.cd.markForCheck();\r\n      });\r\n  }\r\n\r\n  private getAccountsData() {\r\n    this.accountService\r\n      .getAccountsData()\r\n      .pipe(\r\n        mergeMap((accountData) =>\r\n          this.myProfileData$.pipe(\r\n            filter((myProfile) => !!myProfile),\r\n            map((myProfile) => {\r\n              return { accounts: accountData, profile: myProfile };\r\n            })\r\n          )\r\n        ),\r\n        takeUntil(this.unsubscribe$)\r\n      )\r\n      .subscribe((accountWithProfile) => {\r\n        this.accounts = accountWithProfile.accounts.filter(\r\n          (data) => data.id !== accountWithProfile.profile!.address\r\n        );\r\n      });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe$?.next();\r\n    this.unsubscribe$?.complete();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".side-wp {\r\n  position: relative;\r\n  width: 393px;\r\n\r\n  .close-btn {\r\n    position: absolute;\r\n    right: 0;\r\n    top: 13px;\r\n  }\r\n}\r\n\r\napp-scroll {\r\n  height: calc(100vh - 380px);\r\n}\r\n\r\n@media only screen and (max-width: 768px) {\r\n  .side-wp {\r\n    width: auto;\r\n  }\r\n}\r\n\r\n\r\n",
                    "styleUrl": "./account-sidenav.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sideNavService",
                        "type": "SideNavService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "deviceService",
                        "type": "DeviceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "storage",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sideNavService",
                        "type": "SideNavService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "deviceService",
                        "type": "DeviceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storage",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnDestroy"
            ],
            "templateData": "<mat-sidenav-container>\r\n\r\n  <mat-sidenav\r\n    [mode]=\"'over'\"\r\n    [fixedInViewport]=\"true\"\r\n    fixedBottomGap=\"{{ (deviceService.isMobile$ | async) ? 50 : 0}}\"\r\n    fixedTopGap=\"{{ (deviceService.isMobile$ | async) ? 50 : 0}}\"\r\n    position=\"end\">\r\n\r\n    <app-column [margin]=\"'0 16px'\" class=\"side-wp\" *ngIf=\"myProfileData\">\r\n\r\n      <app-column [margin]=\"'16px 0 19px'\" [v]=\"'start'\">\r\n\r\n        <app-close-button (onClose)=\"sideNavService.closeAccountSideNav()\"\r\n                          class=\"close-btn\"\r\n        ></app-close-button>\r\n\r\n        <app-profile-info [profileName]=\"myProfileData.name\"\r\n                          [avatarSrc]=\"myProfileData.avatar\"\r\n                          [followersCount]=\"myProfileData.followersCount\"\r\n                          [followingCount]=\"myProfileData.followingCount\"\r\n                          [address]=\"myProfileData.address\"\r\n        ></app-profile-info>\r\n\r\n        <app-row [v]=\"'center'\" [margin]=\"'18px 0 0 0'\">\r\n          <app-address [size]=\"'medium'\"\r\n                       [showIcon]=\"true\"\r\n                       [iconMargin]=\"'0 25px 0 11px'\"\r\n                       [showCopyButton]=\"true\"\r\n                       [address]=\"myProfileData.address\"\r\n          ></app-address>\r\n\r\n          <app-qr-button [style.margin-left]=\"'50px'\"\r\n                         [address]=\"myProfileData.address\"\r\n          ></app-qr-button>\r\n        </app-row>\r\n\r\n        <app-tokens [size]=\"'medium'\"\r\n                    [showIcon]=\"true\"\r\n                    [iconMargin]=\"'0 25px 0 11px'\"\r\n                    [style.margin-top]=\"'10px'\"\r\n                    [tokens]=\"accountService.balance$ | async\">\r\n        </app-tokens>\r\n      </app-column>\r\n\r\n      <mat-divider></mat-divider>\r\n\r\n      <app-sidenav-menu [profileId]=\"myProfileData.address\"></app-sidenav-menu>\r\n\r\n      <mat-divider></mat-divider>\r\n\r\n      <app-scroll>\r\n        <app-account-list-item (onClick)=\"onChangeAccount(account)\"\r\n                                 *ngFor=\"let account of accounts\"\r\n                                 [accountData]=\"account\"\r\n        ></app-account-list-item>\r\n      </app-scroll>\r\n\r\n\r\n      <mat-divider  [style.margin-bottom]=\"'16px'\"></mat-divider>\r\n\r\n      <app-sign-out-button (click)=\"signOut()\"></app-sign-out-button>\r\n\r\n     </app-column>\r\n\r\n  </mat-sidenav>\r\n\r\n</mat-sidenav-container>\r\n"
        },
        {
            "name": "ActionPanelComponent",
            "id": "component-ActionPanelComponent-3b28725f3b7152e94cca689d40728277",
            "file": "src/app/ui-lib/action-panel/action-panel.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-action-panel",
            "styleUrls": [
                "./action-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./action-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "commentCount",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "number"
                },
                {
                    "name": "downvoteCount",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "number"
                },
                {
                    "name": "isDownvoteActive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean | undefined"
                },
                {
                    "name": "isShowComment",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean"
                },
                {
                    "name": "isShowLabel",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "boolean"
                },
                {
                    "name": "isShowReply",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "boolean"
                },
                {
                    "name": "isShowShare",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean"
                },
                {
                    "name": "isUpvoteActive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean | undefined"
                },
                {
                    "name": "position",
                    "defaultValue": "'center'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "\"center\" | \"left\""
                },
                {
                    "name": "upvoteCount",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "commentClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter"
                },
                {
                    "name": "replyClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-action-panel',\r\n  templateUrl: './action-panel.component.html',\r\n  styleUrls: ['./action-panel.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ActionPanelComponent implements OnInit {\r\n  @Input() isShowShare = false;\r\n  @Input() isShowComment = false;\r\n  @Input() upvoteCount: number = 0;\r\n  @Input() downvoteCount: number = 0;\r\n  @Input() commentCount: number = 0;\r\n  @Input() isUpvoteActive: boolean | undefined = false;\r\n  @Input() isDownvoteActive: boolean | undefined = false;\r\n  @Input() isShowLabel = false;\r\n  @Input() isShowReply = false;\r\n  @Input() position: 'center' | 'left' = 'center';\r\n  @Output() replyClick = new EventEmitter();\r\n  @Output() commentClick = new EventEmitter();\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".center {\r\n  display: flex;\r\n  padding: 0 60px;\r\n\r\n  &>*{\r\n    flex: 1;\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n}\r\n\r\n.left {\r\n  display: flex;\r\n  padding: 3px 0;\r\n  margin-left: 12px;\r\n  width: 342px;\r\n\r\n  &>*{\r\n    display: flex;\r\n    justify-content: center;\r\n    padding-right: 12px;\r\n  }\r\n}\r\n\r\n@media only screen and (max-width: 768px) {\r\n  .center {\r\n    display: flex;\r\n    padding: 3px 0;\r\n  }\r\n}\r\n",
                    "styleUrl": "./action-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 28
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [ngClass]=\"position\">\r\n  <app-upvote-button [isActive]=\"!!isUpvoteActive\"\r\n                     [isShowLabel]=\"isShowLabel\"\r\n                     [count]=\"upvoteCount\"\r\n  ></app-upvote-button>\r\n\r\n  <app-downvote-button [isActive]=\"!!isDownvoteActive\"\r\n                       [count]=\"downvoteCount\"\r\n                       [isShowLabel]=\"isShowLabel\"\r\n  ></app-downvote-button>\r\n\r\n  <app-comment-button *ngIf=\"isShowComment\"\r\n                      [isShowLabel]=\"isShowLabel\"\r\n                      [count]=\"commentCount\"\r\n                      (onClick)=\"commentClick.emit()\"\r\n  ></app-comment-button>\r\n\r\n  <app-shared-button *ngIf=\"isShowShare\"\r\n                     [isShowLabel]=\"isShowLabel\"\r\n  ></app-shared-button>\r\n\r\n  <app-reply-button *ngIf=\"isShowReply\"\r\n                    (click)=\"replyClick.emit()\"\r\n                    [isShowLabel]=\"isShowLabel\"\r\n  ></app-reply-button>\r\n</div>\r\n"
        },
        {
            "name": "AddressComponent",
            "id": "component-AddressComponent-54f38dc2a5cf658973bec576a66880af",
            "file": "src/app/ui-lib/address/address.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-address",
            "styleUrls": [
                "./address.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./address.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "address",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string"
                },
                {
                    "name": "addressLength",
                    "defaultValue": "12",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "number"
                },
                {
                    "name": "iconMargin",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string"
                },
                {
                    "name": "showCopyButton",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean"
                },
                {
                    "name": "showIcon",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "boolean"
                },
                {
                    "name": "size",
                    "defaultValue": "'small'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "\"small\" | \"medium\""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onCopy",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\n\r\n@Component({\r\n  selector: 'app-address',\r\n  templateUrl: './address.component.html',\r\n  styleUrls: ['./address.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AddressComponent {\r\n  @Input() address = '';\r\n  @Input() iconMargin = '';\r\n  @Input() showIcon = false;\r\n  @Input() addressLength = 12;\r\n  @Input() showCopyButton = false;\r\n  @Input() size: 'small' | 'medium' = 'small';\r\n\r\n  constructor(private _snackBar: MatSnackBar) {}\r\n\r\n  onCopy(event: any) {\r\n    event.stopPropagation();\r\n    this._snackBar.open('Address copied!', 'Ok', {\r\n      horizontalPosition: 'start',\r\n      verticalPosition: 'bottom',\r\n      duration: 1000,\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n  width: fit-content;\r\n}\r\n\r\nmat-icon {\r\n  margin-right: 6px;\r\n  width: 20px;\r\n}\r\n\r\n.address-text {\r\n  line-height: 20px;\r\n  letter-spacing: 0.25px;\r\n}\r\n\r\n.small {\r\n  font-size: 14px;\r\n  color: rgba(0, 0, 0, 0.38);\r\n}\r\n\r\n.medium {\r\n  font-size: 17px;\r\n}\r\n\r\n.large {\r\n  font-weight: 500;\r\n  font-size: 20px;\r\n}\r\n\r\n.copy-button {\r\n  position: absolute;\r\n  animation: fadeInFromNone 0.5s ease-out;\r\n}\r\n\r\n.small-button {\r\n  top: -6px;\r\n  right: -35px;\r\n}\r\n\r\n.medium-button {\r\n  top: -2px;\r\n  right: -43px;\r\n}\r\n\r\n.show-button {\r\n  display: block;\r\n}\r\n\r\n",
                    "styleUrl": "./address.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "_snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<mat-icon  *ngIf=\"showIcon\"\r\n           [style.margin]=\"iconMargin\"\r\n           svgIcon=\"purse-icon\"\r\n></mat-icon>\r\n\r\n<span\r\n  class=\"address-text\"\r\n  [ngClass]=\"size\">\r\n  {{address | addressHidden: addressLength}}\r\n</span>\r\n\r\n<app-icon-button *ngIf=\"showCopyButton\"\r\n                 (click)=\"onCopy($event)\"\r\n                 [iconName]=\"'copy-icon'\"\r\n                 [cdkCopyToClipboard]=\"address\"\r\n                 [ngClass]=\"['copy-button', size + '-button']\"\r\n></app-icon-button>\r\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-43dd32a9ee4586dcbd63f7e34a4c1c96",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  HostListener,\r\n  Inject,\r\n  OnInit,\r\n  PLATFORM_ID,\r\n} from '@angular/core';\r\nimport { DeviceService } from './shared/services/device.service';\r\nimport { isPlatformBrowser } from '@angular/common';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { SubsocialApiService } from './shared/services/subsocial-api.service';\r\nimport { AppState } from './state/state';\r\nimport { Store } from '@ngrx/store';\r\nimport { SpaceService } from './space/services/space.service';\r\nimport { AccountService } from './shared/services/account.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent implements OnInit {\r\n  constructor(\r\n    private deviceService: DeviceService,\r\n    private route: ActivatedRoute,\r\n    private store: Store<AppState>,\r\n    private api: SubsocialApiService,\r\n    private spaceService: SpaceService,\r\n    private accountService: AccountService,\r\n    @Inject(PLATFORM_ID) private platformId: Object\r\n  ) {}\r\n\r\n  async ngOnInit(): Promise<void> {\r\n    if (isPlatformBrowser(this.platformId)) {\r\n      this.deviceService.init();\r\n      await this.accountService.initAccount();\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "deviceService",
                        "type": "DeviceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "api",
                        "type": "SubsocialApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "spaceService",
                        "type": "SpaceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "deviceService",
                        "type": "DeviceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "api",
                        "type": "SubsocialApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "spaceService",
                        "type": "SpaceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-header ></app-header>\r\n<app-account-sidenav></app-account-sidenav>\r\n\r\n<div class=\"container\">\r\n  <router-outlet></router-outlet>\r\n</div>\r\n"
        },
        {
            "name": "AvatarComponent",
            "id": "component-AvatarComponent-d30a18020385a03ca68baf9115cbb584",
            "file": "src/app/ui-lib/avatar/avatar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-avatar",
            "styleUrls": [
                "./avatar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./avatar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "jdentityValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string"
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string | undefined"
                },
                {
                    "name": "size",
                    "defaultValue": "40",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "number"
                },
                {
                    "name": "src",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": ""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "showJdentity",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "url",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "onImgError",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Inject,\r\n  Input,\r\n  PLATFORM_ID,\r\n} from '@angular/core';\r\nimport { environment } from '../../../environments/environment';\r\nimport { isPlatformBrowser } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-avatar',\r\n  templateUrl: './avatar.component.html',\r\n  styleUrls: ['./avatar.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AvatarComponent {\r\n  @Input() size = 40;\r\n  @Input() jdentityValue = '';\r\n  @Input() name: string | undefined;\r\n  @Input() set src(value: string | undefined) {\r\n    this.showJdentity = !value && isPlatformBrowser(this.platformId);\r\n    this.url = environment.ipfsUrl + value;\r\n  }\r\n\r\n  url = '';\r\n  showJdentity = false;\r\n\r\n  constructor(@Inject(PLATFORM_ID) private platformId: Object) {}\r\n\r\n  onImgError($event: any) {\r\n    this.showJdentity = isPlatformBrowser(this.platformId);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "img {\r\n  border-radius: 50%;\r\n}\r\n\r\ndiv {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border: 1px solid #ddd;\r\n  border-radius: 50%;\r\n  overflow: hidden;\r\n}\r\n",
                    "styleUrl": "./avatar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "src": {
                    "name": "src",
                    "setSignature": {
                        "name": "src",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string | undefined",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 21,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string | undefined",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<img *ngIf=\"!showJdentity\"\r\n     width=\"{{size}}\"\r\n     height=\"{{size}}\"\r\n     (error)=\"onImgError($event)\"\r\n     src=\"{{url}}\"\r\n>\r\n\r\n<div *ngIf=\"showJdentity\" [style.width]=\"size + 'px'\" [style.height]=\"size + 'px'\" >\r\n\r\n  <svg width=\"{{size}}\"\r\n       height=\"{{size}}\"\r\n       [data-jdenticon-value]=\"jdentityValue\"\r\n  ></svg>\r\n\r\n</div>\r\n\r\n"
        },
        {
            "name": "BaseControlValueAccessorComponent",
            "id": "component-BaseControlValueAccessorComponent-daf49e9f64c74f2a496333cf00fc1abb",
            "file": "src/app/core/base-component/base-value-accessor.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "errorTexts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "KeyValuePair<string>"
                }
            ],
            "outputsClass": [
                {
                    "name": "blur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | string[]",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "onTouch",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\nimport { KeyValuePair } from '../models/key-value-pair.model';\r\n\r\n@Component({\r\n  template: '',\r\n})\r\nexport class BaseControlValueAccessorComponent implements ControlValueAccessor {\r\n  @Input() errorTexts: KeyValuePair<string>;\r\n  @Output() blur = new EventEmitter();\r\n\r\n  onChange: any = () => {};\r\n  onTouch: any = () => {};\r\n  protected _value: string | string[] = '';\r\n\r\n  set value(val: string | string[]) {\r\n    this._value = val;\r\n    this.onChange(this._value);\r\n    this.onTouch(this._value);\r\n  }\r\n\r\n  get value(): string | string[] {\r\n    return this._value;\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onTouch = fn;\r\n  }\r\n\r\n  writeValue(obj: any): void {\r\n    console.log(obj);\r\n    this._value = obj;\r\n  }\r\n\r\n  onBlur() {\r\n    this.onTouch();\r\n    this.blur.emit();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 24
            },
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "string | string[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 16,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "string | string[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "string | []",
                        "line": 22
                    }
                }
            }
        },
        {
            "name": "BaseInfinityScrollComponent",
            "id": "component-BaseInfinityScrollComponent-4c2d508afb9b5e572bbc351b12904c4a",
            "file": "src/app/core/base-component/base-infinity-scroll.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ids",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string[] | null"
                },
                {
                    "name": "type",
                    "defaultValue": "'public'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "\"public\" | \"all\""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "action$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Actions",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "cd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isBlockInfinityScroll",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isLoading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "listData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<T>",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "listDataIds",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "scrollDistance",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "scrollDownEvent$",
                    "defaultValue": "this.scrollDownEventSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "scrollDownEventSource",
                    "defaultValue": "new BehaviorSubject<ScrollProps>(\r\n    this.scrollProps\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "scrollProps",
                    "defaultValue": "new ScrollProps(20)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "store",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Store<AppState>",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "unsubscribe$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addUniqueDataToListDataArray",
                    "args": [
                        {
                            "name": "itemDictionary",
                            "type": "KeyValuePair<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "itemDictionary",
                            "type": "KeyValuePair<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getScrollableData",
                    "args": [
                        {
                            "name": "dispatchAction",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selector",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selectAction",
                            "type": "ActionCreator",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dispatchAction",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selector",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selectAction",
                            "type": "ActionCreator",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadFinish",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "loadStart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onScrollDown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "scrollEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sliceIds",
                    "args": [
                        {
                            "name": "arr",
                            "type": "Array<string>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "props",
                            "type": "ScrollProps",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "arr",
                            "type": "Array<string>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "props",
                            "type": "ScrollProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackById",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Input,\r\n  OnDestroy,\r\n} from '@angular/core';\r\nimport { ScrollProps } from '../classes/scroll-props.class';\r\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\r\nimport { HasId } from '@subsocial/api/flat-subsocial/flatteners';\r\nimport { AppState } from '../../state/state';\r\nimport { ActionCreator, Store } from '@ngrx/store';\r\nimport { KeyValuePair } from '../models/key-value-pair.model';\r\nimport {\r\n  delay,\r\n  filter,\r\n  map,\r\n  mergeMap,\r\n  take,\r\n  takeUntil,\r\n  tap,\r\n  withLatestFrom,\r\n} from 'rxjs/operators';\r\nimport { Actions, ofType } from '@ngrx/effects';\r\n\r\n@Component({\r\n  template: '',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class BaseInfinityScrollComponent<T extends HasId> implements OnDestroy {\r\n  @Input() ids: string[] | null;\r\n  @Input() type: 'public' | 'all' = 'public';\r\n  public listData: Array<T> = [];\r\n  public listDataIds: Array<string> = [];\r\n  public scrollDistance = 1;\r\n  public scrollProps = new ScrollProps(20);\r\n  public isBlockInfinityScroll = false;\r\n\r\n  private scrollDownEventSource = new BehaviorSubject<ScrollProps>(\r\n    this.scrollProps\r\n  );\r\n  public scrollDownEvent$ = this.scrollDownEventSource.asObservable();\r\n\r\n  public isLoading: boolean;\r\n\r\n  private unsubscribe$: Subject<void> = new Subject();\r\n\r\n  constructor(\r\n    public store: Store<AppState>,\r\n    public cd: ChangeDetectorRef,\r\n    public action$: Actions\r\n  ) {}\r\n\r\n  onScrollDown() {\r\n    this.scrollEvent();\r\n  }\r\n\r\n  scrollEvent() {\r\n    if (!this.isBlockInfinityScroll) {\r\n      this.scrollProps.next();\r\n      this.scrollDownEventSource.next(this.scrollProps);\r\n    }\r\n  }\r\n\r\n  getScrollableData(\r\n    dispatchAction: Function,\r\n    selector: Function,\r\n    selectAction: ActionCreator\r\n  ) {\r\n    if (!this.ids) {\r\n      return;\r\n    }\r\n\r\n    this.scrollProps.max = this.ids.length;\r\n    const loadData$ = this.scrollDownEvent$.pipe(\r\n      filter((props) => !props.isFinish),\r\n      tap((_) => this.loadStart()),\r\n      map((props) => this.sliceIds(this.ids!, props)),\r\n      tap((ids) =>\r\n        this.store.dispatch(\r\n          dispatchAction({ payload: { ids, type: this.type } })\r\n        )\r\n      )\r\n    );\r\n\r\n    this.action$\r\n      .pipe(\r\n        ofType(selectAction),\r\n        withLatestFrom(loadData$),\r\n        mergeMap(([, ids]) =>\r\n          this.store.select(selector(ids)).pipe(take(1), delay(500))\r\n        ),\r\n        takeUntil(this.unsubscribe$)\r\n      )\r\n      .subscribe((items) => this.addUniqueDataToListDataArray(items));\r\n  }\r\n\r\n  addUniqueDataToListDataArray(itemDictionary: KeyValuePair<T>) {\r\n    const newListDataIds: string[] = [];\r\n    for (let id in itemDictionary) {\r\n      if (\r\n        itemDictionary.hasOwnProperty(id) &&\r\n        !this.listDataIds?.includes(id)\r\n      ) {\r\n        newListDataIds.push(id);\r\n      }\r\n    }\r\n    const newItems = newListDataIds\r\n      .sort((a, b) => Number.parseInt(b) - Number.parseInt(a))\r\n      .map((id) => itemDictionary[id])\r\n      .filter((post) => post !== undefined);\r\n    this.listData.push(...newItems);\r\n    this.listDataIds.push(...newListDataIds);\r\n    this.loadFinish();\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  private sliceIds(arr: Array<string>, props: ScrollProps): string[] {\r\n    return arr.slice(props.startIndex, props.endIndex).map((e) => e.toString());\r\n  }\r\n\r\n  trackById(index: number, item: T) {\r\n    return item.id;\r\n  }\r\n\r\n  private loadStart() {\r\n    this.isLoading = true;\r\n    this.isBlockInfinityScroll = true;\r\n  }\r\n\r\n  private loadFinish() {\r\n    this.isLoading = false;\r\n    this.isBlockInfinityScroll = false;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe$?.next();\r\n    this.unsubscribe$?.complete();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 46,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnDestroy"
            ]
        },
        {
            "name": "BoxComponent",
            "id": "component-BoxComponent-f7464438e3ade474bedc36a8165543fd",
            "file": "src/app/core/base-component/box.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "h",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": ""
                },
                {
                    "name": "margin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string"
                },
                {
                    "name": "padding",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string"
                },
                {
                    "name": "v",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": ""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_margin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.margin'"
                        }
                    ]
                },
                {
                    "name": "_padding",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.padding'"
                        }
                    ]
                },
                {
                    "name": "alignItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.align-items'"
                        }
                    ]
                },
                {
                    "name": "flex",
                    "defaultValue": "'flex'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.display'"
                        }
                    ]
                },
                {
                    "name": "justifyContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.justify-content'"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "style.align-items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string | undefined"
                },
                {
                    "name": "style.display",
                    "defaultValue": "'flex'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "string"
                },
                {
                    "name": "style.justify-content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string | undefined"
                },
                {
                    "name": "style.margin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "string | undefined"
                },
                {
                    "name": "style.padding",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "string | undefined"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  HostBinding,\r\n  Input,\r\n  OnInit,\r\n} from '@angular/core';\r\n\r\ntype AlignType = 'start' | 'end' | 'center' | 'normal' | 'space-between';\r\n\r\n@Component({\r\n  template: '',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class BoxComponent {\r\n  @Input() set v(value: AlignType) {\r\n    this.alignItem = value;\r\n  }\r\n\r\n  @Input() set h(value: AlignType) {\r\n    this.justifyContent = value;\r\n  }\r\n\r\n  @Input() set margin(value: string) {\r\n    this._margin = value;\r\n  }\r\n\r\n  @Input() set padding(value: string) {\r\n    this._padding = value;\r\n  }\r\n\r\n  @HostBinding('style.align-items') alignItem: string | undefined;\r\n  @HostBinding('style.justify-content') justifyContent: string | undefined;\r\n  @HostBinding('style.margin') _margin: string | undefined;\r\n  @HostBinding('style.padding') _padding: string | undefined;\r\n  @HostBinding('style.display') flex = 'flex';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "v": {
                    "name": "v",
                    "setSignature": {
                        "name": "v",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "AlignType",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 16,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "AlignType",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "h": {
                    "name": "h",
                    "setSignature": {
                        "name": "h",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "AlignType",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 20,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "AlignType",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "margin": {
                    "name": "margin",
                    "setSignature": {
                        "name": "margin",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 24,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "padding": {
                    "name": "padding",
                    "setSignature": {
                        "name": "padding",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 28,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "CloseButtonComponent",
            "id": "component-CloseButtonComponent-931231c36fe1ca6d2d1b4bf5033a28d3",
            "file": "src/app/ui-lib/buttons/close-button/close-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-close-button",
            "styleUrls": [
                "./close-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./close-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "onClose",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnInit, Output } from '@angular/core';\n\n@Component({\n  selector: 'app-close-button',\n  templateUrl: './close-button.component.html',\n  styleUrls: ['./close-button.component.scss'],\n})\nexport class CloseButtonComponent implements OnInit {\n  @Output() onClose = new EventEmitter();\n\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./close-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-icon-button [iconName]=\"'close-icon'\"\n                 (click)=\"onClose.emit()\"\n></app-icon-button>\n"
        },
        {
            "name": "ColumnComponent",
            "id": "component-ColumnComponent-eb675896e5c76a21cfc43c3f3d3abbc4",
            "file": "src/app/ui-lib/containers/column/column.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-column",
            "styleUrls": [
                "./column.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./column.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "h",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "",
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                },
                {
                    "name": "margin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                },
                {
                    "name": "padding",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                },
                {
                    "name": "v",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "",
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_margin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.margin'"
                        }
                    ],
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                },
                {
                    "name": "_padding",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.padding'"
                        }
                    ],
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                },
                {
                    "name": "alignItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.align-items'"
                        }
                    ],
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                },
                {
                    "name": "flex",
                    "defaultValue": "'flex'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.display'"
                        }
                    ],
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                },
                {
                    "name": "justifyContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.justify-content'"
                        }
                    ],
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "style.align-items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string | undefined",
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                },
                {
                    "name": "style.display",
                    "defaultValue": "'flex'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "string",
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                },
                {
                    "name": "style.justify-content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string | undefined",
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                },
                {
                    "name": "style.margin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "string | undefined",
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                },
                {
                    "name": "style.padding",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "string | undefined",
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { BoxComponent } from '../../../core/base-component/box.component';\n\n@Component({\n  selector: 'app-column',\n  templateUrl: './column.component.html',\n  styleUrls: ['./column.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ColumnComponent extends BoxComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n",
                    "styleUrl": "./column.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "BoxComponent",
            "templateData": "<ng-content></ng-content>\n"
        },
        {
            "name": "CommentButtonComponent",
            "id": "component-CommentButtonComponent-817bd46cd46bcf89ac31c5713fea965a",
            "file": "src/app/ui-lib/buttons/comment-button/comment-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-comment-button",
            "styleUrls": [
                "./comment-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./comment-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "number"
                },
                {
                    "name": "isShowLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-comment-button',\r\n  templateUrl: './comment-button.component.html',\r\n  styleUrls: ['./comment-button.component.scss'],\r\n})\r\nexport class CommentButtonComponent implements OnInit {\r\n  @Output() onClick = new EventEmitter();\r\n  @Input() isShowLabel: boolean;\r\n  @Input() count: number;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n",
                    "styleUrl": "./comment-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-icon-button [buttonSize]=\"32\"\r\n                 [iconSize]=\"22\"\r\n                 [iconName]=\"'comment-icon'\"\r\n                 (click)=\"onClick.emit()\"\r\n></app-icon-button>\r\n\r\n<span [ngClass]=\"['action-panel-label']\"\r\n      *ngIf=\"!isShowLabel && count > 0\"\r\n>{{ count }}</span>\r\n"
        },
        {
            "name": "CommentInputComponent",
            "id": "component-CommentInputComponent-b7b73bd587e00dd2b09f7c5da24ef120",
            "file": "src/app/ui-lib/comment/comment-input/comment-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => CommentInputComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-comment-input",
            "styleUrls": [
                "./comment-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./comment-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autofocus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "boolean"
                },
                {
                    "name": "isReply",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "boolean"
                },
                {
                    "name": "errorTexts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "KeyValuePair<string>",
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "blur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "avatarUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "disabledButton",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'textarea'"
                        }
                    ]
                },
                {
                    "name": "isShowPlaceholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "showSendButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "unsubscribe$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | string[]",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "onTouch",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFocusOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onInputChange",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  AfterViewInit,\r\n  Component,\r\n  ElementRef,\r\n  forwardRef,\r\n  Input,\r\n  OnInit,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { BaseControlValueAccessorComponent } from '../../../core/base-component/base-value-accessor';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { environment } from '../../../../environments/environment';\r\nimport { AccountService } from '../../../shared/services/account.service';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-comment-input',\r\n  templateUrl: './comment-input.component.html',\r\n  styleUrls: ['./comment-input.component.scss'],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => CommentInputComponent),\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class CommentInputComponent\r\n  extends BaseControlValueAccessorComponent\r\n  implements OnInit, AfterViewInit\r\n{\r\n  @Input() autofocus: boolean;\r\n  @Input() isReply: boolean;\r\n  @ViewChild('textarea') input: ElementRef;\r\n\r\n  isShowPlaceholder: boolean;\r\n  showSendButton: boolean;\r\n  disabledButton: boolean = true;\r\n  avatarUrl: string | undefined;\r\n\r\n  private unsubscribe$: Subject<void> = new Subject();\r\n\r\n  constructor(private accountService: AccountService) {\r\n    super();\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    if (this.autofocus) {\r\n      this.focus();\r\n      this.isShowPlaceholder = false;\r\n    }\r\n  }\r\n\r\n  focus() {\r\n    this.input.nativeElement.focus();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (!this.autofocus) {\r\n      this.isShowPlaceholder = true;\r\n    } else {\r\n      this.showSendButton = true;\r\n    }\r\n\r\n    this.accountService.currentAccount$\r\n      .pipe(takeUntil(this.unsubscribe$))\r\n      .subscribe((account) => (this.avatarUrl = account?.avatar));\r\n  }\r\n\r\n  onFocus() {\r\n    this.isShowPlaceholder = false;\r\n    this.showSendButton = true;\r\n  }\r\n\r\n  onFocusOut() {\r\n    if (!this._value) {\r\n      this.isShowPlaceholder = true;\r\n      this.showSendButton = false;\r\n    }\r\n  }\r\n\r\n  onInputChange($event: any) {\r\n    this._value = $event.target?.innerText.trim();\r\n    this.disabledButton = !this._value;\r\n    this.onChange(this._value);\r\n    this.onTouch(this._value);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    //check for storybook\r\n    if (typeof this.unsubscribe$ !== 'string') {\r\n      this.unsubscribe$?.next();\r\n      this.unsubscribe$?.complete();\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".comment-input-wp {\r\n  display: flex;\r\n  align-items: flex-start;\r\n}\r\n\r\n.input-wp {\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-left: 9px;\r\n  width: 100%;\r\n\r\n  .text-area-wp {\r\n    position: relative;\r\n\r\n    .text-area-input {\r\n      border: 1px solid #DADADA;\r\n      border-radius: 3.5px;\r\n      padding: 7px 16px;\r\n      word-break: break-all;\r\n\r\n      &:hover, &:focus {\r\n        border: 1px solid #EB2F96;\r\n      }\r\n    }\r\n\r\n    .placeholder {\r\n      position: absolute;\r\n      top: 6px;\r\n      left: 16px;\r\n      font-size: 16px;\r\n      line-height: 24px;\r\n      letter-spacing: 0.25px;\r\n      color: rgba(0, 0, 0, 0.6);\r\n      pointer-events: none;\r\n    }\r\n  }\r\n\r\n  [contenteditable]:focus {\r\n    outline: 0px solid transparent;\r\n    border: 1px solid #bfbfbf;\r\n  }\r\n\r\n  .send-btn-wp {\r\n    margin-top: 16px;\r\n  }\r\n}\r\n",
                    "styleUrl": "./comment-input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseControlValueAccessorComponent",
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<div class=\"comment-input-wp\">\r\n  <div class=\"avatar-wp\">\r\n    <app-avatar [size]=\"36\" [src]=\"avatarUrl\"></app-avatar>\r\n  </div>\r\n\r\n  <div class=\"input-wp\">\r\n    <div class=\"text-area-wp\">\r\n      <div\r\n        #textarea\r\n        contenteditable=\"true\"\r\n        (input)=\"onInputChange($event)\"\r\n        (focus)=\"onFocus()\"\r\n        (focusout)=\"onFocusOut()\"\r\n        class=\"text-area-input\">\r\n      </div>\r\n      <span *ngIf=\"isShowPlaceholder\" class=\"placeholder\">{{ isReply? 'Add a reply' : 'Add a comment...' }}</span>\r\n    </div>\r\n    <ng-container *ngIf=\"showSendButton\">\r\n      <div class=\"send-btn-wp\">\r\n        <app-send-button [isDisabled]=\"disabledButton\"></app-send-button>\r\n      </div>\r\n    </ng-container>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "CommentMessageComponent",
            "id": "component-CommentMessageComponent-36a3e439547812eba7445d2e238c2138",
            "file": "src/app/ui-lib/comment/comment-message/comment-message.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-comment-message",
            "styleUrls": [
                "./comment-message.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./comment-message.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "commentData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "CommentItemData"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "device",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DeviceService",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "deviceService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DeviceService",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "modalConfig",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogConfig",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "reactionModalData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReactionModalData",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "showReplyInput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "unsubscribe$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onOpenReactions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onReplyClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "prepareModalConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { CommentItemData } from '../../../core/types/comment-data.type';\r\nimport { DeviceService } from '../../../shared/services/device.service';\r\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\r\nimport { ReactionModalData } from '../../../core/types/dialog-modal-data.types';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs';\r\nimport { VoteModalDialogComponent } from '../../../shared/modal-dialogs/vote-modal-dialog/vote-modal-dialog.component';\r\n\r\n@Component({\r\n  selector: 'app-comment-message',\r\n  templateUrl: './comment-message.component.html',\r\n  styleUrls: ['./comment-message.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CommentMessageComponent implements OnInit, OnDestroy {\r\n  @Input() commentData: CommentItemData;\r\n  showReplyInput: boolean;\r\n  reactionModalData: ReactionModalData;\r\n\r\n  private modalConfig: MatDialogConfig = {};\r\n  private unsubscribe$: Subject<void> = new Subject();\r\n\r\n  constructor(\r\n    public device: DeviceService,\r\n    public dialog: MatDialog,\r\n    public deviceService: DeviceService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.prepareModalConfig();\r\n  }\r\n\r\n  onReplyClick() {\r\n    this.showReplyInput = !this.showReplyInput;\r\n  }\r\n\r\n  onOpenReactions() {\r\n    this.dialog.open(VoteModalDialogComponent, this.modalConfig);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    //check for storybook\r\n    if (typeof this.unsubscribe$ !== 'string') {\r\n      this.unsubscribe$?.next();\r\n      this.unsubscribe$?.complete();\r\n    }\r\n  }\r\n\r\n  private prepareModalConfig() {\r\n    this.reactionModalData = {\r\n      postId: this.commentData.postId || '',\r\n      upvotesCount: this.commentData.upvoteCount || 0,\r\n      downvotesCount: this.commentData.downvoteCount || 0,\r\n    };\r\n\r\n    this.modalConfig.data = this.reactionModalData;\r\n\r\n    this.deviceService?.isMobile$\r\n      .pipe(takeUntil(this.unsubscribe$))\r\n      .subscribe((isMobile) => {\r\n        if (isMobile) {\r\n          this.modalConfig.width = '95%';\r\n          this.modalConfig.maxWidth = 'none';\r\n        } else {\r\n          this.modalConfig.width = '500px';\r\n          this.modalConfig.maxWidth = '80vh';\r\n        }\r\n      });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  width: 100%;\r\n  margin-top: 7px;\r\n}\r\n\r\napp-avatar {\r\n  margin-right: 8px;\r\n}\r\n\r\n.date {\r\n  color: #A0A0A0;\r\n}\r\n\r\n.dot {\r\n  padding: 0 4px 0;\r\n}\r\n\r\n.message {\r\n  background: #F2F2F2;\r\n  border-radius: 4px;\r\n}\r\n\r\n\r\n.message-wp {\r\n  width: inherit;\r\n}\r\n\r\napp-option-button {\r\n  padding-left: 7px;\r\n}\r\n\r\napp-reply-comments {\r\n  margin-left: 7px;\r\n}\r\n\r\napp-comment-input {\r\n  margin: 16px 24px;\r\n}\r\n",
                    "styleUrl": "./comment-message.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "device",
                        "type": "DeviceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "deviceService",
                        "type": "DeviceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "device",
                        "type": "DeviceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "deviceService",
                        "type": "DeviceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-avatar [size]=\"36\"\r\n            [src]=\"commentData.avatar\"\r\n            [jdentityValue]=\"commentData.ownerId\"\r\n></app-avatar>\r\n\r\n<app-column class=\"message-wp\">\r\n\r\n  <app-column class=\"message\" [padding]=\"'8px 16px 11px 16px'\">\r\n\r\n    <app-row [v]=\"'center'\">\r\n\r\n      <app-title [text]=\"commentData.profileName || (commentData.ownerId | addressHidden)\"\r\n                 [link]=\"'/accounts/' + commentData.ownerId\"\r\n                 type=\"small\"\r\n      ></app-title>\r\n\r\n      <span class=\"dot\">·</span>\r\n\r\n      <span class=\"date\">{{commentData.createdAtTime | day}}</span>\r\n\r\n      <app-option-button type=\"comment\"\r\n                         (onClickViewReaction)=\"onOpenReactions()\"\r\n      ></app-option-button>\r\n\r\n    </app-row>\r\n\r\n    <app-paragraph [text]=\"commentData.commentText\"></app-paragraph>\r\n\r\n  </app-column>\r\n\r\n  <app-action-panel [isShowLabel]=\"!(device.isMobile$ | async)\"\r\n                    [isShowReply]=\"true\"\r\n                    [isDownvoteActive]=\"commentData.downvoteActive\"\r\n                    [isUpvoteActive]=\"commentData.upvoteActive\"\r\n                    [upvoteCount]=\"commentData.upvoteCount\"\r\n                    [downvoteCount]=\"commentData.downvoteCount\"\r\n                    [position]=\"!(device.isMobile$ | async) ? 'left' : 'center'\"\r\n                    (replyClick)=\"onReplyClick()\"\r\n  >\r\n  </app-action-panel>\r\n\r\n  <ng-container *ngIf=\"showReplyInput\">\r\n    <app-comment-input [isReply]=\"showReplyInput\" [autofocus]=\"true\"></app-comment-input>\r\n  </ng-container>\r\n\r\n  <app-reply-comments *ngIf=\"commentData.replyCount > 0\"\r\n                      [replyCommentCount]=\"commentData.replyCount\"\r\n                      [rootPostId]=\"commentData.postId\"\r\n  ></app-reply-comments>\r\n</app-column>\r\n\r\n\r\n\r\n"
        },
        {
            "name": "CommentsComponent",
            "id": "component-CommentsComponent-78d314a8f1a126a696eeaa7f69f09aaf",
            "file": "src/app/ui-lib/comment/comments/comments.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-comments",
            "styleUrls": [
                "./comments.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./comments.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "commentListData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "CommentItemData[] | null"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "commentsCount",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\nimport { CommentItemData } from '../../../core/types/comment-data.type';\r\nimport { PluralizePipe } from '../../../shared/pipes/pluralize.pipe';\r\n\r\n@Component({\r\n  selector: 'app-comments',\r\n  templateUrl: './comments.component.html',\r\n  styleUrls: ['./comments.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CommentsComponent implements OnInit, OnChanges {\r\n  @Input() commentListData: CommentItemData[] | null = [];\r\n\r\n  commentsCount: string = '';\r\n\r\n  constructor(private pluralize: PluralizePipe) {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.commentListData) {\r\n      this.commentsCount = `${\r\n        this.commentListData?.length || '0'\r\n      } ${this.pluralize.transform(\r\n        this.commentListData?.length || 0,\r\n        'Comment'\r\n      )}`;\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    console.log(this.commentListData);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "app-comment-input {\r\n  display: block;\r\n  margin: 16px 0 24px;\r\n}\r\n\r\n",
                    "styleUrl": "./comments.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "pluralize",
                        "type": "PluralizePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "pluralize",
                        "type": "PluralizePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<ng-container *ngIf=\"commentListData\">\r\n  <app-title type=\"medium\" [text]=\"commentsCount\"></app-title>\r\n\r\n  <app-comment-input></app-comment-input>\r\n\r\n  <ng-container *ngFor=\"let commentItem of commentListData\">\r\n    <app-comment-message [commentData]=\"commentItem\"></app-comment-message>\r\n  </ng-container>\r\n</ng-container>\r\n\r\n<ng-container *ngIf=\"commentListData === null\">\r\n  <app-spinner [showSpinner]=\"true\"></app-spinner>\r\n</ng-container>\r\n\r\n"
        },
        {
            "name": "ConnectionsModalDialogComponent",
            "id": "component-ConnectionsModalDialogComponent-6371e68e433e3b4b84e6cbc59826bcfd",
            "file": "src/app/shared/modal-dialogs/connections-modal-dialog/connections-modal-dialog.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-connections-modal-dialog",
            "styleUrls": [
                "./connections-modal-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./connections-modal-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeTab",
                    "defaultValue": "this.tabLinks.find(\n    (tab) => tab.tabName === this.data.activeTab\n  )!",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TabLinkData",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConnectionModalData",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<ConnectionsModalDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "followersIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "followingIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "tabLinks",
                    "defaultValue": "[\n    { tabName: 'following', additionalInfo: this.data.followingCount },\n    { tabName: 'followers', additionalInfo: this.data.followerCount },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TabLinkData[]",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onTabClick",
                    "args": [
                        {
                            "name": "activeTab",
                            "type": "TabLinkData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "activeTab",
                            "type": "TabLinkData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Inject,\n  OnInit,\n} from '@angular/core';\nimport { TabLinkData } from '../../../core/models/tab-link-data.model';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { ConnectionModalData } from '../../../core/types/dialog-modal-data.types';\nimport { from, Observable } from 'rxjs';\nimport { ProfileService } from '../../../account/services/profile.service';\nimport { first } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-connections-modal-dialog',\n  templateUrl: './connections-modal-dialog.component.html',\n  styleUrls: ['./connections-modal-dialog.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ConnectionsModalDialogComponent implements OnInit {\n  public tabLinks: TabLinkData[] = [\n    { tabName: 'following', additionalInfo: this.data.followingCount },\n    { tabName: 'followers', additionalInfo: this.data.followerCount },\n  ];\n\n  activeTab: TabLinkData = this.tabLinks.find(\n    (tab) => tab.tabName === this.data.activeTab\n  )!;\n\n  followersIds: string[];\n  followingIds: string[];\n\n  constructor(\n    private cd: ChangeDetectorRef,\n    private profileService: ProfileService,\n    public dialogRef: MatDialogRef<ConnectionsModalDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: ConnectionModalData\n  ) {}\n\n  ngOnInit(): void {\n    from(this.profileService.getFollowersIds(this.data.address))\n      .pipe(first())\n      .subscribe((ids) => {\n        this.followersIds = ids;\n        this.cd.markForCheck();\n      });\n    from(this.profileService.getFollowingIds(this.data.address))\n      .pipe(first())\n      .subscribe((ids) => {\n        this.followingIds = ids;\n        this.cd.markForCheck();\n      });\n  }\n\n  onTabClick(activeTab: TabLinkData) {\n    this.activeTab = activeTab;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n",
                    "styleUrl": "./connections-modal-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileService",
                        "type": "ProfileService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ConnectionsModalDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "ConnectionModalData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileService",
                        "type": "ProfileService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ConnectionsModalDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "ConnectionModalData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"modal-wp\">\n\n  <div class=\"modal-header\">\n    <h2>Connections</h2>\n    <app-close-button (onClose)=\"dialogRef.close()\"></app-close-button>\n  </div>\n\n  <div class=\"modal-tabs\">\n    <app-tabs (tabClick)=\"onTabClick($event)\" [activeLink]=\"activeTab\" [tabLinks]=\"tabLinks\"></app-tabs>\n  </div>\n\n  <div class=\"modal-body\">\n\n    <ng-container *ngIf=\"activeTab.tabName === 'following' && followingIds\">\n      <ng-container *ngIf=\"followingIds.length > 0; else noDownload\">\n        <app-vote-user-list [ids]=\"followingIds\"></app-vote-user-list>\n      </ng-container>\n    </ng-container>\n\n    <ng-container *ngIf=\"activeTab.tabName === 'followers' && followersIds\">\n      <ng-container *ngIf=\"followersIds.length > 0; else noDownload\">\n        <app-vote-user-list [ids]=\"followersIds\"></app-vote-user-list>\n      </ng-container>\n    </ng-container>\n  </div>\n\n</div>\n\n<ng-template #noDownload>\n  <app-row margin=\"16px 0 0\" h=\"center\">No download yet</app-row>\n</ng-template>\n"
        },
        {
            "name": "DownvoteButtonComponent",
            "id": "component-DownvoteButtonComponent-4acde72d2d35de16ac391aa7a0c986cc",
            "file": "src/app/ui-lib/buttons/downvote-button/downvote-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-downvote-button",
            "styleUrls": [
                "./downvote-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./downvote-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "count",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "number"
                },
                {
                    "name": "isActive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean"
                },
                {
                    "name": "isShowLabel",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "setIsActive",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-downvote-button',\n  templateUrl: './downvote-button.component.html',\n  styleUrls: ['./downvote-button.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DownvoteButtonComponent {\n  @Input() isShowLabel: boolean = false;\n  @Input() isActive: boolean = false;\n  @Input() count: number = 0;\n\n  setIsActive(value: boolean) {\n    this.isActive = value;\n    this.count = value ? ++this.count : --this.count;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.active {\r\n  color: #EA3323 !important;\r\n}\r\n",
                    "styleUrl": "./downvote-button.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<app-icon-button *ngIf=\"!isActive\"\r\n                 [iconSize]=\"22\"\r\n                 [buttonSize]=\"32\"\r\n                 [iconName]=\"'downvote-default-icon'\"\r\n                 (click)=\"setIsActive(true)\"\r\n></app-icon-button>\r\n\r\n<app-icon-button *ngIf=\"isActive\"\r\n                 [iconSize]=\"22\"\r\n                 [buttonSize]=\"32\"\r\n                 [iconName]=\"'downvote-active-icon'\"\r\n                 (click)=\"setIsActive(false)\"\r\n></app-icon-button>\r\n\r\n<span class=\"action-panel-label\"\r\n      *ngIf=\"isShowLabel\"\r\n>\r\n  Downvote\r\n  <span *ngIf=\"count > 0\">\r\n    ({{count | numeral}})\r\n  </span>\r\n</span>\r\n\r\n<span\r\n  class=\"action-panel-label\"\r\n  [ngClass]=\"{ 'active': isActive }\"\r\n  *ngIf=\"!isShowLabel && count > 0\"\r\n>\r\n  {{count | numeral}}\r\n</span>\r\n\r\n"
        },
        {
            "name": "EditButtonComponent",
            "id": "component-EditButtonComponent-c3615477f1dbeb84c379d6a060123cf6",
            "file": "src/app/ui-lib/buttons/edit-button/edit-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-edit-button",
            "styleUrls": [
                "./edit-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./edit-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-edit-button',\r\n  templateUrl: './edit-button.component.html',\r\n  styleUrls: ['./edit-button.component.scss']\r\n})\r\nexport class EditButtonComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".edit-button {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 36px;\r\n  height: 36px;\r\n  border-radius: 50%;\r\n  border: 1px solid #EDEDED;\r\n  cursor: pointer;\r\n\r\n  ::ng-deep {\r\n    mat-icon {\r\n      width: 15px;\r\n      svg {\r\n        path {\r\n          fill: #EB2F96;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  &:hover, &:active {\r\n    border-color: #EB2F96;\r\n  }\r\n}\r\n",
                    "styleUrl": "./edit-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<a [routerLink]=\"['/spaces/edit']\" matRipple class=\"edit-button\">\r\n  <mat-icon svgIcon=\"edit-icon\"></mat-icon>\r\n</a>\r\n"
        },
        {
            "name": "EditPostComponent",
            "id": "component-EditPostComponent-f675ec470b73d4906c02ac6c81a8e90d",
            "file": "src/app/post/edit-post/edit-post.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-edit-post",
            "styleUrls": [
                "./edit-post.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./edit-post.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeTab",
                    "defaultValue": "this.tabs[0]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TabLinkData",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "postForm",
                    "defaultValue": "new FormGroup({\r\n    postTitle: new FormControl(''),\r\n    postBody: new FormControl(''),\r\n    tags: new FormControl([]),\r\n    videoUrl: new FormControl(''),\r\n    imageUrl: new FormControl(''),\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "tabs",
                    "defaultValue": "[{ tabName: 'article' }, { tabName: 'video' }]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TabLinkData[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"edit\" | \"create\"",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "videoUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onVideoUrlBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setActiveTab",
                    "args": [
                        {
                            "name": "tab",
                            "type": "TabLinkData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "TabLinkData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { TabLinkData } from '../../core/models/tab-link-data.model';\r\nimport { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-edit-post',\r\n  templateUrl: './edit-post.component.html',\r\n  styleUrls: ['./edit-post.component.scss'],\r\n})\r\nexport class EditPostComponent implements OnInit {\r\n  type: 'edit' | 'create';\r\n  tabs: TabLinkData[] = [{ tabName: 'article' }, { tabName: 'video' }];\r\n  activeTab: TabLinkData = this.tabs[0];\r\n  videoUrl = '';\r\n\r\n  postForm = new FormGroup({\r\n    postTitle: new FormControl(''),\r\n    postBody: new FormControl(''),\r\n    tags: new FormControl([]),\r\n    videoUrl: new FormControl(''),\r\n    imageUrl: new FormControl(''),\r\n  });\r\n\r\n  constructor(private route: ActivatedRoute) {}\r\n\r\n  ngOnInit(): void {\r\n    this.route.params.subscribe((params) => {\r\n      this.type = params.type;\r\n    });\r\n  }\r\n\r\n  setActiveTab(tab: TabLinkData) {\r\n    this.activeTab = tab;\r\n  }\r\n\r\n  onVideoUrlBlur() {\r\n    this.videoUrl = this.postForm.value.videoUrl;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".edit-post-container {\r\n  width: 628px;\r\n  margin: 0 auto;\r\n  min-height: 60vh;\r\n  padding-bottom: 16px;\r\n\r\n  h2 {\r\n    margin-block-end: 4px;\r\n  }\r\n\r\n  .image-wp {\r\n    margin-top: 16px;\r\n    margin-bottom: 20px;\r\n  }\r\n\r\n  .input-wp {\r\n    margin-top: 16px;\r\n  }\r\n\r\n  ::ng-deep {\r\n    .mat-tab-header {\r\n      margin: 0 -16px;\r\n    }\r\n\r\n    .mat-tab-link {\r\n      font-size: 14px !important;\r\n      letter-spacing: 1.25px;\r\n    }\r\n\r\n    .mat-tab-link-container {\r\n      z-index: 0 !important;\r\n    }\r\n  }\r\n\r\n  .button-wp {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    width: 100%;\r\n    gap: 16px;\r\n    margin-top: 5px;\r\n\r\n    button {\r\n      min-width: 110px;\r\n      font-size: 17px;\r\n      .mat-button-wrapper {\r\n        letter-spacing: 0.5px;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\n@media only screen and (max-width: 768px) {\r\n  .edit-post-container {\r\n    width: 100%;\r\n  }\r\n}\r\n",
                    "styleUrl": "./edit-post.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<section class=\"edit-post-container\">\r\n  <mat-card>\r\n    <h2>{{type === 'edit' ? 'Edit' : 'New'}} post</h2>\r\n    <app-tabs [tabLinks]=\"tabs\" [activeLink]=\"activeTab\" (tabClick)=\"setActiveTab($event)\"></app-tabs>\r\n\r\n    <form [formGroup]=\"postForm\" action=\"\">\r\n      <ng-container [ngSwitch]=\"activeTab.tabName\">\r\n\r\n        <ng-template ngSwitchCase=\"article\">\r\n          <div class=\"image-wp\">\r\n            <app-image-loader type=\"square\"></app-image-loader>\r\n          </div>\r\n        </ng-template>\r\n\r\n        <ng-template ngSwitchCase=\"video\">\r\n          <div class=\"input-wp\">\r\n            <app-text-input\r\n              formControlName=\"videoUrl\"\r\n              [isRequired]=\"true\"\r\n              [label]=\"'Video URL'\"\r\n              (blur)=\"onVideoUrlBlur()\"\r\n            ></app-text-input>\r\n          </div>\r\n          <app-embed-video [videoUrl]=\"videoUrl\"></app-embed-video>\r\n        </ng-template>\r\n      </ng-container>\r\n\r\n      <app-text-input\r\n        [label]=\"'Post title'\"\r\n        formControlName=\"postTitle\"\r\n      ></app-text-input>\r\n\r\n      <app-text-area\r\n        [label]=\"'Post body'\"\r\n        formControlName=\"postBody\"\r\n        [isRequired]=\"true\"\r\n      ></app-text-area>\r\n\r\n      <app-tag-input\r\n        formControlName=\"tags\"\r\n        [placeholder]=\"'Press \\'Enter\\' or \\'Tab\\' key to add tags'\"\r\n      ></app-tag-input>\r\n\r\n      <div class=\"button-wp\">\r\n        <button mat-stroked-button>{{ type === 'edit' ? 'Cancel' : 'Reset form'}}</button>\r\n        <button mat-raised-button color=\"primary\">{{ type === 'edit' ? 'Save' : 'Create post'}}</button>\r\n      </div>\r\n    </form>\r\n\r\n  </mat-card>\r\n</section>\r\n\r\n"
        },
        {
            "name": "EditSpaceComponent",
            "id": "component-EditSpaceComponent-1170ea4c57189886e1c2d92d21d71a3e",
            "file": "src/app/space/edit-space/edit-space.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-edit-space",
            "styleUrls": [
                "./edit-space.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./edit-space.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "\"edit\" | \"create\""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "deviceService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DeviceService",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "editSpaceForm",
                    "defaultValue": "new FormGroup({\r\n    spaceName: new FormControl('', {\r\n      validators: [Validators.required],\r\n    }),\r\n    description: new FormControl(''),\r\n    tags: new FormControl([]),\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "url",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, ViewEncapsulation } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { COMMA, ENTER } from '@angular/cdk/keycodes';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { DeviceService } from '../../shared/services/device.service';\r\n\r\n@Component({\r\n  selector: 'app-edit-space',\r\n  templateUrl: './edit-space.component.html',\r\n  styleUrls: ['./edit-space.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class EditSpaceComponent implements OnInit {\r\n  @Input() type: 'edit' | 'create';\r\n\r\n  url = '';\r\n\r\n  editSpaceForm = new FormGroup({\r\n    spaceName: new FormControl('', {\r\n      validators: [Validators.required],\r\n    }),\r\n    description: new FormControl(''),\r\n    tags: new FormControl([]),\r\n  });\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    public deviceService: DeviceService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.route.params.subscribe((params) => {\r\n      this.type = params.type;\r\n    });\r\n\r\n    if (this.type === 'edit') {\r\n      this.url = 'assets/upload-photo.png';\r\n      this.editSpaceForm.patchValue({\r\n        spaceName: 'Subsocial',\r\n        description:\r\n          'Nulla Lorem mollit cupidatat irure. Laborum magna nulla duis ullamco cillum dolor. Voluptate exercitation incididunt aliquip deserunt reprehenderit elit laborum. \\n' +\r\n          'Nulla Lorem mollit cupidatat irure. Laborum magna nulla duis ullamco cillum dolor. Voluptate exercitation incididunt aliquip deserunt reprehenderit elit laborum. ',\r\n        tags: ['subsocial', 'polkadot', 'substrate'],\r\n      });\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".edit-space-container {\r\n  width: 628px;\r\n  margin: 0 auto;\r\n  min-height: 60vh;\r\n  padding-bottom: 16px;\r\n\r\n  mat-card {\r\n    padding: 35px 23px 21px;\r\n  }\r\n\r\n  h2 {\r\n    margin: 19px 3px;\r\n  }\r\n\r\n  .space-form {\r\n    margin-top: 16px;\r\n    gap: 24px;\r\n  }\r\n\r\n  .button-wp {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    width: 100%;\r\n    gap: 16px;\r\n    margin-top: 5px;\r\n\r\n    button {\r\n      min-width: 110px;\r\n      font-size: 17px;\r\n      .mat-button-wrapper {\r\n        letter-spacing: 0.5px;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@media only screen and (max-width: 768px) {\r\n  .edit-space-container {\r\n    width: 100%;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n",
                    "styleUrl": "./edit-space.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "deviceService",
                        "type": "DeviceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "deviceService",
                        "type": "DeviceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<section class=\"edit-space-container\">\r\n  <mat-card>\r\n    <h2>{{type === 'edit' ? 'Edit' : 'New'}} space</h2>\r\n\r\n    <app-image-loader [imageUrl]=\"url\"></app-image-loader>\r\n\r\n    <form [formGroup]=\"editSpaceForm\" class=\"space-form\" action=\"\">\r\n      <app-text-input\r\n        formControlName=\"spaceName\"\r\n        [isRequired]=\"true\"\r\n        [label]=\"'Space name'\"\r\n      ></app-text-input>\r\n\r\n      <app-text-area\r\n        formControlName=\"description\"\r\n        [initHeight]=\"(deviceService.isMobile$ | async) ? 180 : 260\"\r\n        [label]=\"'Description'\"\r\n      >\r\n      </app-text-area>\r\n\r\n      <app-tag-input\r\n        [placeholder]=\"'Press \\'Enter\\' or \\'Tab\\' key to add tags'\"\r\n        formControlName=\"tags\"\r\n      ></app-tag-input>\r\n\r\n      <div class=\"button-wp\">\r\n        <button mat-stroked-button>{{ type === 'edit' ? 'Cancel' : 'Reset form'}}</button>\r\n        <button mat-raised-button color=\"primary\">{{ type === 'edit' ? 'Save' : 'Create space'}}</button>\r\n      </div>\r\n    </form>\r\n  </mat-card>\r\n</section>\r\n"
        },
        {
            "name": "EmbedVideoComponent",
            "id": "component-EmbedVideoComponent-b08ce04413095d8cd8d048466942c9db",
            "file": "src/app/ui-lib/content/embed-video/embed-video.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-embed-video",
            "styleUrls": [
                "./embed-video.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./embed-video.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "videoUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": ""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_videoUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "videoId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | ",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "extractVideoId",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | ",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-embed-video',\r\n  templateUrl: './embed-video.component.html',\r\n  styleUrls: ['./embed-video.component.scss'],\r\n})\r\nexport class EmbedVideoComponent implements OnInit {\r\n  @Input() set videoUrl(value: string | undefined) {\r\n    this._videoUrl = value;\r\n    if (value) {\r\n      this.videoId = this.extractVideoId(value);\r\n    }\r\n  }\r\n\r\n  get videoUrl() {\r\n    return this._videoUrl;\r\n  }\r\n  private _videoUrl: string | undefined;\r\n\r\n  videoId: string | false = '';\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  private extractVideoId(url: string): string | false {\r\n    const regExp =\r\n      /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\r\n    const match = url.match(regExp);\r\n    return match && match[7].length == 11 ? match[7] : false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".video-wp {\r\n  width: 100%;\r\n  margin-top: 12px;\r\n\r\n  ::ng-deep {\r\n    iframe {\r\n      width: 100%;\r\n      height: 430px;\r\n    }\r\n\r\n    @media only screen and (max-width: 768px) {\r\n      iframe {\r\n        height: calc(100vw / 1.77);\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./embed-video.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 21
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "videoUrl": {
                    "name": "videoUrl",
                    "setSignature": {
                        "name": "videoUrl",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string | undefined",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 9,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string | undefined",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "videoUrl",
                        "type": "",
                        "returnType": "",
                        "line": 16
                    }
                }
            },
            "templateData": "<ng-container *ngIf=\"videoUrl && videoId\">\r\n  <div class=\"video-wp\">\r\n    <youtube-player\r\n      [videoId]=\"videoId\"\r\n    ></youtube-player>\r\n  </div>\r\n</ng-container>\r\n"
        },
        {
            "name": "ExpandParagraphComponent",
            "id": "component-ExpandParagraphComponent-b30486516c4c42e667b7f616c7d2273b",
            "file": "src/app/ui-lib/text/expand-paragraph/expand-paragraph.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-expand-paragraph",
            "styleUrls": [
                "./expand-paragraph.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./expand-paragraph.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "expandedText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string"
                },
                {
                    "name": "isMore",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean"
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-expand-paragraph',\n  templateUrl: './expand-paragraph.component.html',\n  styleUrls: ['./expand-paragraph.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ExpandParagraphComponent {\n  @Input() expandedText: string;\n  @Input() text: string;\n  @Input() isMore: boolean = true;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "span {\r\n  line-height: 24px;\r\n  font-size: 17px;\r\n}\r\n",
                    "styleUrl": "./expand-paragraph.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<span *ngIf=\"isMore\">{{ text }}</span>\n\n<markdown *ngIf=\"!isMore\" class=\"markdown-body\" ngPreserveWhitespaces>\n  {{ expandedText }}\n</markdown>\n\n<app-see-more (switch)=\"isMore = !isMore\" type=\"expand\"></app-see-more>\n"
        },
        {
            "name": "FollowButtonComponent",
            "id": "component-FollowButtonComponent-bb770c28700122fbbb6da40846b8b238",
            "file": "src/app/ui-lib/buttons/follow-button/follow-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-follow-button",
            "styleUrls": [
                "./follow-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./follow-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isFollow",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "boolean"
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "\"medium\" | \"large\""
                },
                {
                    "name": "width",
                    "defaultValue": "'static'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "\"full\" | \"static\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onFollow",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter"
                },
                {
                    "name": "onUnfollow",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-follow-button',\r\n  templateUrl: './follow-button.component.html',\r\n  styleUrls: ['./follow-button.component.scss'],\r\n})\r\nexport class FollowButtonComponent {\r\n  @Input() isFollow = false;\r\n  @Input() width: 'full' | 'static' = 'static';\r\n  @Input() size: 'medium' | 'large' = 'medium';\r\n\r\n  @Output() onUnfollow = new EventEmitter<Event>();\r\n  @Output() onFollow = new EventEmitter<Event>();\r\n\r\n  constructor() {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".static {\r\n  width: 99px;\r\n}\r\n\r\n.full {\r\n  width: 100%;\r\n}\r\n\r\n.mat-stroked-button {\r\n  border: 1px solid #EB2F96 !important;\r\n\r\n}\r\n\r\n",
                    "styleUrl": "./follow-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "templateData": "<ng-container *ngIf=\"isFollow; else following\">\r\n\r\n  <button\r\n    (click)=\"onUnfollow.emit();\"\r\n    [ngClass]=\"width\"\r\n    [ngStyle]=\"{\r\n      'font-size': size === 'medium' ? '14px': '17px',\r\n      'letter-spacing': size === 'medium' ? '1.25px' : '0'\r\n    }\"\r\n    mat-stroked-button\r\n    color=\"primary\"\r\n  >\r\n    Following\r\n  </button>\r\n\r\n</ng-container>\r\n\r\n<ng-template #following>\r\n\r\n  <button\r\n    (click)=\"onFollow.emit()\"\r\n    [ngClass]=\"width\"\r\n    [ngStyle]=\"{\r\n      'font-size': size === 'medium' ? '14px': '17px',\r\n      'letter-spacing': size === 'medium' ? '1.25px' : '0'\r\n    }\"\r\n    class=\"follow-button\"\r\n    mat-flat-button\r\n    color=\"primary\"\r\n  >\r\n    Follow\r\n  </button>\r\n\r\n</ng-template>\r\n"
        },
        {
            "name": "FollowersModalDialogComponent",
            "id": "component-FollowersModalDialogComponent-d7a95d39beade042aaa21abccae3142c",
            "file": "src/app/shared/modal-dialogs/followers-modal-dialog/followers-modal-dialog.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-followers-modal-dialog",
            "styleUrls": [
                "./followers-modal-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./followers-modal-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FollowersModalData",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<FollowersModalDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "followersIds",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Inject,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { from } from 'rxjs';\r\nimport {\r\n  ConnectionModalData,\r\n  FollowersModalData,\r\n} from '../../../core/types/dialog-modal-data.types';\r\nimport { SpaceService } from '../../../space/services/space.service';\r\nimport { take } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-followers-modal-dialog',\r\n  templateUrl: './followers-modal-dialog.component.html',\r\n  styleUrls: ['./followers-modal-dialog.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class FollowersModalDialogComponent implements OnInit {\r\n  constructor(\r\n    public dialogRef: MatDialogRef<FollowersModalDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: FollowersModalData,\r\n    private spaceService: SpaceService,\r\n    private cd: ChangeDetectorRef\r\n  ) {}\r\n\r\n  followersIds: string[] = [];\r\n\r\n  ngOnInit(): void {\r\n    from(this.spaceService.getFollowersIdsBySpaceId(this.data.spaceId))\r\n      .pipe(take(1))\r\n      .subscribe((ids) => {\r\n        this.followersIds = ids;\r\n        this.cd.markForCheck();\r\n      });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n",
                    "styleUrl": "./followers-modal-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<FollowersModalDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "FollowersModalData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "spaceService",
                        "type": "SpaceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<FollowersModalDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "FollowersModalData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "spaceService",
                        "type": "SpaceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"modal-wp\">\r\n  <div class=\"modal-header\">\r\n    <h2>{{followersIds.length + ' ' + (followersIds.length | pluralize: 'Follower') }}</h2>\r\n    <app-close-button (onClose)=\"dialogRef.close()\"></app-close-button>\r\n  </div>\r\n\r\n  <div class=\"modal-body\">\r\n    <ng-container *ngIf=\"followersIds.length > 0; else noDownload\">\r\n      <app-vote-user-list [ids]=\"followersIds\"></app-vote-user-list>\r\n    </ng-container>\r\n  </div>\r\n\r\n</div>\r\n\r\n<ng-template #noDownload>\r\n  <app-row margin=\"16px 0 0\" h=\"center\">No download yet</app-row>\r\n</ng-template>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-5bab155501d4ddd264acdfa7b93f90ba",
            "file": "src/app/shared/components/header/header.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "appName",
                    "defaultValue": "environment.appName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "navService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NavigationService",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onTabLinkClick",
                    "args": [
                        {
                            "name": "tab",
                            "type": "TabLinkData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "TabLinkData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { environment } from '../../../../environments/environment';\r\nimport { NavigationService } from '../../services/navigation.service';\r\nimport { TabLinkData } from '../../../core/models/tab-link-data.model';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n  appName = environment.appName;\r\n\r\n  constructor(public navService: NavigationService) {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  onTabLinkClick(tab: TabLinkData) {\r\n    this.navService.switchTab(tab);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "header {\r\n  background: #FFFFFF;\r\n  box-shadow: 0px 3px 10px rgba(153, 153, 153, 0.14), 0px 3px 9px rgba(153, 153, 153, 0.12), 0px 1px 20px rgba(153, 153, 153, 0.2);\r\n  position: fixed;\r\n  top: 0;\r\n  right: 0;\r\n  left: 0;\r\n  z-index: 1;\r\n\r\n  .header-wp {\r\n    position: relative;\r\n\r\n    .header-line {\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: space-between;\r\n      padding-right: 16px;\r\n\r\n      &>div {\r\n        display: flex;\r\n        align-items: center;\r\n      }\r\n\r\n      .menu-button {\r\n        width: 30px;\r\n        height: 30px;\r\n        line-height: 30px;\r\n        margin: 13px 15px 13px 15px;\r\n\r\n        mat-icon {\r\n          width: 18px;\r\n          height: 12px;\r\n          line-height: 12px;\r\n        }\r\n      }\r\n\r\n    }\r\n  }\r\n}\r\n\r\n.header-tabs-wp {\r\n  position: absolute;\r\n  width: 763px;\r\n  top: -2px;\r\n  margin: 0 auto;\r\n  right: 0;\r\n  left: 0;\r\n\r\n  .mat-tab-link  {\r\n    height: 56px !important;\r\n  }\r\n}\r\n\r\n@media only screen and (max-width: 768px) {\r\n  .header-tabs-wp {\r\n    position: relative;\r\n    width: 100%;\r\n    top: 0;\r\n  }\r\n}\r\n\r\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "navService",
                        "type": "NavigationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "navService",
                        "type": "NavigationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<header>\r\n  <div class=\"header-wp\">\r\n    <div class=\"header-line\">\r\n      <div>\r\n        <button mat-icon-button class=\"menu-button\">\r\n          <mat-icon svgIcon=\"menu-icon\"></mat-icon>\r\n        </button>\r\n        <app-title type=\"large\" [link]=\"'/'\" [text]=\"appName\"></app-title>\r\n      </div>\r\n      <app-profile-button></app-profile-button>\r\n    </div>\r\n  </div>\r\n\r\n  <ng-container>\r\n    <div class=\"header-tabs-wp\">\r\n      <app-tabs\r\n        [tabLinks]=\"navService.tabLinks\"\r\n        (tabClick)=\"onTabLinkClick($event)\"\r\n        [activeLink]=\"(navService.activeTab$ | async)!\">\r\n      </app-tabs>\r\n    </div>\r\n  </ng-container>\r\n</header>\r\n"
        },
        {
            "name": "HiddenContentComponent",
            "id": "component-HiddenContentComponent-43a11a33751c604458aefe1ddc3a962e",
            "file": "src/app/ui-lib/content/hidden-content/hidden-content.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-hidden-content",
            "styleUrls": [
                "./hidden-content.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./hidden-content.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "\"post\" | \"space\" | \"comment\""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-hidden-content',\n  templateUrl: './hidden-content.component.html',\n  styleUrls: ['./hidden-content.component.scss'],\n})\nexport class HiddenContentComponent implements OnInit {\n  @Input() type: 'post' | 'space' | 'comment';\n\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".post {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  background: #FEFBE8;\r\n  border-bottom: 1px solid #F1E8B3;\r\n  border-radius: 4px 4px 0 0;\r\n  height: 40px;\r\n  margin: -16px -16px 16px;\r\n\r\n  mat-icon {\r\n    margin: 0 10px 0 16px;\r\n  }\r\n\r\n  .make-visible-btn {\r\n    margin-right: 16px;\r\n    padding: 3px 10px;\r\n    border: 1px solid #D9D9D9;\r\n    border-radius: 4px;\r\n    font-weight: 500;\r\n    font-size: 14px;\r\n    line-height: 125%;\r\n  }\r\n\r\n  span {\r\n    font-size: 14px;\r\n  }\r\n}\r\n\r\n",
                    "styleUrl": "./hidden-content.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container [ngSwitch]=\"type\">\n  <ng-template ngSwitchCase=\"post\">\n    <app-row [ngClass]=\"type\">\n      <div class=\"center-vertical\">\n        <mat-icon  svgIcon=\"info-yellow-icon\"></mat-icon>\n        <span>This post is unlisted and only you can see it</span>\n      </div>\n      <button mat-ripple class=\"make-visible-btn\">Make visible</button>\n    </app-row>\n  </ng-template>\n</ng-container>\n"
        },
        {
            "name": "IconButtonComponent",
            "id": "component-IconButtonComponent-dc75a3afa8d144dcda0cd723949eec77",
            "file": "src/app/ui-lib/buttons/icon-button/icon-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-icon-button",
            "styleUrls": [
                "./icon-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./icon-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "buttonSize",
                    "defaultValue": "28",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "number"
                },
                {
                    "name": "iconName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string"
                },
                {
                    "name": "iconSize",
                    "defaultValue": "16",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-icon-button',\n  templateUrl: './icon-button.component.html',\n  styleUrls: ['./icon-button.component.scss'],\n})\nexport class IconButtonComponent implements OnInit {\n  @Input() iconName: string;\n  @Input() buttonSize: number = 28;\n  @Input() iconSize: number = 16;\n\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "button, mat-icon {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n",
                    "styleUrl": "./icon-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<button [style.width]=\"buttonSize + 'px'\"\n        [style.height]=\"buttonSize + 'px'\"\n        [style.line-height]=\"buttonSize + 'px'\"\n        mat-icon-button\n>\n  <mat-icon [style.width]=\"iconSize + 'px'\"\n            [style.height]=\"iconSize + 'px'\"\n            svgIcon=\"{{iconName}}\"\n  ></mat-icon>\n</button>\n"
        },
        {
            "name": "ImageLoaderComponent",
            "id": "component-ImageLoaderComponent-28a048eaf9b4e2903ada7aa128450f69",
            "file": "src/app/ui-lib/input/image-loader/image-loader.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-image-loader",
            "styleUrls": [
                "./image-loader.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./image-loader.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "imageUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string | undefined"
                },
                {
                    "name": "type",
                    "defaultValue": "'round'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "\"round\" | \"square\""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fileInput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'fileInput'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "loadImage",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openFile",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeImage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, Input, OnInit, ViewChild } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-image-loader',\r\n  templateUrl: './image-loader.component.html',\r\n  styleUrls: ['./image-loader.component.scss'],\r\n})\r\nexport class ImageLoaderComponent implements OnInit {\r\n  @Input() imageUrl: string | undefined = '';\r\n  @Input() type: 'round' | 'square' = 'round';\r\n\r\n  @ViewChild('fileInput') fileInput: ElementRef<HTMLInputElement>;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  openFile() {\r\n    this.fileInput.nativeElement.click();\r\n  }\r\n\r\n  removeImage() {\r\n    this.imageUrl = '';\r\n  }\r\n\r\n  loadImage(event: any) {\r\n    if (!event?.target?.files[0] || event.target.files[0].length == 0) {\r\n      return;\r\n    }\r\n\r\n    const mimeType = event.target.files[0].type;\r\n\r\n    if (mimeType.match(/image\\/*/) == null) {\r\n      return;\r\n    }\r\n\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(event.target.files[0]);\r\n\r\n    reader.onload = (_event) => {\r\n      this.imageUrl = reader?.result?.toString();\r\n    };\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".square-container {\r\n  border: 1px solid rgb(0, 0, 0, 0.19);\r\n  border-radius: 3.5px;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    border: 1px solid rgb(0, 0, 0, 0.3);\r\n  }\r\n\r\n  .image-loader-wp {\r\n    margin-top: 19px;\r\n\r\n    .image-loader {\r\n    }\r\n  }\r\n\r\n  .loader-alert {\r\n    margin-top: 5px;\r\n    margin-bottom: 16px;\r\n\r\n    .secondary-text {\r\n      font-size: 12px;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n.square-container-loaded {\r\n  width: 100%;\r\n  min-height: 100px;\r\n  height: 20vh;\r\n  background-size: cover;\r\n  background-repeat: no-repeat;\r\n  background-position: center;\r\n  border-radius: 3.5px;\r\n  position: relative;\r\n\r\n  .button-wp {\r\n    position: absolute;\r\n    display: flex;\r\n    border-radius: 30px;\r\n    background: #000000;\r\n    opacity: 0.3;\r\n    right: 10px;\r\n    top: 10px;\r\n    padding: 0 10px;\r\n\r\n    mat-icon[svgIcon=remove-white-icon] {\r\n      width: 15px;\r\n    }\r\n  }\r\n}\r\n\r\n.round-container {\r\n  .image-loader-wp {\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    .image-loader {\r\n      width: 80px;\r\n      height: 80px;\r\n      border-radius: 50%;\r\n      border: 1px dashed rgba(0, 0, 0, 0.38);\r\n      cursor: pointer;\r\n    }\r\n\r\n    .loaded {\r\n      border: none;\r\n      background-position: center;\r\n      background-size: cover;\r\n      background-repeat: no-repeat;\r\n\r\n      mat-icon {\r\n        display: none;\r\n      }\r\n\r\n      &:hover {\r\n        mat-icon {\r\n          display: block;\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  .loader-alert {\r\n    margin-top: 7px;\r\n  }\r\n\r\n  &:hover {\r\n    .remove-btn {\r\n      display: block;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n.remove-btn {\r\n  display: none;\r\n  position: absolute;\r\n  top: 20%;\r\n  right: 15px;\r\n\r\n  mat-icon {\r\n    width: 14px;\r\n  }\r\n}\r\n\r\n.label {\r\n  font-size: 14px;\r\n  line-height: 125%;\r\n}\r\n\r\n.center-column {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n",
                    "styleUrl": "./image-loader.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\r\n<ng-container *ngIf=\"type === 'round'\">\r\n  <section class=\"center-column w100 round-container\">\r\n    <div class=\"image-loader-wp\">\r\n      <ng-container *ngIf=\"!imageUrl; else isLoaded\">\r\n\r\n        <div (click)=\"openFile()\" class=\"image-loader center-column\">\r\n          <mat-icon svgIcon=\"photo-icon\"></mat-icon>\r\n          <span class=\"label\">Upload</span>\r\n        </div>\r\n\r\n      </ng-container>\r\n\r\n      <div class=\"loader-alert\">\r\n        <span class=\"secondary-text\">Image should be less than 2 MB</span>\r\n      </div>\r\n    </div>\r\n    <ng-template #isLoaded>\r\n      <div (click)=\"openFile()\" class=\"image-loader loaded center-column\" [ngStyle]=\"{'background-image': 'url(' + imageUrl +')'}\">\r\n        <mat-icon svgIcon=\"photo-white-icon\"></mat-icon>\r\n      </div>\r\n      <button (click)=\"removeImage()\" class=\"remove-btn\" mat-icon-button>\r\n        <mat-icon svgIcon=\"remove-icon\"></mat-icon>\r\n      </button>\r\n    </ng-template>\r\n  </section>\r\n</ng-container>\r\n\r\n<ng-container *ngIf=\"type === 'square'\">\r\n  <ng-container *ngIf=\"!imageUrl; else isLoaded\">\r\n    <section (click)=\"openFile()\" class=\"center-column w100 square-container\">\r\n      <div class=\"image-loader-wp\">\r\n        <div class=\"image-loader center-column\">\r\n          <mat-icon svgIcon=\"photo-icon\"></mat-icon>\r\n          <span class=\"label\">Upload cover image</span>\r\n        </div>\r\n        <div class=\"loader-alert\">\r\n          <span class=\"secondary-text\">Image should be less than 2 MB</span>\r\n        </div>\r\n\r\n      </div>\r\n    </section>\r\n  </ng-container>\r\n  <ng-template #isLoaded>\r\n    <div class=\"square-container-loaded\" [ngStyle]=\"{'background-image': 'url(' + imageUrl +')'}\">\r\n      <div class=\"button-wp\">\r\n        <button (click)=\"openFile()\" mat-icon-button>\r\n          <mat-icon svgIcon=\"photo-white-icon\"></mat-icon>\r\n        </button>\r\n        <button (click)=\"removeImage()\" mat-icon-button>\r\n          <mat-icon svgIcon=\"remove-white-icon\"></mat-icon>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </ng-template>\r\n</ng-container>\r\n\r\n<input #fileInput type=\"file\" (change)=\"loadImage($event)\" hidden>\r\n"
        },
        {
            "name": "LinkIconsComponent",
            "id": "component-LinkIconsComponent-47fa747fe4d4a75f961e88ba0fbe9974",
            "file": "src/app/shared/components/link-icons/link-icons.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-link-icons",
            "styleUrls": [
                "./link-icons.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./link-icons.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "links",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "Array<string> | NamedLink[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "mockLinks",
                    "defaultValue": "[\r\n    'https://bifrost.finance/',\r\n    'https://twitter.com/bifrost_finance',\r\n    'https://www.linkedin.com/in/anton-ryasnenko-305826145/',\r\n    'https://t.me/bifrost_finance',\r\n    'https://github.com/bifrost-finance',\r\n    'https://medium.com/bifrost-finance',\r\n    'https://www.youtube.com/channel/UC_qYSufEK-9vLNiyT2J_KiA',\r\n    'https://www.reddit.com/user/Antryas',\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "preparedLinks",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { NamedLink } from '@subsocial/types';\r\n\r\n@Component({\r\n  selector: 'app-link-icons',\r\n  templateUrl: './link-icons.component.html',\r\n  styleUrls: ['./link-icons.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LinkIconsComponent implements OnInit {\r\n  @Input() links: Array<string> | NamedLink[] = [];\r\n\r\n  preparedLinks: string[] = [];\r\n  mockLinks = [\r\n    'https://bifrost.finance/',\r\n    'https://twitter.com/bifrost_finance',\r\n    'https://www.linkedin.com/in/anton-ryasnenko-305826145/',\r\n    'https://t.me/bifrost_finance',\r\n    'https://github.com/bifrost-finance',\r\n    'https://medium.com/bifrost-finance',\r\n    'https://www.youtube.com/channel/UC_qYSufEK-9vLNiyT2J_KiA',\r\n    'https://www.reddit.com/user/Antryas',\r\n  ];\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {\r\n    this.preparedLinks =\r\n      this.links.length > 0 ? (this.links as string[]) : this.mockLinks;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  align-items: center;\r\n\r\n}\r\n\r\ndiv {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-right: 10px;\r\n\r\n  mat-icon {\r\n    height: 20px;\r\n  }\r\n}\r\n\r\n",
                    "styleUrl": "./link-icons.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 28
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngFor=\"let link of preparedLinks\"\r\n     matTooltipPosition=\"above\"\r\n     matTooltip=\"{{link}}\"\r\n>\r\n  <a target=\"_blank\" href=\"{{link}}\">\r\n    <mat-icon svgIcon=\"{{link | linkToIcon}}-icon\"></mat-icon>\r\n  </a>\r\n</div>\r\n\r\n"
        },
        {
            "name": "MainComponent",
            "id": "component-MainComponent-9c7e5522584ca7fc2aa1351447a876e9",
            "file": "src/app/main/main/main.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-main",
            "styleUrls": [
                "./main.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./main.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "navService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NavigationService",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "postIds",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "spaceIds",
                    "defaultValue": "environment.recommendedSpaceIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "unsubscribe$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  OnDestroy,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { ActivatedRoute, Params, Router } from '@angular/router';\r\nimport { NavigationService } from '../../shared/services/navigation.service';\r\nimport { environment } from '../../../environments/environment';\r\nimport { PostService } from '../../post/services/post.service';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-main',\r\n  templateUrl: './main.component.html',\r\n  styleUrls: ['./main.component.scss'],\r\n})\r\nexport class MainComponent implements OnInit, OnDestroy {\r\n  private unsubscribe$: Subject<void> = new Subject();\r\n  spaceIds = environment.recommendedSpaceIds;\r\n  postIds: string[] = [];\r\n  constructor(\r\n    public navService: NavigationService,\r\n    private route: ActivatedRoute,\r\n    private postService: PostService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.navService.showTab();\r\n    const initTab = this.route.snapshot.queryParams['tab'];\r\n    initTab\r\n      ? this.navService.switchTab(\r\n          this.navService.tabLinks.find((tab) => tab.tabName === initTab) ||\r\n            this.navService.tabLinks[0]\r\n        )\r\n      : this.navService.switchTab(this.navService.tabLinks[0]);\r\n\r\n    this.postService\r\n      .getSuggestedPostsIds()\r\n      .pipe(takeUntil(this.unsubscribe$))\r\n      .subscribe((ids) => (this.postIds = ids));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.navService.hideTab();\r\n    this.unsubscribe$?.next();\r\n    this.unsubscribe$?.complete();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tabs-wp {\r\n  position: fixed;\r\n  width: 763px;\r\n  margin: 0 auto;\r\n  top: 7px;\r\n  left: 0;\r\n  right: 0;\r\n  z-index: 2000;\r\n}\r\n\r\n@media only screen and (max-width: 768px) {\r\n  .tabs-wp {\r\n    flex-direction: column;\r\n  }\r\n}\r\n",
                    "styleUrl": "./main.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "navService",
                        "type": "NavigationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postService",
                        "type": "PostService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "navService",
                        "type": "NavigationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postService",
                        "type": "PostService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<ng-container *ngIf=\"(navService.activeTab$ | async)?.tabName === 'posts'\">\r\n  <ng-container *ngIf=\"postIds.length > 0\">\r\n    <app-post-list [ids]=\"postIds\"></app-post-list>\r\n  </ng-container>\r\n</ng-container>\r\n\r\n<ng-container *ngIf=\"(navService.activeTab$ | async)?.tabName  === 'spaces'\">\r\n  <ng-container *ngIf=\"spaceIds.length > 0\">\r\n    <app-space-list [ids]=\"spaceIds\"></app-space-list>\r\n  </ng-container>\r\n</ng-container>\r\n\r\n"
        },
        {
            "name": "NoContentComponent",
            "id": "component-NoContentComponent-0461fc32e70f43a745ddce0e04a52ad3",
            "file": "src/app/ui-lib/content/no-content/no-content.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-no-content",
            "styleUrls": [
                "./no-content.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./no-content.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-no-content',\n  templateUrl: './no-content.component.html',\n  styleUrls: ['./no-content.component.scss'],\n})\nexport class NoContentComponent implements OnInit {\n  @Input() text: string;\n\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-card {\r\n  margin-top: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 70px;\r\n}\r\n",
                    "styleUrl": "./no-content.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card>\n  <span>{{ text }}</span>\n</mat-card>\n"
        },
        {
            "name": "NotificationPageComponent",
            "id": "component-NotificationPageComponent-0a1f58974c2b3dd02a88a61598314abf",
            "file": "src/app/notification/notification-page/notification-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-notification-page",
            "styleUrls": [
                "./notification-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./notification-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-notification-page',\r\n  templateUrl: './notification-page.component.html',\r\n  styleUrls: ['./notification-page.component.scss']\r\n})\r\nexport class NotificationPageComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".notification-list {\r\n  margin-top: 8px;\r\n\r\n  .notification-wp {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    border-bottom: 1px solid rgba(33, 33, 33, 0.08);\r\n    padding: 12px 0;\r\n  }\r\n}\r\n",
                    "styleUrl": "./notification-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card>\r\n  <app-title type=\"medium\" text=\"Notifications\"></app-title>\r\n  <div class=\"notification-list\">\r\n    <div class=\"notification-wp\" *ngFor=\"let notification of ['', '', '', '', '']\">\r\n      <app-post-info\r\n        [imageUrl]=\"'assets/avatar1.png'\"\r\n        [userName]=\"'Young Beef 4.0'\"\r\n        [spaceName]=\"'Subsocial'\"\r\n        [createdAtTime]=\"1613161818000\">\r\n      </app-post-info>\r\n      <app-post-image type=\"notification\" [imageSrc]=\"'assets/post-image-example.png'\"></app-post-image>\r\n    </div>\r\n  </div>\r\n</mat-card>\r\n"
        },
        {
            "name": "OptionButtonComponent",
            "id": "component-OptionButtonComponent-d620c6f73c85e09e9ac949829df50973",
            "file": "src/app/ui-lib/buttons/option-button/option-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-option-button",
            "styleUrls": [
                "./option-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./option-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isContentHidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean"
                },
                {
                    "name": "isViewReaction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "boolean"
                },
                {
                    "name": "type",
                    "defaultValue": "'post'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "OptionButtonType"
                }
            ],
            "outputsClass": [
                {
                    "name": "onClickViewReaction",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from \"@angular/core\";\r\nimport { OptionButtonType } from \"../../../core/types/option-button.type\";\r\n\r\n@Component({\r\n  selector: 'app-option-button',\r\n  templateUrl: './option-button.component.html',\r\n  styleUrls: ['./option-button.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class OptionButtonComponent implements OnInit {\r\n  @Input() type: OptionButtonType = 'post';\r\n  @Output() onClickViewReaction = new EventEmitter();\r\n  @Input() isViewReaction: boolean;\r\n  @Input() isContentHidden: boolean;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n\r\n",
                    "styleUrl": "./option-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container [ngSwitch]=\"type\">\r\n\r\n  <ng-template ngSwitchCase=\"post\">\r\n\r\n    <app-icon-button [iconSize]=\"16\"\r\n                     [matMenuTriggerFor]=\"menu\"\r\n                     [iconName]=\"'option-icon'\"\r\n    ></app-icon-button>\r\n\r\n    <mat-menu #menu=\"matMenu\">\r\n\r\n      <button (click)=\"onClickViewReaction.emit()\"\r\n              mat-menu-item>\r\n        <span>View reactions</span>\r\n      </button>\r\n\r\n      <button mat-menu-item *ngIf=\"!isContentHidden\">\r\n        <span>Hide Post</span>\r\n      </button>\r\n\r\n      <button mat-menu-item *ngIf=\"isContentHidden\">\r\n        <span>Make visible</span>\r\n      </button>\r\n\r\n      <button mat-menu-item>\r\n        <span>View on IPFS</span>\r\n      </button>\r\n\r\n    </mat-menu>\r\n\r\n  </ng-template>\r\n\r\n  <ng-template ngSwitchCase=\"space\">\r\n\r\n    <app-icon-button [iconSize]=\"16\"\r\n                     [matMenuTriggerFor]=\"menu\"\r\n                     [iconName]=\"'option-icon'\"\r\n    ></app-icon-button>\r\n\r\n    <mat-menu #menu=\"matMenu\">\r\n\r\n      <button mat-menu-item *ngIf=\"!isContentHidden\">\r\n        <span>Hide Space</span>\r\n      </button>\r\n\r\n      <button mat-menu-item *ngIf=\"isContentHidden\">\r\n        <span>Make visible</span>\r\n      </button>\r\n\r\n      <button mat-menu-item>\r\n        <span>View on IPFS</span>\r\n      </button>\r\n\r\n    </mat-menu>\r\n\r\n  </ng-template>\r\n\r\n  <ng-template ngSwitchCase=\"comment\">\r\n    <app-icon-button [iconSize]=\"16\"\r\n                     [matMenuTriggerFor]=\"menu\"\r\n                     [iconName]=\"'option-hor-icon'\"\r\n    ></app-icon-button>\r\n\r\n    <mat-menu #menu=\"matMenu\">\r\n\r\n      <button (click)=\"onClickViewReaction.emit()\"\r\n              mat-menu-item>\r\n        <span>View reactions</span>\r\n      </button>\r\n\r\n      <button mat-menu-item>\r\n        <span>Hide Comment</span>\r\n      </button>\r\n\r\n      <button mat-menu-item>\r\n        <span>Make visible</span>\r\n      </button>\r\n\r\n      <button mat-menu-item>\r\n        <span>View on IPFS</span>\r\n      </button>\r\n\r\n    </mat-menu>\r\n\r\n  </ng-template>\r\n\r\n</ng-container>\r\n"
        },
        {
            "name": "ParagraphComponent",
            "id": "component-ParagraphComponent-57a45b7ee98b105b4411ee28a7b687fa",
            "file": "src/app/ui-lib/text/paragraph/paragraph.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-paragraph",
            "styleUrls": [
                "./paragraph.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./paragraph.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isAutoExpand",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean"
                },
                {
                    "name": "isShowMore",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean"
                },
                {
                    "name": "link",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string"
                },
                {
                    "name": "marginBottom",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "number"
                },
                {
                    "name": "marginTop",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "number"
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string | undefined"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-paragraph',\n  templateUrl: './paragraph.component.html',\n  styleUrls: ['./paragraph.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent implements OnInit {\n  @Input() text: string | undefined;\n  @Input() isShowMore: boolean = false;\n  @Input() link: string = '';\n  @Input() marginTop: number = 0;\n  @Input() marginBottom: number = 0;\n  @Input() isAutoExpand: boolean;\n\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "p {\r\n\r\n}\r\n",
                    "styleUrl": "./paragraph.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 22
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p\r\n  [ngStyle]=\"{\r\n  'margin-block-start': marginTop + 'px',\r\n  'margin-block-end': marginBottom + 'px'\r\n  }\"\r\n>{{text}}\r\n  <app-see-more [link]=\"link\" [isAutoExpand]=\"isAutoExpand\" *ngIf=\"isShowMore\"></app-see-more>\r\n</p>\r\n"
        },
        {
            "name": "PostComponent",
            "id": "component-PostComponent-310b6419cb81b252ef695e6eb3427149",
            "file": "src/app/post/post/post.component.ts",
            "changeDetection": "ChangeDetectionStrategy.Default",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-post",
            "styleUrls": [
                "./post.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./post.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "commentData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CommentItemData[]",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "postData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PostListItemData",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "spaceData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SpaceListItemData | undefined",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "unsubscribe$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getCommentData",
                    "args": [
                        {
                            "name": "postId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "postId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPostId",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getSpaceData",
                    "args": [
                        {
                            "name": "spaceId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "spaceId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadData",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "SSRLoadData",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        130
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Inject,\n  OnDestroy,\n  OnInit,\n  PLATFORM_ID,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { LinkService } from '../../shared/services/link.service';\nimport { take } from 'rxjs/operators';\nimport { PostListItemData } from '../../core/models/post/post-list-item.model';\nimport { Subject } from 'rxjs';\nimport { SpaceListItemData } from '../../core/models/space/space-list-item.model';\nimport { Store } from '@ngrx/store';\nimport { AppState } from '../../state/state';\nimport { getPostsByIds, loadPostsSuccess } from '../../state/post/post.actions';\nimport { selectPostWithAllDetailsById } from '../../state/post/post.selectors';\nimport { selectSpaceById } from '../../state/space/space.selectors';\nimport { CommentItemData } from '../../core/types/comment-data.type';\nimport { selectCommentItemsData } from '../../state/reply-id/reply-id.selectors';\nimport { StoreService } from '../../state/store.service';\nimport { SSRLoadData } from '../../core/decorators/ssr-load-data.decorator.tw';\nimport { PostService } from '../services/post.service';\n\n@Component({\n  selector: 'app-post',\n  templateUrl: './post.component.html',\n  styleUrls: ['./post.component.scss'],\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class PostComponent implements OnInit, OnDestroy {\n  postData: PostListItemData;\n  spaceData: SpaceListItemData | undefined;\n  commentData: CommentItemData[] = [];\n\n  private unsubscribe$: Subject<void> = new Subject();\n\n  constructor(\n    private store: Store<AppState>,\n    private route: ActivatedRoute,\n    private linkService: LinkService,\n    private cd: ChangeDetectorRef,\n    private storeService: StoreService,\n    private postService: PostService,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  async ngOnInit() {\n    await this.loadData();\n  }\n\n  @SSRLoadData()\n  async loadData() {\n    const id = this.getPostId();\n\n    this.postData = await this.postService.getOrLoadPost(id);\n\n    this.spaceData = this.postData.spaceId\n      ? await this.getSpaceData(this.postData.spaceId)\n      : undefined;\n\n    this.commentData = await this.getCommentData(id);\n\n    this.cd.markForCheck();\n  }\n\n  private async getSpaceData(spaceId: string) {\n    return (this.spaceData = await this.store\n      .select(selectSpaceById(spaceId))\n      .pipe(take(1))\n      .toPromise());\n  }\n\n  private async getCommentData(postId: string) {\n    return (\n      (await this.store\n        .select(selectCommentItemsData(this.postData.id!))\n        .pipe(take(1))\n        .toPromise()) || []\n    );\n  }\n\n  private getPostId() {\n    const params = this.route.snapshot.params;\n    const slug = params['slug'];\n    return this.linkService.getPostIdFromLink(slug);\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribe$.next();\n    this.unsubscribe$.complete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".post-main-wp {\r\n  display: flex;\r\n  padding-bottom: 15px;\r\n\r\n  .post-data {\r\n    width: 100%;\r\n  }\r\n}\r\n\r\n.post-item-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: flex-start;\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.mat-card {\r\n  padding-bottom: 7px;\r\n}\r\n\r\n.post-image {\r\n  margin-top: 16px;\r\n}\r\n\r\n.action-panel-wp {\r\n  margin-top: 8px;\r\n}\r\n\r\n.comment-card {\r\n  padding-bottom: 16px;\r\n}\r\n",
                    "styleUrl": "./post.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "linkService",
                        "type": "LinkService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "storeService",
                        "type": "StoreService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postService",
                        "type": "PostService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "linkService",
                        "type": "LinkService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storeService",
                        "type": "StoreService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postService",
                        "type": "PostService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<ng-container *ngIf=\"postData\">\r\n  <section>\r\n    <mat-card>\r\n\r\n      <app-hidden-content *ngIf=\"postData.hidden && postData.isMyPost\" [type]=\"'post'\"></app-hidden-content>\r\n\r\n      <div class=\"post-main-wp\">\r\n        <div class=\"post-data\">\r\n          <div class=\"post-item-header\">\r\n\r\n            <app-post-info\r\n              [userName]=\"postData.ownerName\"\r\n              [spaceName]=\"postData.spaceName\"\r\n              [imageUrl]=\"postData.ownerImageUrl\"\r\n              [createdAtTime]=\"postData.createdAtTime\"\r\n              [ownerId]=\"postData.ownerId\"\r\n              [spaceLink]=\"postData.spaceLink\"\r\n            ></app-post-info>\r\n\r\n            <app-option-button></app-option-button>\r\n          </div>\r\n\r\n          <app-embed-video [videoUrl]=\"postData.link\"></app-embed-video>\r\n\r\n          <app-title type=\"large\" [text]=\"postData.title\"></app-title>\r\n\r\n          <div class=\"post-image mb-16\">\r\n            <app-post-image type=\"full\" [imageSrc]=\"postData.imageUrl\"></app-post-image>\r\n          </div>\r\n\r\n          <markdown class=\"markdown-body\" ngPreserveWhitespaces>\r\n            {{postData.body}}\r\n          </markdown>\r\n\r\n          <div>\r\n            <app-tag [tagName]=\"tag\" *ngFor=\"let tag of postData.tags\"></app-tag>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n\r\n      <mat-divider [inset]=\"true\"></mat-divider>\r\n\r\n      <div class=\"action-panel-wp\">\r\n        <app-action-panel\r\n          [isShowShare]=\"true\"\r\n          [isShowLabel]=\"true\"\r\n          [upvoteCount]=\"postData.upvotesCount\"\r\n          [downvoteCount]=\"postData.downvotesCount\"\r\n          [commentCount]=\"postData.repliesCount\"\r\n          [isDownvoteActive]=\"postData.downvoteActive\"\r\n          [isUpvoteActive]=\"postData.upvoteActive\"\r\n        >\r\n        </app-action-panel>\r\n      </div>\r\n\r\n\r\n    </mat-card>\r\n  </section>\r\n\r\n  <section>\r\n    <app-space-item [spaceItemData]=\"spaceData\"></app-space-item>\r\n  </section>\r\n\r\n  <section class=\"mt-16\">\r\n    <mat-card class=\"comment-card\">\r\n      <app-comments [commentListData]=\"commentData\"></app-comments>\r\n    </mat-card>\r\n  </section>\r\n</ng-container>\r\n\r\n"
        },
        {
            "name": "PostImageComponent",
            "id": "component-PostImageComponent-5dd65f7d463f6b3e7ea4ba778ceb120b",
            "file": "src/app/ui-lib/content/post-image/post-image.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-post-image",
            "styleUrls": [
                "./post-image.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./post-image.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "imageSrc",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string"
                },
                {
                    "name": "link",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string"
                },
                {
                    "name": "type",
                    "defaultValue": "'square'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "ImageType"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { ImageType } from '../../../core/types/image.type';\r\n\r\n@Component({\r\n  selector: 'app-post-image',\r\n  templateUrl: './post-image.component.html',\r\n  styleUrls: ['./post-image.component.scss'],\r\n})\r\nexport class PostImageComponent implements OnInit {\r\n  @Input() imageSrc: string = '';\r\n  @Input() link: string = '';\r\n  @Input() type: ImageType = 'square';\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".post-image {\r\n  width: 174px;\r\n  height: 174px;\r\n  margin-left: 16px;\r\n  border-radius: 4px;\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  background-position: center;\r\n  cursor: pointer;\r\n\r\n  &-full{\r\n    display: block;\r\n    width: 100%;\r\n    margin-top: 14px;\r\n    border-radius: 4px;\r\n  }\r\n\r\n  &-notification {\r\n    width: 46px;\r\n    height: 46px;\r\n    background-repeat: no-repeat;\r\n    background-size: cover;\r\n    background-position: center;\r\n    cursor: pointer;\r\n  }\r\n}\r\n",
                    "styleUrl": "./post-image.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"imageSrc\">\r\n  <ng-container [ngSwitch]=\"type\">\r\n    <ng-template ngSwitchCase=\"square\">\r\n      <a [routerLink]=\"link\">\r\n        <div class=\"post-image\"\r\n             [ngStyle]=\"{\r\n                'background-image':  'url(' + imageSrc +')'\r\n             }\"\r\n        ></div>\r\n      </a>\r\n    </ng-template>\r\n    <ng-template ngSwitchCase=\"notification\">\r\n      <a [routerLink]=\"link\">\r\n        <div class=\"post-image-notification\"\r\n             [ngStyle]=\"{\r\n                'background-image':  'url(' + imageSrc +')'\r\n             }\"\r\n        ></div>\r\n      </a>\r\n    </ng-template>\r\n    <ng-template ngSwitchCase=\"full\">\r\n      <a [routerLink]=\"link\">\r\n        <img class=\"post-image-full\" [src]=\"imageSrc\">\r\n      </a>\r\n    </ng-template>\r\n  </ng-container>\r\n</ng-container>\r\n\r\n\r\n"
        },
        {
            "name": "PostInfoComponent",
            "id": "component-PostInfoComponent-a401967ab81c1c01d5b62dd09d711afb",
            "file": "src/app/ui-lib/post-ui/post-info/post-info.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-post-info",
            "styleUrls": [
                "./post-info.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./post-info.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "createdAtTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "number"
                },
                {
                    "name": "imageUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string"
                },
                {
                    "name": "ownerId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string"
                },
                {
                    "name": "postLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string"
                },
                {
                    "name": "spaceLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string | undefined"
                },
                {
                    "name": "spaceName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string"
                },
                {
                    "name": "userName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-post-info',\r\n  templateUrl: './post-info.component.html',\r\n  styleUrls: ['./post-info.component.scss'],\r\n})\r\nexport class PostInfoComponent implements OnInit {\r\n  @Input() imageUrl: string;\r\n  @Input() userName: string;\r\n  @Input() spaceName: string;\r\n  @Input() createdAtTime: number;\r\n  @Input() ownerId: string;\r\n  @Input() spaceLink: string | undefined;\r\n  @Input() postLink: string;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n}\r\n\r\n.info {\r\n  font-size: 14px;\r\n  line-height: 20px;\r\n  letter-spacing: 0.25px;\r\n  color: var(--gray-dark);\r\n\r\n  &>*:first-child {\r\n    text-transform: capitalize;\r\n  }\r\n\r\n  a {\r\n    margin-right: 4px;\r\n    &:hover {\r\n      text-decoration: underline;\r\n      cursor: pointer;\r\n    }\r\n  }\r\n\r\n  span {\r\n    margin-right: 4px;\r\n  }\r\n}\r\n\r\n",
                    "styleUrl": "./post-info.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-avatar [jdentityValue]=\"ownerId\"\r\n            [src]=\"imageUrl\"\r\n></app-avatar>\r\n\r\n<app-column [margin]=\"'0 0 0 13px'\">\r\n\r\n  <app-title [type]=\"'small'\"\r\n             [link]=\"'/accounts/' + ownerId\"\r\n             [text]=\"userName || (ownerId | addressHidden)\"\r\n  ></app-title>\r\n\r\n  <app-row class=\"info\">\r\n\r\n    <a *ngIf=\"spaceName\" [routerLink]=\"spaceLink\">{{ spaceName }}</a>\r\n    <span *ngIf=\"spaceName\">·</span>\r\n    <a [routerLink]=\"postLink\">{{ createdAtTime | day }}</a>\r\n\r\n  </app-row>\r\n\r\n</app-column>\r\n\r\n"
        },
        {
            "name": "PostItemComponent",
            "id": "component-PostItemComponent-da31930229d1c5f7e336e2d45c17117f",
            "file": "src/app/ui-lib/post-ui/post-item/post-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-post-item",
            "styleUrls": [
                "./post-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./post-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "postItemData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "PostListItemData | null"
                },
                {
                    "name": "showActionPanel",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "commentData$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<CommentItemData[]>",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "deviceService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DeviceService",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isCommentOpen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "isHiddenPost",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "modalConfig",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogConfig",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "reactionModalData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReactionModalData",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "unsubscribe$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCommentButtonClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onViewReaction",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "prepareModalConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { PostListItemData } from '../../../core/models/post/post-list-item.model';\r\nimport { OnViewReaction } from '../../../core/interfaces/on-view-reaction';\r\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\r\nimport { VoteModalDialogComponent } from '../../../shared/modal-dialogs/vote-modal-dialog/vote-modal-dialog.component';\r\nimport { DeviceService } from '../../../shared/services/device.service';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { filter, take, takeUntil } from 'rxjs/operators';\r\nimport { getReplyIdsByParentPostId } from '../../../state/reply-id/reply-id.actions';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from '../../../state/state';\r\nimport { CommentItemData } from '../../../core/types/comment-data.type';\r\nimport { selectCommentItemsData } from '../../../state/reply-id/reply-id.selectors';\r\nimport { ReactionModalData } from '../../../core/types/dialog-modal-data.types';\r\n\r\n@Component({\r\n  selector: 'app-post-item',\r\n  templateUrl: './post-item.component.html',\r\n  styleUrls: ['./post-item.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PostItemComponent implements OnInit, OnDestroy, OnViewReaction {\r\n  @Input() postItemData: PostListItemData | null;\r\n  @Input() showActionPanel = true;\r\n\r\n  commentData$: Observable<CommentItemData[]>;\r\n  isCommentOpen: boolean;\r\n  reactionModalData: ReactionModalData;\r\n\r\n  isHiddenPost: boolean;\r\n\r\n  private unsubscribe$: Subject<void> = new Subject();\r\n  private modalConfig: MatDialogConfig = {};\r\n\r\n  constructor(\r\n    public dialog: MatDialog,\r\n    public deviceService: DeviceService,\r\n    private store: Store<AppState>\r\n  ) {}\r\n\r\n  onViewReaction(): void {\r\n    this.dialog.open(VoteModalDialogComponent, this.modalConfig);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.prepareModalConfig();\r\n\r\n    this.commentData$ = this.store\r\n      .select(selectCommentItemsData(this.postItemData?.id!))\r\n      .pipe(\r\n        filter((commentData) => commentData.length > 0),\r\n        take(1)\r\n      );\r\n\r\n    this.isHiddenPost =\r\n      (this.postItemData?.hidden && !this.postItemData?.isMyPost) || false;\r\n  }\r\n\r\n  onCommentButtonClick() {\r\n    if (!this.isCommentOpen) {\r\n      this.store.dispatch(\r\n        getReplyIdsByParentPostId({ id: this.postItemData?.id! })\r\n      );\r\n    }\r\n\r\n    this.isCommentOpen = !this.isCommentOpen;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    //check for storybook\r\n    if (typeof this.unsubscribe$ !== 'string') {\r\n      this.unsubscribe$?.next();\r\n      this.unsubscribe$?.complete();\r\n    }\r\n  }\r\n\r\n  private prepareModalConfig() {\r\n    this.reactionModalData = {\r\n      postId: this.postItemData?.id || '',\r\n      upvotesCount: this.postItemData?.upvotesCount || 0,\r\n      downvotesCount: this.postItemData?.downvotesCount || 0,\r\n    };\r\n\r\n    this.modalConfig.data = this.reactionModalData;\r\n\r\n    this.deviceService?.isMobile$\r\n      .pipe(takeUntil(this.unsubscribe$))\r\n      .subscribe((isMobile) => {\r\n        if (isMobile) {\r\n          this.modalConfig.width = '95%';\r\n          this.modalConfig.maxWidth = 'none';\r\n        } else {\r\n          this.modalConfig.width = '500px';\r\n          this.modalConfig.maxWidth = '80vh';\r\n        }\r\n      });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@media only screen and (max-width: 768px) {\r\n  .post-main-wp {\r\n    flex-direction: column;\r\n  }\r\n}\r\n",
                    "styleUrl": "./post-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "deviceService",
                        "type": "DeviceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "deviceService",
                        "type": "DeviceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "OnViewReaction"
            ],
            "templateData": "<ng-container *ngIf=\"postItemData && !isHiddenPost\">\r\n\r\n  <mat-card [style.padding-bottom]=\"showActionPanel ? '4px' : '16px'\">\r\n\r\n    <app-hidden-content *ngIf=\"postItemData.hidden && postItemData.isMyPost\" [type]=\"'post'\"></app-hidden-content>\r\n\r\n    <app-row [ngClass]=\"['post-main-wp']\">\r\n\r\n      <app-column class=\"w100\">\r\n\r\n        <app-row [v]=\"'start'\"\r\n                 [h]=\"'space-between'\"\r\n        >\r\n          <app-post-info [userName]=\"postItemData.ownerName\"\r\n                         [spaceName]=\"postItemData.spaceName\"\r\n                         [imageUrl]=\"postItemData.ownerImageUrl\"\r\n                         [createdAtTime]=\"postItemData.createdAtTime\"\r\n                         [ownerId]=\"postItemData.ownerId\"\r\n                         [postLink]=\"postItemData.postLink\"\r\n                         [spaceLink]=\"postItemData.spaceLink\"\r\n          ></app-post-info>\r\n\r\n          <app-option-button [type]=\"'post'\"\r\n                             [isContentHidden]=\"postItemData.hidden\"\r\n                             (onClickViewReaction)=\"onViewReaction()\"\r\n          ></app-option-button>\r\n\r\n        </app-row>\r\n\r\n        <app-embed-video [videoUrl]=\"postItemData.link\"></app-embed-video>\r\n\r\n        <app-title [text]=\"postItemData.title\"\r\n                   [link]=\"postItemData.postLink\"\r\n                   [style.margin-top]=\"'15px'\"\r\n        ></app-title>\r\n\r\n        <app-paragraph [marginTop]=\"5\"\r\n                       [link]=\"postItemData.postLink\"\r\n                       [text]=\"postItemData.summary\"\r\n                       [isShowMore]=\"postItemData.isShowMore\"\r\n        ></app-paragraph>\r\n\r\n      </app-column>\r\n\r\n      <app-post-image [link]=\"postItemData.postLink\"\r\n                      [type]=\"(deviceService.isMobile$ | async) ? 'full' : 'square'\"\r\n                      [imageSrc]=\"postItemData.imageUrl\"\r\n      ></app-post-image>\r\n\r\n    </app-row>\r\n\r\n    <mat-divider *ngIf=\"showActionPanel\"\r\n                 [style.margin]=\"'12px 0 4px 0'\"\r\n                 [inset]=\"true\"\r\n    ></mat-divider>\r\n\r\n    <app-action-panel [isShowComment]=\"true\"\r\n                      [upvoteCount]=\"postItemData.upvotesCount\"\r\n                      [downvoteCount]=\"postItemData.downvotesCount\"\r\n                      [commentCount]=\"postItemData.repliesCount\"\r\n                      [isUpvoteActive]=\"postItemData.upvoteActive\"\r\n                      [isDownvoteActive]=\"postItemData.downvoteActive\"\r\n                      [isShowShare]=\"true\"\r\n                      (commentClick)=\"onCommentButtonClick()\"\r\n                      *ngIf=\"showActionPanel\"\r\n    ></app-action-panel>\r\n\r\n    <ng-container *ngIf=\"isCommentOpen\">\r\n\r\n      <mat-divider [inset]=\"true\" [style.margin]=\"'4px 0 16px 0'\"></mat-divider>\r\n\r\n      <app-comments [commentListData]=\"commentData$ | async\"></app-comments>\r\n\r\n    </ng-container>\r\n\r\n  </mat-card>\r\n\r\n</ng-container>\r\n"
        },
        {
            "name": "PostListComponent",
            "id": "component-PostListComponent-ae7aea16e376de48aef263f68426809b",
            "file": "src/app/post/post-list/post-list.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-post-list",
            "styleUrls": [
                "./post-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./post-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ids",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string[] | null",
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "type",
                    "defaultValue": "'public'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "\"public\" | \"all\"",
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "action$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Actions",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "cd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "store",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Store<AppState>",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "isBlockInfinityScroll",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "isLoading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "listData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<T>",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "listDataIds",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "scrollDistance",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "scrollDownEvent$",
                    "defaultValue": "this.scrollDownEventSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "scrollDownEventSource",
                    "defaultValue": "new BehaviorSubject<ScrollProps>(\r\n    this.scrollProps\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "scrollProps",
                    "defaultValue": "new ScrollProps(20)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "unsubscribe$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "addUniqueDataToListDataArray",
                    "args": [
                        {
                            "name": "itemDictionary",
                            "type": "KeyValuePair<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "itemDictionary",
                            "type": "KeyValuePair<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "getScrollableData",
                    "args": [
                        {
                            "name": "dispatchAction",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selector",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selectAction",
                            "type": "ActionCreator",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dispatchAction",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selector",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selectAction",
                            "type": "ActionCreator",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "loadFinish",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "loadStart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "onScrollDown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "scrollEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "sliceIds",
                    "args": [
                        {
                            "name": "arr",
                            "type": "Array<string>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "props",
                            "type": "ScrollProps",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "arr",
                            "type": "Array<string>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "props",
                            "type": "ScrollProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "trackById",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Inject,\n  OnInit,\n  PLATFORM_ID,\n} from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { AppState } from '../../state/state';\nimport {\n  getPostsByIds,\n  loadPostsSuccess,\n  upsertPosts,\n} from '../../state/post/post.actions';\nimport { selectPostsWithAllDetailsByIds } from '../../state/post/post.selectors';\nimport { PostListItemData } from '../../core/models/post/post-list-item.model';\nimport { isPlatformBrowser } from '@angular/common';\nimport { BaseInfinityScrollComponent } from '../../core/base-component/base-infinity-scroll.component';\nimport { Actions } from '@ngrx/effects';\n\n@Component({\n  selector: 'app-post-list',\n  templateUrl: './post-list.component.html',\n  styleUrls: ['./post-list.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PostListComponent\n  extends BaseInfinityScrollComponent<PostListItemData>\n  implements OnInit\n{\n  constructor(\n    public store: Store<AppState>,\n    public cd: ChangeDetectorRef,\n    public action$: Actions,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {\n    super(store, cd, action$);\n  }\n\n  ngOnInit(): void {\n    if (isPlatformBrowser(this.platformId)) {\n      this.getScrollableData(\n        getPostsByIds,\n        selectPostsWithAllDetailsByIds,\n        loadPostsSuccess\n      );\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".post-item-wp {\r\n  margin-top: 16px;\r\n}\r\n\r\n.viewport {\r\n  width: 100%;\r\n}\r\n",
                    "styleUrl": "./post-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseInfinityScrollComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container>\r\n  <div\r\n    infinite-scroll\r\n    [infiniteScrollThrottle]=\"50\"\r\n    [infiniteScrollDistance]=\"scrollDistance\"\r\n    (scrolled)=\"onScrollDown()\"\r\n    [infiniteScrollDisabled]=\"false\"\r\n    [infiniteScrollDisabled]=\"isBlockInfinityScroll\"\r\n  >\r\n    <div class=\"post-item-wp\" *ngFor=\"let postData of listData; trackBy: trackById\">\r\n      <ng-container *ngIf=\"!postData.isSharedPost\">\r\n        <app-post-item [postItemData]=\"postData\"></app-post-item>\r\n      </ng-container>\r\n      <ng-container *ngIf=\"postData.isSharedPost\">\r\n        <app-shared-post-item [postItemData]=\"postData\"></app-shared-post-item>\r\n      </ng-container>\r\n    </div>\r\n\r\n    <app-spinner [showSpinner]=\"isLoading\" [text]=\"'Loading more posts...'\"></app-spinner>\r\n  </div>\r\n</ng-container>\r\n"
        },
        {
            "name": "ProfileButtonComponent",
            "id": "component-ProfileButtonComponent-128f5edbe5105a709f51500b406a9753",
            "file": "src/app/ui-lib/buttons/profile-button/profile-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-profile-button",
            "styleUrls": [
                "./profile-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./profile-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "accountService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccountService",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "accountStatus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ACCOUNT_STATUS",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "isAuthorized",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "profileData$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ProfileComponentData | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "sideNavService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SideNavService",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "signInModalData",
                    "defaultValue": "{\r\n    status: ACCOUNT_STATUS.INIT,\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SignInModalData",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSignInBtnClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { SideNavService } from '../../../shared/services/side-nav.service';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from '../../../state/state';\r\nimport { ProfileComponentData } from '../../../core/types/profile-component-data.type';\r\nimport { Observable } from 'rxjs';\r\nimport { selectMyAccountProfileData } from '../../../state/profile/profile.selectors';\r\nimport {\r\n  ACCOUNT_STATUS,\r\n  AccountService,\r\n} from '../../../shared/services/account.service';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { SignInModalDialogComponent } from '../../../shared/modal-dialogs/sign-in-modal-dialog/sign-in-modal-dialog.component';\r\nimport { SignInModalData } from '../../../core/types/dialog-modal-data.types';\r\n\r\n@Component({\r\n  selector: 'app-profile-button',\r\n  templateUrl: './profile-button.component.html',\r\n  styleUrls: ['./profile-button.component.scss'],\r\n})\r\nexport class ProfileButtonComponent implements OnInit {\r\n  constructor(\r\n    public sideNavService: SideNavService,\r\n    private store: Store<AppState>,\r\n    public accountService: AccountService,\r\n    private dialog: MatDialog\r\n  ) {}\r\n\r\n  isAuthorized: boolean = false;\r\n  accountStatus: ACCOUNT_STATUS;\r\n  signInModalData: SignInModalData = {\r\n    status: ACCOUNT_STATUS.INIT,\r\n  };\r\n\r\n  profileData$: Observable<ProfileComponentData | undefined>;\r\n\r\n  ngOnInit(): void {\r\n    this.profileData$ = this.store.select(selectMyAccountProfileData);\r\n\r\n    this.accountService.status$.subscribe((status) => {\r\n      this.signInModalData.status = status;\r\n    });\r\n\r\n    this.accountService.getAccountsData().subscribe((accountData) => {\r\n      this.signInModalData.accounts = accountData;\r\n    });\r\n\r\n    this.accountService.currentAccount$.subscribe(\r\n      (currentAccount) => (this.isAuthorized = !!currentAccount)\r\n    );\r\n  }\r\n\r\n  onSignInBtnClick() {\r\n    this.dialog.open(SignInModalDialogComponent, {\r\n      maxWidth: '430px',\r\n      data: this.signInModalData,\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".profile-button-wp {\r\n  display: flex;\r\n  align-items: center;\r\n  height: 100%;\r\n  cursor: pointer;\r\n}\r\n\r\n.sign-in-btn {\r\n  font-size: 17px;\r\n}\r\n.mat-stroked-button {\r\n  border: 1px solid #EB2F96 !important;\r\n}\r\n",
                    "styleUrl": "./profile-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sideNavService",
                        "type": "SideNavService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "sideNavService",
                        "type": "SideNavService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"isAuthorized && (profileData$ | async) as profileData\">\r\n\r\n  <div (click)=\"sideNavService.openAccountSideNav()\"\r\n       class=\"profile-button-wp\"\r\n  >\r\n    <app-avatar [src]=\"profileData.avatar\"\r\n                [jdentityValue]=\"profileData.address\"\r\n                [size]=\"30\"\r\n    ></app-avatar>\r\n\r\n    <app-column [margin]=\"'0 0 0 10px'\">\r\n\r\n      <span>{{profileData.name || (profileData.address | addressHidden)}}</span>\r\n\r\n      <app-tokens type=\"primary\" [tokens]=\"accountService.balance$ | async\"></app-tokens>\r\n\r\n    </app-column>\r\n\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-container *ngIf=\"!isAuthorized\">\r\n\r\n  <button mat-stroked-button\r\n          (click)=\"onSignInBtnClick()\"\r\n          class=\"sign-in-btn\"\r\n          color=\"primary\">\r\n    Sign in\r\n  </button>\r\n\r\n</ng-container>\r\n"
        },
        {
            "name": "ProfileComponent",
            "id": "component-ProfileComponent-70a0c4620e41703894d7bd6d87d2c380",
            "file": "src/app/account/profile/profile.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-profile",
            "styleUrls": [
                "./profile.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./profile.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeTab",
                    "defaultValue": "this.tabLinks[0]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "device",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DeviceService",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "postIds",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "profileData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProfileComponentData | undefined",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "spaceIds",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "tabLinks",
                    "defaultValue": "[\n    { tabName: 'posts' },\n    { tabName: 'spaces' },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TabLinkData[]",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tokens",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "methodsClass": [
                {
                    "name": "clearIds",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadProfileData",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onTabClick",
                    "args": [
                        {
                            "name": "tabData",
                            "type": "TabLinkData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tabData",
                            "type": "TabLinkData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { TabLinkData } from '../../core/models/tab-link-data.model';\nimport { DeviceService } from '../../shared/services/device.service';\nimport {\n  loadProfile,\n  saveProfilesSuccess,\n} from '../../state/profile/profile.actions';\nimport { ActivatedRoute } from '@angular/router';\nimport { map, take, takeUntil } from 'rxjs/operators';\nimport { selectProfileDataById } from '../../state/profile/profile.selectors';\nimport { Subject } from 'rxjs';\nimport { ProfileComponentData } from '../../core/types/profile-component-data.type';\nimport { SpaceService } from '../../space/services/space.service';\nimport { PostService } from '../../post/services/post.service';\nimport { AccountService } from '../../shared/services/account.service';\nimport { StoreService } from '../../state/store.service';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProfileComponent implements OnInit, OnDestroy {\n  public tabLinks: TabLinkData[] = [\n    { tabName: 'posts' },\n    { tabName: 'spaces' },\n  ];\n\n  activeTab = this.tabLinks[0];\n  spaceIds: string[] = [];\n  postIds: string[] = [];\n  tokens: string;\n  profileData: ProfileComponentData | undefined;\n\n  private destroy$ = new Subject<void>();\n\n  constructor(\n    public device: DeviceService,\n    private route: ActivatedRoute,\n    private spaceService: SpaceService,\n    private postService: PostService,\n    private cd: ChangeDetectorRef,\n    private accountService: AccountService,\n    private storeService: StoreService\n  ) {}\n\n  ngOnInit(): void {\n    this.route.paramMap\n      .pipe(\n        map((params) => params.get('userId') as string),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((userId) => {\n        this.loadProfileData(userId).then();\n      });\n  }\n\n  private async loadProfileData(userId: string) {\n    this.profileData = await this.storeService.getOrLoadEntities(\n      selectProfileDataById,\n      loadProfile,\n      saveProfilesSuccess,\n      userId,\n      { id: userId }\n    );\n\n    const address = this.profileData?.address!;\n\n    this.tokens = await this.accountService.loadFormattedBalance(address);\n\n    this.clearIds();\n\n    this.spaceIds = await this.spaceService.getSpaceIdsByAccount(address);\n\n    this.postIds = await this.postService\n      .getPostIdsBySpaceIds(this.spaceIds)\n      .pipe(take(1))\n      .toPromise();\n\n    this.cd.markForCheck();\n  }\n\n  onTabClick(tabData: TabLinkData) {\n    this.activeTab = tabData;\n    this.cd.markForCheck();\n  }\n\n  clearIds() {\n    this.postIds = [];\n    this.spaceIds = [];\n    this.cd.detectChanges();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".profile-wp {\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n\r\n  .avatar-wp {\r\n    height: fit-content;\r\n  }\r\n\r\n  .profile-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: flex-start;\r\n  }\r\n\r\n  .profile-info-wp {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n    width: 100%;\r\n    margin-top: 11px;\r\n\r\n    & > * {\r\n      padding-bottom: 16px;\r\n    }\r\n\r\n    app-paragraph {\r\n      padding-bottom: 12px;\r\n    }\r\n\r\n    .follower-info-wp {\r\n      font-weight: 500;\r\n      letter-spacing: 0.25px;\r\n      & > span {\r\n        padding-right: 12px;\r\n\r\n        span {\r\n          padding-right: 4px;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  .buttons-wp {\r\n    gap: 16px;\r\n\r\n    &>* {\r\n      flex: 1;\r\n    }\r\n  }\r\n\r\n  .account-info-wp {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 14px;\r\n\r\n    app-qr-button {\r\n      margin-left: 52px;\r\n      width: 20px;\r\n      margin-top: -3px;\r\n    }\r\n\r\n    &>div {\r\n      display: flex;\r\n\r\n      &>mat-icon {\r\n\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n::ng-deep {\r\n  .mat-tab-link {\r\n    width: 50% !important;\r\n  }\r\n}\r\n\r\napp-qr-button {\r\n  margin-left: 52px;\r\n  width: 20px;\r\n  margin-top: -3px;\r\n}\r\n\r\n.mat-card {\r\n  padding-bottom: 0;\r\n  border-bottom-left-radius: 1px;\r\n  border-bottom-right-radius: 1px;\r\n}\r\n\r\n.tabs-wp {\r\n  width: calc(100% + 32px);\r\n  box-sizing: border-box;\r\n  margin: 0 -16px;\r\n\r\n  ::ng-deep {\r\n    .mat-tab-link {\r\n      font-size: 14px;\r\n    }\r\n\r\n    .mat-tab-link-container {\r\n      z-index: 0;\r\n    }\r\n  }\r\n}\r\n\r\n.buttons-wp {\r\n  margin: 22px 0 16px;\r\n  gap: 16px;\r\n\r\n  &>* {\r\n    flex: 1;\r\n  }\r\n}\r\n",
                    "styleUrl": "./profile.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "device",
                        "type": "DeviceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "spaceService",
                        "type": "SpaceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postService",
                        "type": "PostService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "storeService",
                        "type": "StoreService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "device",
                        "type": "DeviceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "spaceService",
                        "type": "SpaceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postService",
                        "type": "PostService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storeService",
                        "type": "StoreService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<ng-container *ngIf=\"profileData\">\r\n  <mat-card>\r\n\r\n      <app-column class=\"w100\">\r\n\r\n        <app-row>\r\n          <app-profile-info [address]=\"profileData.address\"\r\n                            [profileName]=\"profileData.name\"\r\n                            [avatarSrc]=\"profileData.avatar\"\r\n                            [followersCount]=\"profileData.followersCount\"\r\n                            [followingCount]=\"profileData.followingCount\"\r\n                            [type]=\"(device.isMobile$ | async) ? 'small' : 'medium'\"\r\n                            class=\"w100\"\r\n          ></app-profile-info>\r\n\r\n          <app-option-button></app-option-button>\r\n        </app-row>\r\n\r\n        <app-column [margin]=\"'14px 0 0 0'\">\r\n\r\n          <app-paragraph [text]=\"profileData.summary\"></app-paragraph>\r\n\r\n          <app-row [margin]=\"'10px 0 8px'\">\r\n\r\n            <app-address size=\"medium\"\r\n                         [showIcon]=\"true\"\r\n                         [showCopyButton]=\"true\"\r\n                         [address]=\"profileData.address\"\r\n            ></app-address>\r\n\r\n            <app-qr-button [address]=\"profileData.address\"></app-qr-button>\r\n\r\n          </app-row>\r\n\r\n          <app-tokens size=\"medium\" [tokens]=\"tokens\" [showIcon]=\"true\"></app-tokens>\r\n\r\n\r\n          <app-row class=\"buttons-wp w100\">\r\n\r\n            <app-send-tokens-button width=\"full\"></app-send-tokens-button>\r\n            <app-follow-button size=\"large\" width=\"full\"></app-follow-button>\r\n\r\n          </app-row>\r\n\r\n        </app-column>\r\n      </app-column>\r\n\r\n      <mat-divider [inset]=\"true\"></mat-divider>\r\n\r\n      <div class=\"tabs-wp\">\r\n        <app-tabs (tabClick)=\"onTabClick($event)\"\r\n                  [activeLink]=\"activeTab\"\r\n                  [tabLinks]=\"tabLinks\"\r\n        ></app-tabs>\r\n      </div>\r\n  </mat-card>\r\n\r\n    <ng-container *ngIf=\"activeTab.tabName === 'posts'\">\r\n      <ng-container *ngIf=\"postIds && postIds.length > 0; else noPost\">\r\n        <app-post-list [ids]=\"postIds\"></app-post-list>\r\n      </ng-container>\r\n\r\n      <ng-template #noPost>\r\n        <app-no-content [text]=\"'No posts yet'\"></app-no-content>\r\n      </ng-template>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"activeTab.tabName === 'spaces'\">\r\n      <ng-container *ngIf=\"spaceIds && spaceIds.length > 0; else noSpaces\">\r\n        <app-space-list [ids]=\"spaceIds\"></app-space-list>\r\n      </ng-container>\r\n\r\n      <ng-template #noSpaces>\r\n        <app-no-content [text]=\"'No spaces yet'\"></app-no-content>\r\n      </ng-template>\r\n    </ng-container>\r\n\r\n</ng-container>\r\n\r\n<ng-container *ngIf=\"!profileData\">\r\n  <app-spinner [showSpinner]=\"true\"></app-spinner>\r\n</ng-container>\r\n"
        },
        {
            "name": "ProfileInfoComponent",
            "id": "component-ProfileInfoComponent-e79cc053da15a36113b2658d97abe9f7",
            "file": "src/app/ui-lib/profile/profile-info/profile-info.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-profile-info",
            "styleUrls": [
                "./profile-info.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./profile-info.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "address",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string"
                },
                {
                    "name": "avatarSrc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string | undefined"
                },
                {
                    "name": "followersCount",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "number"
                },
                {
                    "name": "followingCount",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "number"
                },
                {
                    "name": "link",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string"
                },
                {
                    "name": "profileId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string"
                },
                {
                    "name": "profileName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string | undefined"
                },
                {
                    "name": "type",
                    "defaultValue": "'small'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "\"small\" | \"medium\""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "connectionModalData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConnectionModalData",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "deviceService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DeviceService",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "modalConfig",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogConfig",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "unsubscribe$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openConnectionDialog",
                    "args": [
                        {
                            "name": "activeTab",
                            "type": "\"followers\" | \"following\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "activeTab",
                            "type": "\"followers\" | \"following\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { DeviceService } from '../../../shared/services/device.service';\r\nimport { Subject } from 'rxjs';\r\nimport { ConnectionsModalDialogComponent } from '../../../shared/modal-dialogs/connections-modal-dialog/connections-modal-dialog.component';\r\nimport { ConnectionModalData } from '../../../core/types/dialog-modal-data.types';\r\n\r\n@Component({\r\n  selector: 'app-profile-info',\r\n  templateUrl: './profile-info.component.html',\r\n  styleUrls: ['./profile-info.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ProfileInfoComponent implements OnInit, OnDestroy {\r\n  private unsubscribe$: Subject<void> = new Subject();\r\n  @Input() avatarSrc: string | undefined;\r\n  @Input() profileName: string | undefined;\r\n  @Input() type: 'small' | 'medium' = 'small';\r\n  @Input() followingCount = 0;\r\n  @Input() followersCount = 0;\r\n  @Input() profileId = '';\r\n  @Input() link = '';\r\n  @Input() address = '';\r\n\r\n  constructor(public dialog: MatDialog, public deviceService: DeviceService) {}\r\n\r\n  connectionModalData: ConnectionModalData;\r\n  private modalConfig: MatDialogConfig = {};\r\n\r\n  ngOnInit(): void {\r\n    this.deviceService.isMobile$\r\n      .pipe(takeUntil(this.unsubscribe$))\r\n      .subscribe((isMobile) => {\r\n        this.modalConfig.data = this.connectionModalData;\r\n        if (isMobile) {\r\n          this.modalConfig.width = '95%';\r\n          this.modalConfig.maxWidth = 'none';\r\n        } else {\r\n          this.modalConfig.width = '500px';\r\n          this.modalConfig.maxWidth = '80vh';\r\n        }\r\n      });\r\n  }\r\n\r\n  openConnectionDialog(activeTab: 'followers' | 'following') {\r\n    this.connectionModalData = {\r\n      activeTab,\r\n      address: this.address,\r\n      followerCount: this.followersCount,\r\n      followingCount: this.followingCount,\r\n    };\r\n\r\n    this.modalConfig.data = this.connectionModalData;\r\n\r\n    this.dialog.open(ConnectionsModalDialogComponent, this.modalConfig);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    //TODO: fix storybook bug\r\n    if (typeof this.unsubscribe$ !== 'string') {\r\n      this.unsubscribe$?.next();\r\n      this.unsubscribe$?.complete();\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".profile-info-wp {\r\n  display: flex;\r\n  &>div {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n    margin-left: 13px;\r\n  }\r\n}\r\n\r\n.profile-name-wp {\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  mat-icon {\r\n    width: 16px;\r\n    height: 16px;\r\n  }\r\n}\r\n\r\n.small {\r\n  font-size: 14px;\r\n}\r\n\r\n.medium {\r\n  font-size: 16px;\r\n}\r\n\r\n.profile-stats-wp {\r\n  margin-top: 4px;\r\n\r\n  &>span {\r\n    margin-right: 8px;\r\n\r\n    &:hover {\r\n      text-decoration: underline;\r\n      cursor: pointer;\r\n    }\r\n\r\n    strong {\r\n      margin-right: 4px;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./profile-info.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "deviceService",
                        "type": "DeviceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "deviceService",
                        "type": "DeviceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"profile-info-wp\">\r\n  <app-avatar\r\n    [src]=\"avatarSrc\"\r\n    [size]=\"type === 'small' ? 40 : 46\"\r\n    [name]=\"profileName || (address | addressHidden )\"\r\n    [jdentityValue]=\"address\"\r\n  ></app-avatar>\r\n  <div>\r\n    <div class=\"profile-name-wp\">\r\n      <app-title\r\n        [text]=\"profileName || (address | addressHidden)\"\r\n        [type]=\"'medium'\"\r\n        [link]=\"'/accounts/' + address\"\r\n      >\r\n      </app-title>\r\n    </div>\r\n\r\n    <div class=\"profile-stats-wp\" [ngClass]=\"type\">\r\n      <span (click)=\"openConnectionDialog('following')\">\r\n        <strong class=\"count\">{{followingCount | numeral}}</strong>\r\n        <span>{{'Following'}}</span>\r\n      </span>\r\n      <span (click)=\"openConnectionDialog('followers')\">\r\n        <strong class=\"count\">{{followersCount | numeral}}</strong>\r\n        <span>{{followersCount | pluralize: 'Follower'}}</span>\r\n      </span>\r\n    </div>\r\n\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "QrButtonComponent",
            "id": "component-QrButtonComponent-387d9920b1d0ab27ecaf7746d03fab81",
            "file": "src/app/ui-lib/buttons/qr-button/qr-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-qr-button",
            "styleUrls": [
                "./qr-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./qr-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { QrModalDialogComponent } from '../../../shared/modal-dialogs/qr-modal-dialog/qr-modal-dialog.component';\n\n@Component({\n  selector: 'app-qr-button',\n  templateUrl: './qr-button.component.html',\n  styleUrls: ['./qr-button.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class QrButtonComponent implements OnInit {\n  @Input() address: string;\n  constructor(private dialog: MatDialog) {}\n\n  ngOnInit(): void {}\n\n  onClick() {\n    this.dialog.open(QrModalDialogComponent, {\n      data: this.address,\n      maxWidth: '328px',\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-icon {\r\n  width: 16px;\r\n}\r\n\r\nbutton {\r\n  width: 30px;\r\n  height: 30px;\r\n  line-height: 30px;\r\n}\r\n",
                    "styleUrl": "./qr-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<button (click)=\"onClick()\" mat-icon-button>\n  <mat-icon svgIcon=\"qr-icon\"></mat-icon>\n</button>\n"
        },
        {
            "name": "QrModalDialogComponent",
            "id": "component-QrModalDialogComponent-7ec5e6b7f41254ec1ad5b5edefb23053",
            "file": "src/app/shared/modal-dialogs/qr-modal-dialog/qr-modal-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-qr-modal-dialog",
            "styleUrls": [
                "./qr-modal-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./qr-modal-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<QrModalDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCopy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { PostListItemData } from '../../../core/models/post/post-list-item.model';\nimport { SpaceListItemData } from '../../../core/models/space/space-list-item.model';\n\n@Component({\n  selector: 'app-qr-modal-dialog',\n  templateUrl: './qr-modal-dialog.component.html',\n  styleUrls: ['./qr-modal-dialog.component.scss'],\n})\nexport class QrModalDialogComponent implements OnInit {\n  constructor(\n    public dialogRef: MatDialogRef<QrModalDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: string,\n    private _snackBar: MatSnackBar\n  ) {}\n\n  ngOnInit(): void {}\n\n  onCopy() {\n    this._snackBar.open('Address copied!', 'Ok', {\n      horizontalPosition: 'start',\n      verticalPosition: 'bottom',\n      duration: 1000,\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".modal-wp {\r\n  padding: 16px;\r\n\r\n  h2 {\r\n    line-height: 0;\r\n  }\r\n\r\n  .modal-body-qr {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n  }\r\n\r\n  .modal-header-qr {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    margin-top: -10px;\r\n  }\r\n\r\n  .close-btn {\r\n    margin-right: -5px;\r\n  }\r\n\r\n  .address-wp {\r\n    display: flex;\r\n\r\n    .address-text {\r\n      font-weight: 500;\r\n      font-size: 14px;\r\n      word-break: break-all;\r\n      text-align: center;\r\n    }\r\n  }\r\n\r\n  .button-wp {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    gap: 16px;\r\n    margin-top: 16px;\r\n\r\n    button {\r\n      width: 100%;\r\n      font-size: 17px;\r\n    }\r\n\r\n    button[mat-stroked-button] {\r\n      color: #EB2F96;\r\n    }\r\n\r\n    button[mat-flat-button] {\r\n\r\n      mat-icon {\r\n        width: 16px;\r\n        margin-right: 12px;\r\n      }\r\n    }\r\n  }\r\n\r\n  .mat-stroked-button {\r\n    border: 1px solid #EB2F96 !important;\r\n\r\n  }\r\n}\r\n",
                    "styleUrl": "./qr-modal-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<QrModalDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<QrModalDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"modal-wp\">\n  <div class=\"modal-header-qr\">\n    <h2 class=\"title-medium\">Account address</h2>\n    <app-close-button class=\"close-btn\" (onClose)=\"dialogRef.close()\"></app-close-button>\n  </div>\n  <div class=\"modal-body-qr\">\n    <qrcode [qrdata]=\"data\"\n            [width]=\"256\"\n            [errorCorrectionLevel]=\"'M'\">\n    </qrcode>\n    <div class=\"address-wp\">\n      <span class=\"address-text\">{{data}}</span>\n    </div>\n\n  </div>\n\n  <div class=\"button-wp\">\n    <button mat-stroked-button (click)=\"dialogRef.close()\">Close</button>\n    <button\n      mat-flat-button\n      [cdkCopyToClipboard]=\"data\"\n      (click)=\"onCopy()\"\n      color=\"primary\">\n      <mat-icon svgIcon=\"copy-white-icon\"></mat-icon>\n      <span>Copy</span>\n    </button>\n  </div>\n\n\n</div>\n"
        },
        {
            "name": "ReplyButtonComponent",
            "id": "component-ReplyButtonComponent-d88d2387d01b5d088cb041a14e82cbab",
            "file": "src/app/ui-lib/buttons/reply-button/reply-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-reply-button",
            "styleUrls": [
                "./reply-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./reply-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isShowLabel",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "click",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-reply-button',\r\n  templateUrl: './reply-button.component.html',\r\n  styleUrls: ['./reply-button.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ReplyButtonComponent {\r\n  @Input() isShowLabel: boolean = false;\r\n  @Output() click = new EventEmitter();\r\n\r\n  onClick(event: any) {\r\n    event.stopPropagation();\r\n    this.click.emit();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n",
                    "styleUrl": "./reply-button.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<app-icon-button [buttonSize]=\"32\"\r\n                 [iconSize]=\"22\"\r\n                 [iconName]=\"'reply-icon'\"\r\n                 (click)=\"onClick($event)\"\r\n></app-icon-button>\r\n\r\n<span [ngClass]=\"['action-panel-label']\"\r\n      *ngIf=\"isShowLabel\"\r\n>Reply</span>\r\n"
        },
        {
            "name": "ReplyCommentsComponent",
            "id": "component-ReplyCommentsComponent-346450c8d3807e80af3a71c6a4ee3880",
            "file": "src/app/ui-lib/comment/reply-comments/reply-comments.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-reply-comments",
            "styleUrls": [
                "./reply-comments.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./reply-comments.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "replyCommentCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "number"
                },
                {
                    "name": "rootPostId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "commentData$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<CommentItemData[]>",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "isShowReplyComments",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "expandMoreReplies",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { selectCommentItemsData } from '../../../state/reply-id/reply-id.selectors';\nimport { Observable } from 'rxjs';\nimport { CommentItemData } from '../../../core/types/comment-data.type';\nimport { Store } from '@ngrx/store';\nimport { AppState } from '../../../state/state';\nimport { getReplyIdsByParentPostId } from '../../../state/reply-id/reply-id.actions';\nimport { filter, first, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-reply-comments',\n  templateUrl: './reply-comments.component.html',\n  styleUrls: ['./reply-comments.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReplyCommentsComponent implements OnInit {\n  @Input() replyCommentCount: number;\n  @Input() rootPostId: string;\n\n  isShowReplyComments = false;\n\n  commentData$: Observable<CommentItemData[]>;\n\n  constructor(private store: Store<AppState>) {}\n\n  ngOnInit(): void {\n    this.commentData$ = this.store\n      .select(selectCommentItemsData(this.rootPostId))\n      .pipe(\n        filter((commentData) => commentData.length > 0),\n        first()\n      );\n  }\n\n  expandMoreReplies() {\n    this.isShowReplyComments = !this.isShowReplyComments;\n    console.log(this.isShowReplyComments);\n    if (this.isShowReplyComments) {\n      this.store.dispatch(getReplyIdsByParentPostId({ id: this.rootPostId }));\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".reply-comment-title {\r\n  margin-left: 9px;\r\n  display: flex;\r\n  align-items: center;\r\n  color: #F759AB;\r\n\r\n  mat-icon {\r\n    margin-left: 3px;\r\n  }\r\n\r\n .reply-count {\r\n   font-weight: 500;\r\n   font-size: 14px;\r\n   line-height: 24px;\r\n   letter-spacing: 0.1px;\r\n   cursor: pointer;\r\n }\r\n}\r\n\r\n.rotate-up {\r\n  animation: rotate-up 0.3s ease-out;\r\n  transform: rotate(180deg);\r\n}\r\n\r\n.rotate-down {\r\n  animation: rotate-down 0.3s ease-out;\r\n  transform: rotate(0deg);\r\n}\r\n\r\n@keyframes rotate-up {\r\n  0% {\r\n    transform: rotate(0deg);\r\n  }\r\n\r\n  100% {\r\n    transform: rotate(180deg);\r\n  }\r\n}\r\n\r\n@keyframes rotate-down {\r\n  0% {\r\n    transform: rotate(180deg);\r\n  }\r\n\r\n  100% {\r\n    transform: rotate(0deg);\r\n  }\r\n}\r\n",
                    "styleUrl": "./reply-comments.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"replyCommentCount > 0\">\n\n  <div class=\"reply-comment-title\"\n       [style.margin-bottom]=\"isShowReplyComments ? '0' : '9px'\"\n  >\n    <a class=\"reply-count\"\n       (click)=\"expandMoreReplies()\" >\n      {{(isShowReplyComments ?  'Hide ' : 'Show ') + replyCommentCount + ' ' + (replyCommentCount | pluralize : 'reply')}}\n    </a>\n    <mat-icon svgIcon=\"arrow-icon\"\n              [style.width]=\"'10px'\"\n              [ngClass]=\"{ 'rotate-up': isShowReplyComments, 'rotate-down': !isShowReplyComments }\"\n    ></mat-icon>\n  </div>\n\n  <ng-container *ngIf=\"isShowReplyComments\">\n    <ng-container *ngIf=\"(commentData$ | async) as commentData; else loader\"></ng-container>\n      <ng-container *ngFor=\"let commentItem of (commentData$ | async)\">\n        <app-comment-message [commentData]=\"commentItem\"></app-comment-message>\n      </ng-container>\n\n      <ng-template #loader>\n        <app-spinner [showSpinner]=\"true\"></app-spinner>\n      </ng-template>\n  </ng-container>\n\n</ng-container>\n"
        },
        {
            "name": "RowComponent",
            "id": "component-RowComponent-4c5b69c39d93df4f011b4d3b163d1a3f",
            "file": "src/app/ui-lib/containers/row/row.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-row",
            "styleUrls": [
                "./row.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./row.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "h",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "",
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                },
                {
                    "name": "margin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                },
                {
                    "name": "padding",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                },
                {
                    "name": "v",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "",
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_margin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.margin'"
                        }
                    ],
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                },
                {
                    "name": "_padding",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.padding'"
                        }
                    ],
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                },
                {
                    "name": "alignItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.align-items'"
                        }
                    ],
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                },
                {
                    "name": "flex",
                    "defaultValue": "'flex'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.display'"
                        }
                    ],
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                },
                {
                    "name": "justifyContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.justify-content'"
                        }
                    ],
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "style.align-items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string | undefined",
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                },
                {
                    "name": "style.display",
                    "defaultValue": "'flex'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "string",
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                },
                {
                    "name": "style.justify-content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string | undefined",
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                },
                {
                    "name": "style.margin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "string | undefined",
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                },
                {
                    "name": "style.padding",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "string | undefined",
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\nimport { BoxComponent } from '../../../core/base-component/box.component';\n\n@Component({\n  selector: 'app-row',\n  templateUrl: './row.component.html',\n  styleUrls: ['./row.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RowComponent extends BoxComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n}\r\n",
                    "styleUrl": "./row.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "BoxComponent",
            "templateData": "<ng-content></ng-content>\n\n"
        },
        {
            "name": "ScrollComponent",
            "id": "component-ScrollComponent-b3d19cff2e39273505cdfebde6470f9b",
            "file": "src/app/ui-lib/containers/scroll/scroll.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-scroll",
            "styleUrls": [
                "./scroll.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./scroll.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.height'"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "style.height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, HostBinding, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-scroll',\n  templateUrl: './scroll.component.html',\n  styleUrls: ['./scroll.component.scss'],\n})\nexport class ScrollComponent {\n  @Input() set height(value: string) {\n    this._height = value;\n  }\n\n  @HostBinding('style.height') _height: string;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  overflow-y: auto;\r\n\r\n  &::-webkit-scrollbar {\r\n    margin-top: 20px;\r\n    width: 7px;\r\n  }\r\n\r\n  &::-webkit-scrollbar-track {\r\n    background: transparent;\r\n\r\n    //margin-top: 16px;\r\n  }\r\n\r\n  &::-webkit-scrollbar-thumb {\r\n    background: #C1C1C1;\r\n    border-radius: 18px;\r\n  }\r\n\r\n  &::-webkit-scrollbar-thumb:hover {\r\n    background: #b6b6b6;\r\n  }\r\n}\r\n",
                    "styleUrl": "./scroll.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "height": {
                    "name": "height",
                    "setSignature": {
                        "name": "height",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 9,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<ng-content></ng-content>\n"
        },
        {
            "name": "SeeMoreComponent",
            "id": "component-SeeMoreComponent-c31e4cca1dc8db7921a39961e62e01be",
            "file": "src/app/ui-lib/text/see-more/see-more.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-see-more",
            "styleUrls": [
                "./see-more.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./see-more.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isAutoExpand",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean"
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string"
                },
                {
                    "name": "type",
                    "defaultValue": "'link'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "\"link\" | \"expand\""
                }
            ],
            "outputsClass": [
                {
                    "name": "switch",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "isMore",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "routerData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "goToSpacePage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSwitch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-see-more',\n  templateUrl: './see-more.component.html',\n  styleUrls: ['./see-more.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SeeMoreComponent implements OnInit {\n  @Input() link: string;\n  @Input() type: 'link' | 'expand' = 'link';\n  @Input() isAutoExpand: boolean = false;\n  @Output() switch = new EventEmitter();\n\n  routerData: {\n    isAutoExpand: boolean;\n  };\n\n  isMore: boolean = true;\n\n  constructor(private router: Router) {}\n\n  ngOnInit(): void {\n    this.isMore = this.isAutoExpand;\n\n    this.routerData = {\n      isAutoExpand: this.isAutoExpand,\n    };\n  }\n\n  onSwitch() {\n    this.isMore = !this.isMore;\n    this.switch.emit();\n  }\n\n  goToSpacePage() {\n    this.router.navigate([this.link], { queryParams: this.routerData });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "span {\r\n  font-weight: 500;\r\n  font-size: 17px;\r\n  line-height: 20px;\r\n  letter-spacing: 0.25px;\r\n  color: #EB2F96;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n}\r\n",
                    "styleUrl": "./see-more.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<a *ngIf=\"type === 'link'\" (click)=\"goToSpacePage()\">\r\n  <span>See&nbsp;More</span>\r\n</a>\r\n\r\n<span *ngIf=\"type === 'expand'\" (click)=\"onSwitch()\">\r\n  {{ isMore ? 'See&nbsp;More' : 'See&nbsp;Less'  }}\r\n</span>\r\n\r\n"
        },
        {
            "name": "SendButtonComponent",
            "id": "component-SendButtonComponent-ab87e7f80c541d9671d099e2ad3f1bdb",
            "file": "src/app/ui-lib/buttons/send-button/send-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-send-button",
            "styleUrls": [
                "./send-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./send-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "onSendBtnClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-send-button',\r\n  templateUrl: './send-button.component.html',\r\n  styleUrls: ['./send-button.component.scss'],\r\n})\r\nexport class SendButtonComponent implements OnInit {\r\n  @Input() isDisabled: boolean;\r\n  @Output() onSendBtnClick = new EventEmitter();\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "button:disabled {\r\n  background: #F597CA !important;\r\n  color: white !important;\r\n}\r\n",
                    "styleUrl": "./send-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<button\r\n  [disabled]=\"isDisabled\"\r\n  (click)=\"onSendBtnClick.emit()\"\r\n  class=\"send-button\"\r\n  mat-flat-button\r\n  color=\"primary\">\r\n  Send\r\n</button>\r\n"
        },
        {
            "name": "SendTipsButtonComponent",
            "id": "component-SendTipsButtonComponent-b59a545be05585328e0a447e5e31589b",
            "file": "src/app/ui-lib/buttons/send-tips-button/send-tips-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-send-tips-button",
            "styleUrls": [
                "./send-tips-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./send-tips-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "width",
                    "defaultValue": "'static'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "\"full\" | \"static\""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-send-tips-button',\n  templateUrl: './send-tips-button.component.html',\n  styleUrls: ['./send-tips-button.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SendTipsButtonComponent {\n  @Input() width: 'full' | 'static' = 'static';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".full {\r\n  width: 100%;\r\n}\r\n\r\nbutton {\r\n  font-size: 17px;\r\n}\r\n",
                    "styleUrl": "./send-tips-button.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<button mat-flat-button\n        color=\"primary\"\n        [disabled]=\"true\"\n        [ngClass]=\"width\"\n>Send tips</button>\n"
        },
        {
            "name": "SendTokensButtonComponent",
            "id": "component-SendTokensButtonComponent-8682c0ebda70ce356ad091a0db347044",
            "file": "src/app/ui-lib/buttons/send-tokens-button/send-tokens-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-send-tokens-button",
            "styleUrls": [
                "./send-tokens-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./send-tokens-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "width",
                    "defaultValue": "'static'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "\"full\" | \"static\""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-send-tokens-button',\r\n  templateUrl: './send-tokens-button.component.html',\r\n  styleUrls: ['./send-tokens-button.component.scss'],\r\n})\r\nexport class SendTokensButtonComponent implements OnInit {\r\n  @Input() width: 'full' | 'static' = 'static';\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".static {\r\n  width: 99px;\r\n}\r\n\r\n.full {\r\n  width: 100%;\r\n}\r\n\r\n.mat-stroked-button {\r\n  border: 1px solid #EB2F96 !important;\r\n\r\n}\r\n\r\nbutton {\r\n  font-size: 17px;\r\n}\r\n",
                    "styleUrl": "./send-tokens-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<button\r\n  [ngClass]=\"width\"\r\n  mat-stroked-button\r\n  color=\"primary\"\r\n>\r\n  Send tokens\r\n</button>\r\n"
        },
        {
            "name": "SharedButtonComponent",
            "id": "component-SharedButtonComponent-decbb88ac605c6c80f2f7c98f905b81b",
            "file": "src/app/ui-lib/buttons/shared-button/shared-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-shared-button",
            "styleUrls": [
                "./shared-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./shared-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isShowLabel",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-shared-button',\n  templateUrl: './shared-button.component.html',\n  styleUrls: ['./shared-button.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SharedButtonComponent {\n  @Input() isShowLabel: boolean = false;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n",
                    "styleUrl": "./shared-button.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<app-icon-button [buttonSize]=\"32\"\r\n                 [iconSize]=\"22\"\r\n                 [iconName]=\"'share-icon'\"\r\n></app-icon-button>\r\n\r\n<span [ngClass]=\"['action-panel-label']\"\r\n      *ngIf=\"isShowLabel\"\r\n>Share</span>\r\n"
        },
        {
            "name": "SharedPostItemComponent",
            "id": "component-SharedPostItemComponent-63f7de2775455c85d9e5a46c87ab8867",
            "file": "src/app/ui-lib/post-ui/shared-post-item/shared-post-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-shared-post-item",
            "styleUrls": [
                "./shared-post-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./shared-post-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "postItemData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "PostListItemData"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "sharedPostItemData$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<PostListItemData>",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCommentButtonClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onViewReaction",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { PostListItemData } from '../../../core/models/post/post-list-item.model';\r\nimport { Observable } from 'rxjs';\r\nimport { getPostsByIds } from '../../../state/post/post.actions';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from '../../../state/state';\r\nimport { selectPostWithAllDetailsById } from '../../../state/post/post.selectors';\r\n\r\n@Component({\r\n  selector: 'app-shared-post-item',\r\n  templateUrl: './shared-post-item.component.html',\r\n  styleUrls: ['./shared-post-item.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SharedPostItemComponent implements OnInit {\r\n  @Input() postItemData: PostListItemData;\r\n  sharedPostItemData$: Observable<PostListItemData>;\r\n\r\n  constructor(private store: Store<AppState>) {}\r\n\r\n  ngOnInit(): void {\r\n    const sharedPostId = this.postItemData.sharedPostId;\r\n\r\n    if (sharedPostId) {\r\n      this.store.dispatch(getPostsByIds({ payload: { ids: [sharedPostId] } }));\r\n      this.sharedPostItemData$ = this.store.select(\r\n        selectPostWithAllDetailsById(sharedPostId)\r\n      );\r\n    }\r\n  }\r\n\r\n  onViewReaction() {}\r\n\r\n  onCommentButtonClick() {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".shared-post-item-wp {\r\n  .post-main-wp {\r\n    .post-data {\r\n      width: 100%;\r\n    }\r\n  }\r\n\r\n  .post-item-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: flex-start;\r\n    margin-bottom: 16px;\r\n  }\r\n\r\n  .action-panel-wp {\r\n    margin-top: 7px;\r\n  }\r\n}\r\n\r\n.mat-card {\r\n  padding-bottom: 7px;\r\n}\r\n\r\n@media only screen and (max-width: 768px) {\r\n  .post-main-wp {\r\n    flex-direction: column;\r\n  }\r\n}\r\n",
                    "styleUrl": "./shared-post-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"shared-post-item-wp\">\r\n  <mat-card>\r\n    <div class=\"post-main-wp\">\r\n      <div class=\"post-data\">\r\n        <div class=\"post-item-header\">\r\n\r\n          <app-post-info\r\n            [userName]=\"postItemData.ownerName\"\r\n            [spaceName]=\"postItemData.spaceName\"\r\n            [imageUrl]=\"postItemData.ownerImageUrl\"\r\n            [createdAtTime]=\"postItemData.createdAtTime\"\r\n            [ownerId]=\"postItemData.ownerId\"\r\n          ></app-post-info>\r\n\r\n          <app-option-button (onClickViewReaction)=\"onViewReaction()\"></app-option-button>\r\n        </div>\r\n\r\n        <ng-container *ngIf=\"(sharedPostItemData$ | async); else spinner\">\r\n          <app-post-item\r\n            [showActionPanel]=\"false\"\r\n            [postItemData]=\"sharedPostItemData$ | async\">\r\n          </app-post-item>\r\n        </ng-container>\r\n\r\n        <ng-template #spinner>\r\n          <app-row h=\"center\" v=\"center\">\r\n            <app-spinner [showSpinner]=\"true\"></app-spinner>\r\n          </app-row>\r\n        </ng-template>\r\n\r\n      </div>\r\n\r\n      <div class=\"action-panel-wp\">\r\n        <app-action-panel\r\n          [isShowComment]=\"true\"\r\n          [upvoteCount]=\"postItemData.upvotesCount\"\r\n          [downvoteCount]=\"postItemData.downvotesCount\"\r\n          [commentCount]=\"postItemData.repliesCount\"\r\n          [isShowShare]=\"true\"\r\n          (commentClick)=\"onCommentButtonClick()\"\r\n        ></app-action-panel>\r\n      </div>\r\n    </div>\r\n  </mat-card>\r\n</div>\r\n"
        },
        {
            "name": "SidenavMenuComponent",
            "id": "component-SidenavMenuComponent-ecc99c6450523578c5c5c3520a29a40f",
            "file": "src/app/ui-lib/menu/sidenav-menu/sidenav-menu.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sidenav-menu",
            "styleUrls": [
                "./sidenav-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sidenav-menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "profileId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSettings",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { SnackBarService } from '../../../shared/services/snack-bar.service';\n\n@Component({\n  selector: 'app-sidenav-menu',\n  templateUrl: './sidenav-menu.component.html',\n  styleUrls: ['./sidenav-menu.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SidenavMenuComponent implements OnInit {\n  @Input() profileId: string;\n\n  constructor(private snackBarService: SnackBarService) {}\n\n  ngOnInit(): void {}\n\n  onSettings() {\n    this.snackBarService.openSimpleSnackBar({\n      message: 'Settings must be implemented',\n      iconName: 'info-icon',\n      isShowCloseButton: true,\n      duration: 6000,\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "button {\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  height: 40px;\r\n  font-size: 17px;\r\n  line-height: 125%;\r\n\r\n  mat-icon {\r\n    width: 16px;\r\n    height: 16px;\r\n    margin: 0 28px 0 7px;\r\n  }\r\n\r\n  &:hover {\r\n    background-color: var(--hover-color-light);\r\n  }\r\n}\r\n\r\n",
                    "styleUrl": "./sidenav-menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "snackBarService",
                        "type": "SnackBarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "snackBarService",
                        "type": "SnackBarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-column [v]=\"'start'\" [padding]=\"'14px 0'\">\n  <button mat-ripple [routerLink]=\"['/accounts', profileId]\">\n    <mat-icon svgIcon=\"profile-icon\"></mat-icon>\n    <span>My profile</span>\n  </button>\n\n  <button mat-ripple [routerLink]=\"['/accounts', profileId, 'edit']\">\n    <mat-icon svgIcon=\"edit-icon\"></mat-icon>\n    <span>Edit my profile</span>\n  </button>\n\n  <button mat-ripple (click)=\"onSettings()\">\n    <mat-icon svgIcon=\"setting-icon\"></mat-icon>\n    <span>Settings</span>\n  </button>\n</app-column>\n\n\n\n"
        },
        {
            "name": "SignInModalDialogComponent",
            "id": "component-SignInModalDialogComponent-fb6a81496c0bb950ea85b5f74c83f351",
            "file": "src/app/shared/modal-dialogs/sign-in-modal-dialog/sign-in-modal-dialog.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sign-in-modal-dialog",
            "styleUrls": [
                "./sign-in-modal-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sign-in-modal-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "ACCOUNT_STATUS"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ACCOUNT_STATUS",
                    "defaultValue": "ACCOUNT_STATUS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SignInModalData",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<SignInModalDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ipfsUrl",
                    "defaultValue": "environment.ipfsUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectAccount",
                    "args": [
                        {
                            "name": "account",
                            "type": "AccountData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "account",
                            "type": "AccountData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { ACCOUNT_STATUS, AccountService } from '../../services/account.service';\nimport { SignInModalData } from '../../../core/types/dialog-modal-data.types';\nimport { environment } from '../../../../environments/environment';\nimport { AccountData } from '../../../core/types/account.types';\n\n@Component({\n  selector: 'app-sign-in-modal-dialog',\n  templateUrl: './sign-in-modal-dialog.component.html',\n  styleUrls: ['./sign-in-modal-dialog.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SignInModalDialogComponent implements OnInit {\n  @Input() status: ACCOUNT_STATUS;\n\n  ACCOUNT_STATUS = ACCOUNT_STATUS;\n  ipfsUrl = environment.ipfsUrl;\n\n  constructor(\n    private accountService: AccountService,\n    public dialogRef: MatDialogRef<SignInModalDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: SignInModalData\n  ) {}\n\n  ngOnInit(): void {\n    console.log(this.data);\n  }\n\n  async selectAccount(account: AccountData) {\n    await this.accountService.setCurrentAccount(account);\n    this.dialogRef.close();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".modal-header {\r\n  position: relative;\r\n  text-align: center;\r\n\r\n  .header-title {\r\n    color: #A0A0A0;\r\n    width: 100%;\r\n    text-align: center;\r\n  }\r\n}\r\n\r\n.modal-wp {\r\n  padding: 16px;\r\n  padding-bottom: 0;\r\n}\r\n\r\n.close-btn {\r\n  position: absolute;\r\n  right: -5px;\r\n  top: -6px;\r\n}\r\n\r\n.ext-not-found {\r\n  padding: 0 24px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  span {\r\n    white-space: nowrap;\r\n  }\r\n\r\n\r\n  p {\r\n    font-size: 17px;\r\n    line-height: 125%;\r\n    text-align: center;\r\n\r\n    a {\r\n      padding-right: 4px;\r\n    }\r\n  }\r\n\r\n  .link-wp {\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 230px;\r\n\r\n    a {\r\n      color: #262626;\r\n      font-weight: 500;\r\n      font-size: 17px;\r\n      border: 1px solid #D9D9D9;\r\n      border-radius: 4px;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      padding: 8px 24px;\r\n\r\n      &:hover {\r\n        transition: background-color 300ms;\r\n        background-color: #f3f3f3;\r\n      }\r\n\r\n      img {\r\n        margin-right: 5px;\r\n      }\r\n    }\r\n  }\r\n\r\n  .footer-not-ext-wp {\r\n    font-size: 14px;\r\n    margin-top: 20px;\r\n    padding: 4px 0 21px;\r\n\r\n    span {\r\n      color: #8C8C8C;\r\n    }\r\n  }\r\n}\r\n\r\n.account-not-found {\r\n  p {\r\n    font-size: 17px;\r\n    padding: 21px 28px;\r\n    text-align: center;\r\n    white-space: pre;\r\n    background: #FFFAD5;\r\n    border-radius: 5px;\r\n  };\r\n\r\n}\r\n\r\n.footer-wp {\r\n  display: flex;\r\n  justify-content: center;\r\n  padding: 4px 0 21px;\r\n  color: #A0A0A0;\r\n  font-weight: 500;\r\n  font-size: 14px;\r\n  a {\r\n    padding: 0 16px;\r\n\r\n    &:first-child {\r\n      border-right: 1px solid #EEECEC;\r\n    }\r\n  }\r\n}\r\n\r\n.link{\r\n  color: #EB2F96;\r\n  font-weight: 500;\r\n}\r\n\r\n.unauthorized {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  &>span {\r\n    padding: 8px 0 5px;\r\n    font-size: 17px;\r\n  }\r\n\r\n  .account-list {\r\n    width: 400px;\r\n    margin-bottom: 20px;\r\n    max-height: 244px;\r\n    overflow-y: auto;\r\n    margin-right: -4px;\r\n\r\n    .account-item {\r\n      display: flex;\r\n      align-items: center;\r\n      border-bottom: 1px solid #EEECEC;\r\n      padding: 8px 0 5px;\r\n      cursor: pointer;\r\n\r\n      &:hover {\r\n        background-color: #f6f6f6;\r\n      }\r\n\r\n      .account-info-wp {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-between;\r\n        width: 100%;\r\n        margin-left: 16px;\r\n        padding-right: 4px;\r\n\r\n        .name {\r\n          display: block;\r\n          padding-bottom: 3px;\r\n          font-weight: 500;\r\n          font-size: 17px;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./sign-in-modal-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<SignInModalDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "SignInModalData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<SignInModalDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "SignInModalData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container>\n  <div class=\"modal-wp\">\n    <section class=\"modal-header\">\n      <app-close-button class=\"close-btn\" (onClose)=\"dialogRef.close()\"></app-close-button>\n\n      <div class=\"header-title title-large\">Sign In</div>\n    </section>\n\n    <ng-container [ngSwitch]=\"data.status\">\n\n      <ng-template [ngSwitchCase]=\"ACCOUNT_STATUS.EXTENSION_NOT_FOUND\">\n        <section class=\"ext-not-found\">\n          <p>\n            <span>\n              <a class=\"link\" target=\"_blank\" href=\"https://polkadot.js.org/extension/\">\n                Polkadot Extension\n              </a>\n              <span>was not found or disabled</span>\n            </span>\n            <br>\n            <span>Install the extension with the button below.</span>\n          </p>\n\n          <div class=\"link-wp\">\n            <a matRipple\n               target=\"_blank\"\n               href=\"https://chrome.google.com/webstore/detail/polkadot%7Bjs%7D-extension/mopnmbcafieddcagagdcbnhejhlodfdd\">\n              <img src=\"assets/img/chrome.png\" alt=\"\">\n              <span>Install for Chrome</span>\n            </a>\n\n            <a matRipple\n               class=\"mt-16\"\n               target=\"_blank\"\n               href=\"https://addons.mozilla.org/en-US/firefox/addon/polkadot-js-extension/\">\n              <img src=\"assets/img/firefox.png\" alt=\"\">\n              <span>Install for Firefox</span>\n            </a>\n          </div>\n\n          <div class=\"footer-not-ext-wp\">\n            <span>\n              Need help? Read our\n              <a class=\"link\">Sign In Guide</a>\n            </span>\n          </div>\n        </section>\n\n      </ng-template>\n\n      <ng-template [ngSwitchCase]=\"ACCOUNT_STATUS.ACCOUNTS_NOT_FOUND\">\n        <div class=\"account-not-found\">\n          <p>\n            No accounts found. Please open your\n            <br>\n            <b>Polkadot extension</b>\n            and create a new account\n            <br>\n            or import existing. Then reload this page.\n          </p>\n\n          <div class=\"footer-wp\">\n            <a href=\"\">Privacy Policy</a>\n            <a href=\"\">Terms of Use</a>\n          </div>\n        </div>\n      </ng-template>\n\n      <ng-template [ngSwitchCase]=\"ACCOUNT_STATUS.UNAUTHORIZED\">\n        <div class=\"unauthorized\">\n          <span>Click on your account to sign in:</span>\n\n          <div class=\"account-list scrollable-list-wp\">\n            <div (click)=\"selectAccount(account)\"\n                 class=\"account-item\"\n                 *ngFor=\"let account of data.accounts\">\n              <app-avatar [size]=\"40\"\n                          [jdentityValue]=\"account.id\"\n                          [src]=\"account.avatar\">\n              </app-avatar>\n              <div class=\"account-info-wp\">\n                <div>\n                  <span class=\"name\">{{account.name}}</span>\n                  <app-tokens [size]=\"'small'\" [showIcon]=\"false\" [tokens]=\"account.balance\"></app-tokens>\n                </div>\n                <app-address size=\"small\"\n                             [address]=\"account.id\"\n                ></app-address>\n              </div>\n            </div>\n          </div>\n          <div class=\"footer-wp\">\n            <a href=\"\">Privacy Policy</a>\n            <a href=\"\">Terms of Use</a>\n          </div>\n        </div>\n      </ng-template>\n\n    </ng-container>\n  </div>\n</ng-container>\n"
        },
        {
            "name": "SignOutButtonComponent",
            "id": "component-SignOutButtonComponent-9297bbd07ba36cd0692943abf4147bb6",
            "file": "src/app/ui-lib/buttons/sign-out-button/sign-out-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sign-out-button",
            "styleUrls": [
                "./sign-out-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sign-out-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-sign-out-button',\r\n  templateUrl: './sign-out-button.component.html',\r\n  styleUrls: ['./sign-out-button.component.scss']\r\n})\r\nexport class SignOutButtonComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".sign-out-button {\r\n  width: 100%;\r\n}\r\n\r\n.mat-stroked-button {\r\n  border: 1px solid #EB2F96 !important;\r\n}\r\n",
                    "styleUrl": "./sign-out-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<button class=\"sign-out-button\" mat-stroked-button color=\"primary\">\r\n  SIGN OUT\r\n</button>\r\n"
        },
        {
            "name": "SimpleSnackBarComponent",
            "id": "component-SimpleSnackBarComponent-039aa292bd0b144c2854b837596dc011",
            "file": "src/app/shared/components/simple-snack-bar/simple-snack-bar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-simple-snack-bar",
            "styleUrls": [
                "./simple-snack-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./simple-snack-bar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SimpleSnackBarOption",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_SNACK_BAR_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SimpleSnackBarOption",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  OnInit,\n} from '@angular/core';\nimport { MAT_SNACK_BAR_DATA } from '@angular/material/snack-bar';\n\nexport type SimpleSnackBarOption = {\n  message: string;\n  iconName?: string;\n  isShowCloseButton?: boolean;\n  duration?: number;\n};\n\n@Component({\n  selector: 'app-simple-snack-bar',\n  templateUrl: './simple-snack-bar.component.html',\n  styleUrls: ['./simple-snack-bar.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SimpleSnackBarComponent implements OnInit {\n  options: SimpleSnackBarOption;\n\n  constructor(@Inject(MAT_SNACK_BAR_DATA) public data: SimpleSnackBarOption) {\n    this.options = data;\n  }\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n",
                    "styleUrl": "./simple-snack-bar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "SimpleSnackBarOption",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "SimpleSnackBarOption",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-row [v]=\"'center'\">\n\n  <mat-icon *ngIf=\"options.iconName\"\n            svgIcon=\"{{ options.iconName }}\"\n            [style.margin-right]=\"'16px'\"\n  ></mat-icon>\n\n  <span>{{ options.message }}</span>\n\n</app-row>\n\n<app-close-button *ngIf=\"options.isShowCloseButton\"></app-close-button>\n"
        },
        {
            "name": "SpaceComponent",
            "id": "component-SpaceComponent-13b30f89ffbcd36de998af89dee5ce05",
            "file": "src/app/space/space/space.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-space",
            "styleUrls": [
                "./space.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./space.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isAutoExpandSummary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "postIds",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "spaceData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SpaceListItemData",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "getSpaceId",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        130
                    ]
                },
                {
                    "name": "loadSpaceData",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        130
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { SpaceListItemData } from '../../core/models/space/space-list-item.model';\r\nimport { SpaceService } from '../services/space.service';\r\nimport { PostService } from '../../post/services/post.service';\r\n\r\n@Component({\r\n  selector: 'app-space',\r\n  templateUrl: './space.component.html',\r\n  styleUrls: ['./space.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SpaceComponent implements OnInit {\r\n  postIds: string[] = [];\r\n  isAutoExpandSummary: boolean;\r\n  spaceData: SpaceListItemData;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private spaceService: SpaceService,\r\n    private postService: PostService,\r\n    private cd: ChangeDetectorRef\r\n  ) {}\r\n\r\n  async ngOnInit() {\r\n    this.isAutoExpandSummary = this.route.snapshot.queryParams['isAutoExpand'];\r\n\r\n    await this.loadSpaceData();\r\n\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  private async loadSpaceData() {\r\n    const spaceId = await this.getSpaceId();\r\n\r\n    this.spaceData = await this.spaceService.getOrFetchSpaceById(spaceId);\r\n\r\n    this.postIds = await this.postService.getPostIdsBySpaceId(spaceId);\r\n  }\r\n\r\n  private async getSpaceId() {\r\n    const spaceHandle = this.route.snapshot.params['spaceId'];\r\n\r\n    let spaceId = spaceHandle;\r\n\r\n    if (spaceHandle && spaceHandle[0] === '@') {\r\n      const handle = spaceHandle.substring(1);\r\n      spaceId = await this.spaceService.getSpaceIdByHandle(handle);\r\n    }\r\n\r\n    return spaceId;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".space-wp {\r\n  margin-bottom: 16px;\r\n}\r\n\r\n",
                    "styleUrl": "./space.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "spaceService",
                        "type": "SpaceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postService",
                        "type": "PostService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "spaceService",
                        "type": "SpaceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postService",
                        "type": "PostService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-space-profile [spaceItemData]=\"spaceData\"\r\n                   [isAutoExpandSummary]=\"isAutoExpandSummary\"\r\n                   class=\"space-wp\"\r\n></app-space-profile>\r\n\r\n<ng-container *ngIf=\"postIds.length > 0; else noPost\">\r\n\r\n  <app-post-list [type]=\"'all'\" [ids]=\"postIds\"></app-post-list>\r\n\r\n</ng-container>\r\n\r\n<ng-template #noPost>\r\n\r\n  <app-no-content [text]=\"'No posts yet'\"></app-no-content>\r\n\r\n</ng-template>\r\n\r\n\r\n\r\n"
        },
        {
            "name": "SpaceInfoComponent",
            "id": "component-SpaceInfoComponent-2c1bca2e2a7e59a2081a673d38b6a289",
            "file": "src/app/ui-lib/space-ui/space-info/space-info.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-space-info",
            "styleUrls": [
                "./space-info.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./space-info.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "avatarSrc",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "followersCount",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "number"
                },
                {
                    "name": "itemType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "\"list\" | \"single\""
                },
                {
                    "name": "link",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string"
                },
                {
                    "name": "postsCount",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "number"
                },
                {
                    "name": "spaceId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string"
                },
                {
                    "name": "spaceName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "deviceService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DeviceService",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "followersModalData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FollowersModalData",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "modalConfig",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogConfig",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "unsubscribe$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "configModalDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onOpenModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  Inject,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  PLATFORM_ID,\r\n} from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\r\nimport { DeviceService } from '../../../shared/services/device.service';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { FollowersModalDialogComponent } from '../../../shared/modal-dialogs/followers-modal-dialog/followers-modal-dialog.component';\r\nimport { FollowersModalData } from '../../../core/types/dialog-modal-data.types';\r\nimport { isPlatformBrowser } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-space-info',\r\n  templateUrl: './space-info.component.html',\r\n  styleUrls: ['./space-info.component.scss'],\r\n})\r\nexport class SpaceInfoComponent implements OnInit, OnDestroy {\r\n  @Input() link = '';\r\n  @Input() spaceId = '';\r\n  @Input() postsCount = 1;\r\n  @Input() avatarSrc = '';\r\n  @Input() spaceName = '';\r\n  @Input() followersCount = 1;\r\n  @Input() itemType: 'list' | 'single';\r\n\r\n  followersModalData: FollowersModalData;\r\n\r\n  private unsubscribe$: Subject<void> = new Subject();\r\n  private modalConfig: MatDialogConfig = {};\r\n\r\n  constructor(\r\n    public dialog: MatDialog,\r\n    public deviceService: DeviceService,\r\n    @Inject(PLATFORM_ID) private platformId: Object\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.configModalDialog();\r\n  }\r\n\r\n  onOpenModal() {\r\n    this.dialog.open(FollowersModalDialogComponent, this.modalConfig);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    //check for storybook\r\n    if (typeof this.unsubscribe$ !== 'string') {\r\n      this.unsubscribe$?.next();\r\n      this.unsubscribe$?.complete();\r\n    }\r\n  }\r\n\r\n  private configModalDialog() {\r\n    this.followersModalData = {\r\n      spaceId: this.spaceId,\r\n    };\r\n    this.modalConfig.data = this.followersModalData;\r\n\r\n    if (isPlatformBrowser(this.platformId)) {\r\n      this.deviceService?.isMobile$\r\n        .pipe(takeUntil(this.unsubscribe$))\r\n        .subscribe((isMobile) => {\r\n          if (isMobile) {\r\n            this.modalConfig.width = '95%';\r\n            this.modalConfig.maxWidth = 'none';\r\n          } else {\r\n            this.modalConfig.width = '500px';\r\n            this.modalConfig.maxWidth = '80vh';\r\n          }\r\n        });\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n}\r\n\r\n.info {\r\n  font-size: 14px;\r\n\r\n  .dot {\r\n    margin-right: 4px;\r\n  }\r\n\r\n  a:hover {\r\n    cursor: pointer;\r\n    text-decoration: underline;\r\n  }\r\n}\r\n\r\n\r\n.single {\r\n  color: var(--black);\r\n\r\n  .count {\r\n    font-weight: 500;\r\n  }\r\n}\r\n\r\n.list {\r\n  color: var(--gray-dark);\r\n}\r\n\r\n.count {\r\n  padding-right: 4px;\r\n}\r\n",
                    "styleUrl": "./space-info.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "deviceService",
                        "type": "DeviceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "deviceService",
                        "type": "DeviceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-avatar [src]=\"avatarSrc\"\r\n            [size]=\"itemType === 'list' ? 40 : 46\"\r\n            [name]=\"spaceName\"\r\n            [jdentityValue]=\"spaceId\"\r\n></app-avatar>\r\n\r\n<app-column [margin]=\"'0 0 0 8px'\" [h]=\"'space-between'\">\r\n\r\n  <app-title [text]=\"spaceName\"\r\n             [type]=\"itemType === 'list' ? 'small' : 'medium'\"\r\n             [link]=\"'/' + link\"\r\n  ></app-title>\r\n\r\n  <app-row [ngClass]=\"[itemType, 'info']\">\r\n\r\n    <span [style.margin-right]=\"itemType === 'single' ? '12px' : '4px'\">\r\n      <span class=\"count\">{{postsCount | numeral}}</span>\r\n      <span>{{postsCount | pluralize:  'Post'}}</span>\r\n    </span>\r\n\r\n    <span  *ngIf=\"itemType === 'list'\" class=\"dot\">·</span>\r\n\r\n    <a (click)=\"onOpenModal()\">\r\n      <span class=\"count\">{{followersCount | numeral}}</span>\r\n      <span>{{followersCount | pluralize: 'Follower'}}</span>\r\n    </a>\r\n\r\n  </app-row>\r\n\r\n</app-column>\r\n\r\n\r\n\r\n"
        },
        {
            "name": "SpaceItemComponent",
            "id": "component-SpaceItemComponent-108897d76a665b29e16f3a430ac5f198",
            "file": "src/app/ui-lib/space-ui/space-item/space-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-space-item",
            "styleUrls": [
                "./space-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./space-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isEdit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean"
                },
                {
                    "name": "itemType",
                    "defaultValue": "'list'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "\"list\" | \"single\""
                },
                {
                    "name": "spaceItemData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "SpaceListItemData | undefined"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { SpaceListItemData } from '../../../core/models/space/space-list-item.model';\r\n\r\n@Component({\r\n  selector: 'app-space-item',\r\n  templateUrl: './space-item.component.html',\r\n  styleUrls: ['./space-item.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SpaceItemComponent {\r\n  @Input() spaceItemData: SpaceListItemData | undefined;\r\n  @Input() isEdit: boolean;\r\n  @Input() itemType: 'list' | 'single' = 'list';\r\n\r\n  constructor() {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".space-item-wp {\r\n  width: 100%;\r\n  margin-top: 16px;\r\n\r\n  .space-item-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n  }\r\n\r\n  .button-wp {\r\n    display: flex;\r\n    align-items: flex-start;\r\n\r\n    &>div {\r\n      display: flex;\r\n      align-items: center;\r\n      >*:first-child {\r\n        margin-right: 8px;\r\n      }\r\n    }\r\n  }\r\n\r\n  .link-icons-wp {\r\n    margin: 12px 0 8px;\r\n  }\r\n}\r\n\r\n.tags-wp {\r\n  margin-bottom: 16px;\r\n}\r\n",
                    "styleUrl": "./space-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 18
            },
            "templateData": "<div *ngIf=\"spaceItemData\" class=\"space-item-wp\">\r\n  <mat-card>\r\n    <app-row [v]=\"'start'\"\r\n             [h]=\"'space-between'\"\r\n    >\r\n      <app-space-info [spaceName]=\"spaceItemData.content.name\"\r\n                      [avatarSrc]=\"spaceItemData.content.image\"\r\n                      [followersCount]=\"spaceItemData.struct.followersCount\"\r\n                      [postsCount]=\"spaceItemData.struct.postsCount\"\r\n                      [link]=\"spaceItemData.content.handle ? '/@' + spaceItemData.content.handle : '/' + spaceItemData.struct.id\"\r\n                      [itemType]=\"itemType\"\r\n                      [spaceId]=\"spaceItemData.struct.id\"\r\n      ></app-space-info>\r\n\r\n      <app-row [v]=\"'center'\">\r\n\r\n        <app-follow-button [size]=\"'large'\"\r\n                           ifDesktop\r\n                           [isFollow]=\"false\"\r\n                           [style.margin-right]=\"'9px'\"\r\n        ></app-follow-button>\r\n\r\n        <app-option-button type=\"space\"></app-option-button>\r\n\r\n      </app-row>\r\n\r\n    </app-row>\r\n\r\n    <app-paragraph [marginTop]=\"10\"\r\n                   [link]=\"spaceItemData.content.handle ? '/@' + spaceItemData.content.handle : '/' + spaceItemData.struct.id\"\r\n                   [text]=\"spaceItemData.content.summary\"\r\n                   [isAutoExpand]=\"true\"\r\n                   [isShowMore]=\"spaceItemData.content.isShowMore\"\r\n    ></app-paragraph>\r\n\r\n    <app-tag *ngFor=\"let tag of spaceItemData.content.tags\" [tagName]=\"tag\"></app-tag>\r\n\r\n    <app-follow-button width=\"full\"\r\n                       size=\"large\"\r\n                       ifMobile\r\n                       [style.margin-top]=\"'16px'\"\r\n                       [isFollow]=\"false\"\r\n    ></app-follow-button>\r\n  </mat-card>\r\n</div>\r\n"
        },
        {
            "name": "SpaceListComponent",
            "id": "component-SpaceListComponent-7371c0b5e3ec192de9eff87d4423d917",
            "file": "src/app/space/space-list/space-list.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-space-list",
            "styleUrls": [
                "./space-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./space-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ids",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string[] | null",
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "type",
                    "defaultValue": "'public'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "\"public\" | \"all\"",
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "action$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Actions",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "cd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "store",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Store<AppState>",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "isBlockInfinityScroll",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "isLoading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "listData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<T>",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "listDataIds",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "scrollDistance",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "scrollDownEvent$",
                    "defaultValue": "this.scrollDownEventSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "scrollDownEventSource",
                    "defaultValue": "new BehaviorSubject<ScrollProps>(\r\n    this.scrollProps\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "scrollProps",
                    "defaultValue": "new ScrollProps(20)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "unsubscribe$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "addUniqueDataToListDataArray",
                    "args": [
                        {
                            "name": "itemDictionary",
                            "type": "KeyValuePair<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "itemDictionary",
                            "type": "KeyValuePair<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "getScrollableData",
                    "args": [
                        {
                            "name": "dispatchAction",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selector",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selectAction",
                            "type": "ActionCreator",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dispatchAction",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selector",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selectAction",
                            "type": "ActionCreator",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "loadFinish",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "loadStart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "onScrollDown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "scrollEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "sliceIds",
                    "args": [
                        {
                            "name": "arr",
                            "type": "Array<string>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "props",
                            "type": "ScrollProps",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "arr",
                            "type": "Array<string>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "props",
                            "type": "ScrollProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "trackById",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Inject,\r\n  OnInit,\r\n  PLATFORM_ID,\r\n} from '@angular/core';\r\nimport { SpaceListItemData } from '../../core/models/space/space-list-item.model';\r\n\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from '../../state/state';\r\n\r\nimport { selectSpacesByIds } from '../../state/space/space.selectors';\r\nimport { isPlatformBrowser } from '@angular/common';\r\nimport {\r\n  getSpacesByIds,\r\n  loadSpaceSuccess,\r\n} from '../../state/space/space.actions';\r\nimport { BaseInfinityScrollComponent } from '../../core/base-component/base-infinity-scroll.component';\r\nimport { Actions } from '@ngrx/effects';\r\n\r\n@Component({\r\n  selector: 'app-space-list',\r\n  templateUrl: './space-list.component.html',\r\n  styleUrls: ['./space-list.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SpaceListComponent\r\n  extends BaseInfinityScrollComponent<SpaceListItemData>\r\n  implements OnInit\r\n{\r\n  constructor(\r\n    public store: Store<AppState>,\r\n    public cd: ChangeDetectorRef,\r\n    public action$: Actions,\r\n    @Inject(PLATFORM_ID) private platformId: Object\r\n  ) {\r\n    super(store, cd, action$);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (isPlatformBrowser(this.platformId)) {\r\n      this.getScrollableData(\r\n        getSpacesByIds,\r\n        selectSpacesByIds,\r\n        loadSpaceSuccess\r\n      );\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".space-list-wp {\r\n  width: 100%;\r\n}\r\n\r\n",
                    "styleUrl": "./space-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseInfinityScrollComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div\r\n  infinite-scroll\r\n  [infiniteScrollThrottle]=\"50\"\r\n  [infiniteScrollDistance]=\"scrollDistance\"\r\n  (scrolled)=\"onScrollDown()\"\r\n  [infiniteScrollDisabled]=\"isBlockInfinityScroll\"\r\n  class=\"space-list-wp\">\r\n  <ng-container *ngFor=\"let space of listData; trackBy: trackById\">\r\n    <app-space-item [spaceItemData]=\"space\"></app-space-item>\r\n  </ng-container>\r\n\r\n  <app-spinner [showSpinner]=\"isLoading\" [text]=\"'Loading more spaces...'\"></app-spinner>\r\n</div>\r\n"
        },
        {
            "name": "SpaceProfileComponent",
            "id": "component-SpaceProfileComponent-42e5a436fd12b63d5b4453a58393777b",
            "file": "src/app/space/space-profile/space-profile.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-space-profile",
            "styleUrls": [
                "./space-profile.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./space-profile.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isAutoExpandSummary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean"
                },
                {
                    "name": "spaceItemData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "SpaceListItemData | null"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isOwner",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\nimport { SpaceListItemData } from '../../core/models/space/space-list-item.model';\r\n\r\n@Component({\r\n  selector: 'app-space-profile',\r\n  templateUrl: './space-profile.component.html',\r\n  styleUrls: ['./space-profile.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SpaceProfileComponent implements OnInit, OnChanges {\r\n  @Input() spaceItemData: SpaceListItemData | null;\r\n  @Input() isAutoExpandSummary: boolean;\r\n  isOwner: boolean;\r\n\r\n  constructor() {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.isOwner = this.spaceItemData?.struct.handle === 'subsocial';\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".buttons-wp {\r\n  gap: 16px;\r\n\r\n  &>* {\r\n    flex: 1;\r\n  }\r\n}\r\n",
                    "styleUrl": "./space-profile.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 20
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<ng-container *ngIf=\"spaceItemData\">\r\n\r\n  <mat-card>\r\n\r\n    <app-row [h]=\"'space-between'\"\r\n             [v]=\"'start'\"\r\n             [margin]=\"'0 0 10px 0'\"\r\n    >\r\n\r\n      <app-space-info [spaceName]=\"spaceItemData.content.name\"\r\n                      [avatarSrc]=\"spaceItemData.content.image\"\r\n                      [followersCount]=\"spaceItemData.struct.followersCount\"\r\n                      [postsCount]=\"spaceItemData.struct.postsCount\"\r\n                      [link]=\"'@' + spaceItemData.content.handle\"\r\n                      [itemType]=\"'single'\"\r\n                      [spaceId]=\"spaceItemData.struct.id\"\r\n      ></app-space-info>\r\n\r\n      <app-row [v]=\"'center'\">\r\n\r\n        <app-edit-button *ngIf=\"isOwner\" [style.margin-right]=\"'16px'\"></app-edit-button>\r\n        <app-option-button [type]=\"'space'\"></app-option-button>\r\n\r\n      </app-row>\r\n\r\n    </app-row>\r\n\r\n    <app-paragraph *ngIf=\"!spaceItemData.content.isShowMore\"\r\n                   [text]=\"spaceItemData.content.summary\"\r\n    ></app-paragraph>\r\n\r\n    <app-expand-paragraph *ngIf=\"spaceItemData.content.isShowMore\"\r\n                          [text]=\"spaceItemData.content.summary\"\r\n                          [expandedText]=\"spaceItemData.content.about\"\r\n                          [isMore]=\"!isAutoExpandSummary\"\r\n    ></app-expand-paragraph>\r\n\r\n    <app-link-icons [links]=\"spaceItemData.content.links\"\r\n                    [style.margin]=\"'19px 0 14px'\"\r\n    ></app-link-icons>\r\n\r\n    <app-tag *ngFor=\"let tag of spaceItemData.content.tags\"\r\n             [tagName]=\"tag\"\r\n    ></app-tag>\r\n\r\n    <app-row [ngClass]=\"'buttons-wp'\"\r\n             [margin]=\"'16px 0 0 0'\"\r\n    >\r\n\r\n      <app-write-post-button *ngIf=\"isOwner\"\r\n                             width=\"full\"\r\n      ></app-write-post-button>\r\n\r\n      <app-send-tips-button *ngIf=\"!isOwner\"\r\n                            width=\"full\"\r\n      ></app-send-tips-button>\r\n\r\n      <app-follow-button size=\"large\"\r\n                         width=\"full\"\r\n                         [isFollow]=\"false\"\r\n      ></app-follow-button>\r\n\r\n    </app-row>\r\n\r\n  </mat-card>\r\n\r\n</ng-container>\r\n"
        },
        {
            "name": "SpinnerComponent",
            "id": "component-SpinnerComponent-ccc6f00ee663e14aa77a64585c9b7205",
            "file": "src/app/shared/components/spinner/spinner.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-spinner",
            "styleUrls": [
                "./spinner.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./spinner.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "showSpinner",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean | null"
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-spinner',\r\n  templateUrl: './spinner.component.html',\r\n  styleUrls: ['./spinner.component.scss'],\r\n})\r\nexport class SpinnerComponent implements OnInit {\r\n  @Input() text: string;\r\n  @Input() showSpinner: boolean | null;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".spinner-container {\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 15px 0;\r\n\r\n  .text {\r\n    margin-left: 10px;\r\n  }\r\n}\r\n",
                    "styleUrl": "./spinner.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"showSpinner\">\r\n  <div class=\"spinner-container\">\r\n    <mat-spinner [diameter]=\"30\"></mat-spinner>\r\n    <ng-container *ngIf=\"text\">\r\n      <div class=\"text\">{{text}}</div>\r\n    </ng-container>\r\n  </div>\r\n</ng-container>\r\n"
        },
        {
            "name": "TabsComponent",
            "id": "component-TabsComponent-a4a5776d802762b86a9a66e23985f5f1",
            "file": "src/app/shared/components/tabs/tabs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tabs",
            "styleUrls": [
                "./tabs.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tabs.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "activeLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "TabLinkData"
                },
                {
                    "name": "tabLinks",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "TabLinkData[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "tabClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onTabClick",
                    "args": [
                        {
                            "name": "link",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { TabLinkData } from '../../../core/models/tab-link-data.model';\r\n\r\n@Component({\r\n  selector: 'app-tabs',\r\n  templateUrl: './tabs.component.html',\r\n  styleUrls: ['./tabs.component.scss'],\r\n})\r\nexport class TabsComponent implements OnInit {\r\n  @Input() tabLinks: TabLinkData[] = [];\r\n  @Input() activeLink: TabLinkData;\r\n  @Output() tabClick = new EventEmitter();\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  onTabClick(link: any) {\r\n    this.activeLink = link;\r\n    this.tabClick.emit(link);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".add-info {\r\n  font-size: 14px;\r\n  line-height: 16px;\r\n  color: #9E9E9E;\r\n  font-weight: normal;\r\n  margin-left: 4px;\r\n}\r\n\r\nnav {\r\n  top: 2px;\r\n}\r\n",
                    "styleUrl": "./tabs.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<nav mat-tab-nav-bar animationDuration=\"0ms\">\r\n  <a mat-tab-link *ngFor=\"let link of tabLinks\"\r\n     [active]=\"link.tabName === activeLink?.tabName\"\r\n     (click)=\"onTabClick(link)\">\r\n    {{link.tabName}} <span class=\"add-info\">{{link.additionalInfo}}</span>\r\n  </a>\r\n</nav>\r\n\r\n"
        },
        {
            "name": "TagComponent",
            "id": "component-TagComponent-f4b66f3806cd7df907a4c23c66b4e690",
            "file": "src/app/ui-lib/input/tag/tag.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tag",
            "styleUrls": [
                "./tag.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tag.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "TagSize"
                },
                {
                    "name": "tagName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\nimport {TagSize} from \"../../../core/types/tag-size.type\";\n\n@Component({\n  selector: 'app-tag',\n  templateUrl: './tag.component.html',\n  styleUrls: ['./tag.component.scss']\n})\nexport class TagComponent {\n  @Input() tagName = '';\n  @Input() size: TagSize = 'medium';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tag {\r\n  display: inline-flex;\r\n  padding: 6px 12px;\r\n  margin-right: 8px;\r\n  margin-top: 8px;\r\n  color: rgba(0, 0, 0, 0.6);\r\n  background: rgba(33, 33, 33, 0.08);\r\n  border-radius: 16px;\r\n  letter-spacing: 0.25px;\r\n  font-size: 14px;\r\n  cursor: pointer;\r\n}\r\n\r\n.small {\r\n  font-size: 12px;\r\n}\r\n\r\n.medium {\r\n  font-size: 14px;\r\n}\r\n\r\n.large {\r\n  font-size: 17px;\r\n}\r\n\r\n.huge {\r\n  font-size: 20px;\r\n}\r\n",
                    "styleUrl": "./tag.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"tag\" [ngClass]=\"size\">\n  {{tagName}}\n</div>\n"
        },
        {
            "name": "TagInputComponent",
            "id": "component-TagInputComponent-5e8d3fa79feba270ad85d8c87b93b361",
            "file": "src/app/ui-lib/input/tag-input/tag-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => TagInputComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-tag-input",
            "styleUrls": [
                "./tag-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tag-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string"
                },
                {
                    "name": "errorTexts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "KeyValuePair<string>",
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "blur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "separatorKeysCodes",
                    "defaultValue": "[ENTER, SPACE, TAB]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "tagCtrl",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "tags",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "_value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | string[]",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "onTouch",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "tag",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tag",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "tag",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tag",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ENTER, SPACE, TAB } from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  Component,\r\n  forwardRef,\r\n  Input,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { FormControl, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { BaseControlValueAccessorComponent } from '../../../core/base-component/base-value-accessor';\r\n\r\n@Component({\r\n  selector: 'app-tag-input',\r\n  templateUrl: './tag-input.component.html',\r\n  styleUrls: ['./tag-input.component.scss'],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => TagInputComponent),\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class TagInputComponent\r\n  extends BaseControlValueAccessorComponent\r\n  implements OnInit, AfterContentInit\r\n{\r\n  @Input() placeholder: string = '';\r\n  separatorKeysCodes: number[] = [ENTER, SPACE, TAB];\r\n  tags: string[] = [];\r\n  tagCtrl = new FormControl('');\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  remove(tag: string) {\r\n    const index = this.tags.indexOf(tag);\r\n\r\n    if (index >= 0) {\r\n      this.tags.splice(index, 1);\r\n    }\r\n    this.onChange(this.tags);\r\n  }\r\n\r\n  add(tag: any) {\r\n    this.tags.push((tag.value || '').trim());\r\n    this.onChange(this.tags);\r\n    this.tagCtrl.setValue(null);\r\n  }\r\n\r\n  ngAfterContentInit(): void {\r\n    this.tags = this.value as string[];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tags-wp {\r\n  .mat-chip-list-wrapper .mat-standard-chip {\r\n    margin: 0;\r\n  }\r\n\r\n  .mat-form-field-infix {\r\n    border-top: 5px solid transparent !important;\r\n  }\r\n\r\n  .mat-form-field-label-wrapper {\r\n    margin-top: 9px !important;\r\n  }\r\n\r\n  .mat-chip.mat-standard-chip {\r\n    background: rgba(33, 33, 33, 0.08);\r\n    color: rgba(0, 0, 0, 0.6);\r\n    font-size: 14px;\r\n    line-height: 20px;\r\n    font-weight: normal;\r\n    letter-spacing: 0.25px;\r\n    gap: 8px;\r\n  }\r\n}\r\n\r\n",
                    "styleUrl": "./tag-input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 31
            },
            "extends": "BaseControlValueAccessorComponent",
            "implements": [
                "OnInit",
                "AfterContentInit"
            ],
            "templateData": "<mat-form-field class=\"w100 tags-wp\" appearance=\"outline\">\r\n  <mat-label>Tags</mat-label>\r\n  <mat-chip-list #tagList aria-label=\"Tag selection\">\r\n    <mat-chip\r\n      *ngFor=\"let tag of tags\"\r\n      [removable]=\"true\"\r\n      (removed)=\"remove(tag)\">\r\n      {{tag}}\r\n      <button matChipRemove>\r\n        <mat-icon>cancel</mat-icon>\r\n      </button>\r\n    </mat-chip>\r\n    <input\r\n      placeholder=\"{{placeholder}}\"\r\n      #tagInput\r\n      [matChipInputFor]=\"tagList\"\r\n      [formControl]=\"tagCtrl\"\r\n      [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\r\n      (matChipInputTokenEnd)=\"add($event)\">\r\n  </mat-chip-list>\r\n</mat-form-field>\r\n"
        },
        {
            "name": "TextAreaComponent",
            "id": "component-TextAreaComponent-47f542990993a5e80cfd267906ea25bf",
            "file": "src/app/ui-lib/input/text-area/text-area.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => TextAreaComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-text-area",
            "styleUrls": [
                "./text-area.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./text-area.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "initHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "number"
                },
                {
                    "name": "isRequired",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean"
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string"
                },
                {
                    "name": "errorTexts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "KeyValuePair<string>",
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "blur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "_initHeight",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "textArea",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLTextAreaElement>",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'textarea'"
                        }
                    ]
                },
                {
                    "name": "_value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | string[]",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "onTouch",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "changeText",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resizeElement",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  AfterViewInit,\r\n  Component,\r\n  ElementRef,\r\n  forwardRef,\r\n  Input,\r\n  OnInit,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { BaseControlValueAccessorComponent } from '../../../core/base-component/base-value-accessor';\r\n\r\n@Component({\r\n  selector: 'app-text-area',\r\n  templateUrl: './text-area.component.html',\r\n  styleUrls: ['./text-area.component.scss'],\r\n  host: { class: 'text-area' },\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => TextAreaComponent),\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class TextAreaComponent\r\n  extends BaseControlValueAccessorComponent\r\n  implements OnInit, AfterViewInit\r\n{\r\n  @Input() label = '';\r\n  @Input() isRequired = false;\r\n  @Input() set initHeight(value: number) {\r\n    this._initHeight = value;\r\n    if (this.textArea) {\r\n      this.textArea.nativeElement.style.minHeight = this.initHeight + 'px';\r\n    }\r\n  }\r\n\r\n  get initHeight(): number {\r\n    return this._initHeight;\r\n  }\r\n\r\n  @ViewChild('textarea') textArea: ElementRef<HTMLTextAreaElement>;\r\n\r\n  private _initHeight = 100;\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  ngAfterViewInit(): void {\r\n    this.textArea.nativeElement.style.minHeight = this.initHeight + 'px';\r\n    this.resizeElement();\r\n  }\r\n\r\n  private resizeElement() {\r\n    this.textArea.nativeElement.style.height = 'auto';\r\n    this.textArea.nativeElement.style.height =\r\n      this.textArea.nativeElement.scrollHeight + 'px';\r\n  }\r\n\r\n  changeText() {\r\n    this.resizeElement();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "textarea{\r\n  line-height: 24px;\r\n  letter-spacing: 0.15px;\r\n\r\n}\r\n\r\ntextarea.mat-input-element {\r\n  resize: none !important;\r\n  overflow-y: visible;\r\n}\r\n\r\n",
                    "styleUrl": "./text-area.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 45
            },
            "extends": "BaseControlValueAccessorComponent",
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "accessors": {
                "initHeight": {
                    "name": "initHeight",
                    "setSignature": {
                        "name": "initHeight",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 32,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "initHeight",
                        "type": "number",
                        "returnType": "number",
                        "line": 39
                    }
                }
            },
            "templateData": "<div class=\"text-area-wp\">\r\n  <mat-form-field class=\"w100\" appearance=\"outline\">\r\n    <mat-label>\r\n      <span *ngIf=\"!isRequired; else required\">\r\n        {{label}}\r\n      </span>\r\n    </mat-label>\r\n    <textarea\r\n      #textarea\r\n      (input)=\"changeText()\"\r\n      (blur)=\"onBlur()\"\r\n      [(ngModel)]=\"value\"\r\n      matInput\r\n    ></textarea>\r\n  </mat-form-field>\r\n</div>\r\n\r\n<ng-template #required>\r\n  <span class=\"asterisk\">*</span>\r\n  <span>&#32;</span> {{label}}\r\n</ng-template>\r\n"
        },
        {
            "name": "TextInputComponent",
            "id": "component-TextInputComponent-2e8fbbd051d31db063e19e87b1865266",
            "file": "src/app/ui-lib/input/text-input/text-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => TextInputComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-text-input",
            "styleUrls": [
                "./text-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./text-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isRequired",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean"
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "string"
                },
                {
                    "name": "errorTexts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "KeyValuePair<string>",
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "blur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "_value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | string[]",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "onTouch",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  Output,\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { BaseControlValueAccessorComponent } from '../../../core/base-component/base-value-accessor';\r\n\r\n@Component({\r\n  selector: 'app-text-input',\r\n  templateUrl: './text-input.component.html',\r\n  styleUrls: ['./text-input.component.scss'],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => TextInputComponent),\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class TextInputComponent extends BaseControlValueAccessorComponent {\r\n  error: string;\r\n\r\n  @Input() isRequired = false;\r\n  @Input() label = '';\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".input-wp {\r\n  position: relative;\r\n  width: 100%;\r\n\r\n  .error-wp {\r\n    position: absolute;\r\n    bottom: 1px;\r\n    left: 22px;\r\n    font-size: 12px;\r\n    letter-spacing: 0.4px;\r\n    color: #B00020;\r\n  }\r\n}\r\n",
                    "styleUrl": "./text-input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 27
            },
            "extends": "BaseControlValueAccessorComponent",
            "templateData": "<div class=\"input-wp\">\r\n  <mat-form-field class=\"w100\" appearance=\"outline\">\r\n    <mat-label>\r\n      <span *ngIf=\"!isRequired; else required\">\r\n        {{label}}\r\n      </span>\r\n    </mat-label>\r\n\r\n    <input (blur)=\"onBlur()\" [(ngModel)]=\"value\" matInput>\r\n\r\n  </mat-form-field>\r\n\r\n  <ng-container *ngIf=\"error\">\r\n    <div class=\"error-wp\">\r\n      <span>{{error}}</span>\r\n    </div>\r\n  </ng-container>\r\n</div>\r\n\r\n<ng-template #required>\r\n  <span class=\"asterisk\">*</span>\r\n  <span>&#32;</span> {{label}}\r\n</ng-template>\r\n"
        },
        {
            "name": "TitleComponent",
            "id": "component-TitleComponent-764f63e2ec74615a63760afc910b1bef",
            "file": "src/app/ui-lib/text/title/title.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-title",
            "styleUrls": [
                "./title.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./title.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "link",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string"
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string | undefined"
                },
                {
                    "name": "type",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "TitleSizeType"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { TitleSizeType } from '../../../core/types/title.type';\r\n\r\n@Component({\r\n  selector: 'app-title',\r\n  templateUrl: './title.component.html',\r\n  styleUrls: ['./title.component.scss'],\r\n})\r\nexport class TitleComponent implements OnInit {\r\n  @Input() text: string | undefined;\r\n  @Input() type: TitleSizeType = 'medium';\r\n  @Input() link: string = '';\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".title {\r\n  font-weight: 500;\r\n  line-height: 24px;\r\n}\r\n",
                    "styleUrl": "./title.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<a [routerLink]=\"link\">\r\n  <span\r\n    [ngClass]=\"'title-' + type\"\r\n  >{{text}}</span>\r\n</a>\r\n\r\n\r\n"
        },
        {
            "name": "TokensComponent",
            "id": "component-TokensComponent-74da9c1d4bf01b6823eba440d1ddc4e2",
            "file": "src/app/ui-lib/balance/tokens/tokens.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tokens",
            "styleUrls": [
                "./tokens.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tokens.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "iconMargin",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string"
                },
                {
                    "name": "showIcon",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean"
                },
                {
                    "name": "size",
                    "defaultValue": "'small'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "\"small\" | \"medium\""
                },
                {
                    "name": "tokens",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "number | string | null"
                },
                {
                    "name": "type",
                    "defaultValue": "'secondary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "\"primary\" | \"secondary\""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dividedTokens",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "prepareToken",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-tokens',\r\n  templateUrl: './tokens.component.html',\r\n  styleUrls: ['./tokens.component.scss'],\r\n})\r\nexport class TokensComponent implements OnInit, OnChanges {\r\n  @Input() tokens: number | string | null = 0;\r\n  @Input() size: 'small' | 'medium' = 'small';\r\n  @Input() showIcon = false;\r\n  @Input() iconMargin = '';\r\n  @Input() type: 'primary' | 'secondary' = 'secondary';\r\n  dividedTokens: string[] = [];\r\n\r\n  constructor() {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.tokens) {\r\n      this.prepareToken();\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  private prepareToken() {\r\n    this.dividedTokens = this.tokens\r\n      ? this.tokens.toString().split('.')\r\n      : ['0', '0000'];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tokens-wp {\r\n  line-height: 24px;\r\n  color: rgba(0, 0, 0, 0.38);\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  mat-icon {\r\n    width: 20px;\r\n    margin-right: 6px;\r\n  }\r\n\r\n  &>span:last-child {\r\n    margin-left: 4px;\r\n  }\r\n}\r\n\r\n.small {\r\n  font-size: 14px;\r\n}\r\n\r\n.medium {\r\n  font-size: 17px;\r\n}\r\n\r\n.secondary {\r\n  .strong{\r\n    color: #222222;\r\n    font-weight: 500;\r\n  }\r\n}\r\n\r\n.primary {\r\n  font-size: 14px;\r\n  color: var(--main-color) !important;\r\n}\r\n",
                    "styleUrl": "./tokens.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 20
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div [ngClass]=\"[size, type]\" class=\"tokens-wp\">\r\n  <mat-icon *ngIf=\"showIcon\"\r\n            svgIcon=\"coin-icon\"\r\n            [style.margin]=\"iconMargin\"\r\n  ></mat-icon>\r\n  <span class=\"strong\">{{dividedTokens[0]}}</span>\r\n  <span>.</span>\r\n  <span>{{dividedTokens[1]}}</span>\r\n  <span class=\"strong\">SUB</span>\r\n</div>\r\n"
        },
        {
            "name": "UpvoteButtonComponent",
            "id": "component-UpvoteButtonComponent-8522f7218f7b7836cca7a1ab731aaeb2",
            "file": "src/app/ui-lib/buttons/upvote-button/upvote-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-upvote-button",
            "styleUrls": [
                "./upvote-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./upvote-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "count",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "number"
                },
                {
                    "name": "isActive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean"
                },
                {
                    "name": "isShowLabel",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "setIsActive",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-upvote-button',\n  templateUrl: './upvote-button.component.html',\n  styleUrls: ['./upvote-button.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class UpvoteButtonComponent {\n  @Input() isShowLabel: boolean = false;\n  @Input() isActive: boolean = false;\n  @Input() count: number = 0;\n\n  setIsActive(value: boolean) {\n    this.isActive = value;\n    this.count = value ? ++this.count : --this.count;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.active {\r\n  color: #3BB356 !important;\r\n}\r\n\r\n",
                    "styleUrl": "./upvote-button.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<app-icon-button *ngIf=\"!isActive\"\r\n                 [iconSize]=\"22\"\r\n                 [buttonSize]=\"32\"\r\n                 [iconName]=\"'upvote-default-icon'\"\r\n                 (click)=\"setIsActive(true)\"\r\n></app-icon-button>\r\n\r\n<app-icon-button *ngIf=\"isActive\"\r\n                 [iconSize]=\"22\"\r\n                 [buttonSize]=\"32\"\r\n                 [iconName]=\"'upvote-active-icon'\"\r\n                 (click)=\"setIsActive(false)\"\r\n></app-icon-button>\r\n\r\n<span class=\"action-panel-label\"\r\n      *ngIf=\"isShowLabel\"\r\n>\r\n  Upvote\r\n  <span *ngIf=\"count > 0\">\r\n    ({{count | numeral}})\r\n  </span>\r\n</span>\r\n\r\n<span\r\n  class=\"action-panel-label\"\r\n  [ngClass]=\"{ 'active': isActive }\"\r\n  *ngIf=\"!isShowLabel && count > 0\"\r\n>\r\n  {{count | numeral}}\r\n</span>\r\n\r\n\r\n\r\n"
        },
        {
            "name": "VoteModalDialogComponent",
            "id": "component-VoteModalDialogComponent-1e3f54fcfaaba6db4f18dd33712a9916",
            "file": "src/app/shared/modal-dialogs/vote-modal-dialog/vote-modal-dialog.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-vote-modal-dialog",
            "styleUrls": [
                "./vote-modal-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./vote-modal-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeTab",
                    "defaultValue": "this.tabLinks[0]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TabLinkData",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReactionModalData",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<VoteModalDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "downvotesIds",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "reactionCount",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "tabLinks",
                    "defaultValue": "[\r\n    { tabName: 'upvotes', additionalInfo: this.data.upvotesCount },\r\n    { tabName: 'downvotes', additionalInfo: this.data.downvotesCount },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TabLinkData[]",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "upvotesIds",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onTabClick",
                    "args": [
                        {
                            "name": "activeTab",
                            "type": "TabLinkData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "activeTab",
                            "type": "TabLinkData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Inject,\r\n  OnInit,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { from } from 'rxjs';\r\nimport { TabLinkData } from '../../../core/models/tab-link-data.model';\r\nimport { ReactionModalData } from '../../../core/types/dialog-modal-data.types';\r\nimport { PostService } from '../../../post/services/post.service';\r\nimport { switchMap, take } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-vote-modal-dialog',\r\n  templateUrl: './vote-modal-dialog.component.html',\r\n  styleUrls: ['./vote-modal-dialog.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class VoteModalDialogComponent implements OnInit {\r\n  public tabLinks: TabLinkData[] = [\r\n    { tabName: 'upvotes', additionalInfo: this.data.upvotesCount },\r\n    { tabName: 'downvotes', additionalInfo: this.data.downvotesCount },\r\n  ];\r\n\r\n  activeTab: TabLinkData = this.tabLinks[0];\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<VoteModalDialogComponent>,\r\n    private postService: PostService,\r\n    @Inject(MAT_DIALOG_DATA) public data: ReactionModalData,\r\n    private cd: ChangeDetectorRef\r\n  ) {}\r\n\r\n  upvotesIds: string[] = [];\r\n  downvotesIds: string[] = [];\r\n\r\n  reactionCount: number = 0;\r\n\r\n  ngOnInit(): void {\r\n    from(this.postService.getReactionIdsByPostId(this.data.postId))\r\n      .pipe(\r\n        switchMap((ids) => from(this.postService.getReactionsByIds(ids))),\r\n        take(1)\r\n      )\r\n      .subscribe((reactions) => {\r\n        reactions.forEach((reaction) =>\r\n          reaction.isUpvote\r\n            ? this.upvotesIds.push(reaction.profileId)\r\n            : this.downvotesIds.push(reaction.profileId)\r\n        );\r\n\r\n        this.reactionCount = this.upvotesIds.length + this.downvotesIds.length;\r\n        this.cd.markForCheck();\r\n      });\r\n  }\r\n\r\n  onTabClick(activeTab: TabLinkData) {\r\n    this.activeTab = activeTab;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n\r\n",
                    "styleUrl": "./vote-modal-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<VoteModalDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postService",
                        "type": "PostService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "ReactionModalData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<VoteModalDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postService",
                        "type": "PostService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "ReactionModalData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"modal-wp\">\r\n  <div class=\"modal-header\">\r\n    <h2>{{reactionCount + ' ' + (reactionCount | pluralize: 'Reaction')}}</h2>\r\n    <app-close-button class=\"close-btn\" (onClose)=\"dialogRef.close()\"></app-close-button>\r\n  </div>\r\n  <div class=\"modal-tabs\">\r\n    <app-tabs (tabClick)=\"onTabClick($event)\" [activeLink]=\"activeTab\" [tabLinks]=\"tabLinks\"></app-tabs>\r\n  </div>\r\n\r\n  <div class=\"modal-body\">\r\n    <ng-container *ngIf=\"activeTab.tabName === 'upvotes'\">\r\n      <ng-container *ngIf=\"upvotesIds.length > 0; else noDownload\">\r\n        <app-vote-user-list [ids]=\"upvotesIds\"></app-vote-user-list>\r\n      </ng-container>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"activeTab.tabName === 'downvotes'\">\r\n      <ng-container *ngIf=\"downvotesIds.length > 0; else noDownload\">\r\n        <app-vote-user-list [ids]=\"downvotesIds\"></app-vote-user-list>\r\n      </ng-container>\r\n    </ng-container>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #noDownload>\r\n  <app-row margin=\"16px 0 0\" h=\"center\">No download yet</app-row>\r\n</ng-template>\r\n"
        },
        {
            "name": "VoteUserListComponent",
            "id": "component-VoteUserListComponent-ee32f91b1c011fe08679614cf64733b7",
            "file": "src/app/shared/components/vote-user-list/vote-user-list.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-vote-user-list",
            "styleUrls": [
                "./vote-user-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./vote-user-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ids",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string[] | null",
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "type",
                    "defaultValue": "'public'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "\"public\" | \"all\"",
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "action$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Actions",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "cd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "store",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Store<AppState>",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "isBlockInfinityScroll",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "isLoading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "listData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<T>",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "listDataIds",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "scrollDistance",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "scrollDownEvent$",
                    "defaultValue": "this.scrollDownEventSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "scrollDownEventSource",
                    "defaultValue": "new BehaviorSubject<ScrollProps>(\r\n    this.scrollProps\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "scrollProps",
                    "defaultValue": "new ScrollProps(20)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "unsubscribe$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "addUniqueDataToListDataArray",
                    "args": [
                        {
                            "name": "itemDictionary",
                            "type": "KeyValuePair<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "itemDictionary",
                            "type": "KeyValuePair<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "getScrollableData",
                    "args": [
                        {
                            "name": "dispatchAction",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selector",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selectAction",
                            "type": "ActionCreator",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dispatchAction",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selector",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selectAction",
                            "type": "ActionCreator",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "loadFinish",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "loadStart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "onScrollDown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "scrollEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "sliceIds",
                    "args": [
                        {
                            "name": "arr",
                            "type": "Array<string>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "props",
                            "type": "ScrollProps",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "arr",
                            "type": "Array<string>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "props",
                            "type": "ScrollProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "trackById",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n} from '@angular/core';\nimport { BaseInfinityScrollComponent } from '../../../core/base-component/base-infinity-scroll.component';\nimport { UserInfo } from '../../../core/models/user-info.model';\nimport { Store } from '@ngrx/store';\nimport { AppState } from '../../../state/state';\nimport {\n  loadProfiles,\n  upsertProfiles,\n} from '../../../state/profile/profile.actions';\nimport { selectUserInfoByIds } from '../../../state/profile/profile.selectors';\nimport { Actions } from '@ngrx/effects';\n\n@Component({\n  selector: 'app-vote-user-list',\n  templateUrl: './vote-user-list.component.html',\n  styleUrls: ['./vote-user-list.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VoteUserListComponent extends BaseInfinityScrollComponent<UserInfo> {\n  constructor(\n    public store: Store<AppState>,\n    public cd: ChangeDetectorRef,\n    public action$: Actions\n  ) {\n    super(store, cd, action$);\n  }\n\n  ngOnInit(): void {\n    this.getScrollableData(loadProfiles, selectUserInfoByIds, upsertProfiles);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".scroll-container {\r\n  overflow-y: scroll;\r\n  height: 550px;\r\n  min-height: 550px;\r\n  margin: 0 4px 0 16px;\r\n}\r\n",
                    "styleUrl": "./vote-user-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseInfinityScrollComponent",
            "templateData": "<ng-container>\n\n  <div class=\"scroll-container scrollable-list-wp\">\n    <div\n      infinite-scroll\n      [infiniteScrollThrottle]=\"50\"\n      [infiniteScrollDistance]=\"scrollDistance\"\n      (scrolled)=\"onScrollDown()\"\n      [infiniteScrollDisabled]=\"isBlockInfinityScroll\"\n      [fromRoot]=\"true\"\n      [infiniteScrollContainer]=\"'.scroll-container'\"\n    >\n      <div class=\"modal-list\" *ngFor=\"let data of listData; trackBy: trackById\">\n          <app-vote-user-list-item\n            [userInfo]=\"data\">\n          </app-vote-user-list-item>\n      </div>\n\n      <app-spinner [showSpinner]=\"isLoading\" [text]=\"'Loading more profiles...'\"></app-spinner>\n    </div>\n  </div>\n\n</ng-container>\n"
        },
        {
            "name": "VoteUserListItemComponent",
            "id": "component-VoteUserListItemComponent-51f5c56e5c207f49f95d8cd5f10d3f65",
            "file": "src/app/shared/components/vote-user-list-item/vote-user-list-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-vote-user-list-item",
            "styleUrls": [
                "./vote-user-list-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./vote-user-list-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isHover",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean"
                },
                {
                    "name": "type",
                    "defaultValue": "'follow'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "UserListType"
                },
                {
                    "name": "userInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "UserInfo"
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "avatarBaseUrl",
                    "defaultValue": "environment.ipfsUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showCopyButton",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "follow",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onMouseHover",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseover'"
                        }
                    ]
                },
                {
                    "name": "onMouseLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseleave'"
                        }
                    ]
                },
                {
                    "name": "unFollow",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "mouseleave",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25
                },
                {
                    "name": "mouseover",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { EventEmitter, HostListener, Input, Output } from '@angular/core';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { UserInfo } from '../../../core/models/user-info.model';\r\nimport { UserListType } from '../../../core/types/user-list.type';\r\nimport { environment } from '../../../../environments/environment';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'app-vote-user-list-item',\r\n  templateUrl: './vote-user-list-item.component.html',\r\n  styleUrls: ['./vote-user-list-item.component.scss'],\r\n})\r\nexport class VoteUserListItemComponent implements OnInit {\r\n  @Input() userInfo: UserInfo;\r\n  @Input() type: UserListType = 'follow';\r\n  @Output() onClick = new EventEmitter();\r\n  @Input() isHover: boolean;\r\n  showCopyButton = false;\r\n  avatarBaseUrl = environment.ipfsUrl;\r\n\r\n  @HostListener('mouseover') onMouseHover() {\r\n    this.showCopyButton = true;\r\n  }\r\n\r\n  @HostListener('mouseleave') onMouseLeave() {\r\n    this.showCopyButton = false;\r\n  }\r\n\r\n  constructor(public dialogRef: MatDialog) {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  follow() {}\r\n\r\n  unFollow() {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".vote-item-wp {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 8px 0;\r\n  border-bottom: 1px solid  rgba(33, 33, 33, 0.08);\r\n  margin-right: 5px;\r\n\r\n  //&:hover {\r\n  //  background: rgba(0, 0, 0, 0.04);\r\n  //}\r\n\r\n  &>div {\r\n    display: flex;\r\n  }\r\n\r\n  .user-info-wp {\r\n    margin-left: 16px;\r\n\r\n    .user-name {\r\n      font-weight: 500;\r\n      font-size: 16px;\r\n      line-height: 22px;\r\n      letter-spacing: 0.25px;\r\n      color: rgba(0, 0, 0, 0.87);\r\n    }\r\n  }\r\n\r\n  .sub-wb {\r\n    span {\r\n      font-weight: 500;\r\n      font-size: 14px;\r\n      padding-left: 4px;\r\n      color: #A0A0A0;\r\n    }\r\n  }\r\n}\r\n\r\n.sub {\r\n  cursor: pointer;\r\n}\r\n\r\n.hover {\r\n  &:hover {\r\n    background: rgba(0, 0, 0, 0.04);\r\n  }\r\n}\r\n",
                    "styleUrl": "./vote-user-list-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"userInfo\">\r\n  <div class=\"vote-item-wp\"\r\n       [ngClass]=\"{\r\n          'hover': isHover,\r\n          'sub': type === 'sub',\r\n          'follow': type === 'follow'\r\n        }\"\r\n       (click)=\"onClick.emit()\">\r\n    <div>\r\n      <app-avatar\r\n        [src]=\"userInfo.avatarSrc\"\r\n        [jdentityValue]=\"userInfo.address\"\r\n      >\r\n      </app-avatar>\r\n\r\n      <div class=\"user-info-wp\">\r\n        <a (click)=\"dialogRef.closeAll()\"\r\n           [routerLink]=\"['/accounts/', userInfo.address]\"\r\n           class=\"user-name\">\r\n          {{userInfo.userName || (userInfo.address | addressHidden)}}\r\n        </a>\r\n\r\n        <app-address\r\n          [address]=\"userInfo.address\"\r\n          [showCopyButton]=\"showCopyButton\"\r\n        ></app-address>\r\n      </div>\r\n    </div>\r\n\r\n    <app-follow-button\r\n      *ngIf=\"type === 'follow'\"\r\n      [isFollow]=\"userInfo.isFollowing\"\r\n      (onFollow)=\"follow()\"\r\n      (onUnfollow)=\"unFollow()\"\r\n    ></app-follow-button>\r\n\r\n    <div class=\"sub-wb\" *ngIf=\"type === 'sub'\">\r\n      <app-tokens [tokens]=\"userInfo.balance!\"></app-tokens>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n\r\n"
        },
        {
            "name": "WritePostButtonComponent",
            "id": "component-WritePostButtonComponent-a11bdefd2592b0d91d61163a88a3d88a",
            "file": "src/app/ui-lib/buttons/write-post-button/write-post-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-write-post-button",
            "styleUrls": [
                "./write-post-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./write-post-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "width",
                    "defaultValue": "'static'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "\"full\" | \"static\""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-write-post-button',\r\n  templateUrl: './write-post-button.component.html',\r\n  styleUrls: ['./write-post-button.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class WritePostButtonComponent {\r\n  @Input() width: 'full' | 'static' = 'static';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-stroked-button {\r\n  border: 1px solid #EB2F96 !important;\r\n}\r\n\r\n.static {\r\n\r\n}\r\n\r\n.full {\r\n  width: 100%;\r\n}\r\n\r\n.write-post-button {\r\n  cursor: pointer;\r\n  font-size: 17px;\r\n}\r\n",
                    "styleUrl": "./write-post-button.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<a [routerLink]=\"['/posts/create']\" [ngClass]=\"width\" class=\"write-post-button\" mat-stroked-button color=\"primary\">\r\n  Write post\r\n</a>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AccountModule",
            "id": "module-AccountModule-c26aa357bb04642e2435efcf8de56774",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/account/account.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ProfileComponent } from './profile/profile.component';\r\nimport { AccountComponent } from './account/account.component';\r\nimport { SharedModule } from '../shared/shared.module';\r\nimport { PostModule } from '../post/post.module';\r\nimport { SpaceModule } from '../space/space.module';\r\nimport { AddressModule } from '../ui-lib/address/address.module';\r\nimport { BalanceModule } from '../ui-lib/balance/balance.module';\r\nimport { ButtonsModule } from '../ui-lib/buttons/buttons.module';\r\nimport { TextModule } from '../ui-lib/text/text.module';\r\nimport { ContainersModule } from '../ui-lib/containers/containers.module';\r\nimport { ContentModule } from '../ui-lib/content/content.module';\r\nimport { ProfileModule } from '../ui-lib/profile/profile.module';\r\nimport { AccountRoutingModule } from './account-routing.module';\r\n\r\n@NgModule({\r\n  declarations: [ProfileComponent, AccountComponent],\r\n  imports: [\r\n    CommonModule,\r\n    PostModule,\r\n    SpaceModule,\r\n    AddressModule,\r\n    BalanceModule,\r\n    ButtonsModule,\r\n    TextModule,\r\n    ContainersModule,\r\n    ContentModule,\r\n    SharedModule,\r\n    ProfileModule,\r\n    AccountRoutingModule,\r\n  ],\r\n})\r\nexport class AccountModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccountComponent"
                        },
                        {
                            "name": "ProfileComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AccountRoutingModule"
                        },
                        {
                            "name": "AddressModule"
                        },
                        {
                            "name": "BalanceModule"
                        },
                        {
                            "name": "ButtonsModule"
                        },
                        {
                            "name": "ContainersModule"
                        },
                        {
                            "name": "ContentModule"
                        },
                        {
                            "name": "PostModule"
                        },
                        {
                            "name": "ProfileModule"
                        },
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "SpaceModule"
                        },
                        {
                            "name": "TextModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AccountRoutingModule",
            "id": "module-AccountRoutingModule-e1a1fca8081aa9638f3717e44ade490c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/account/account-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { AccountComponent } from './account/account.component';\r\n\r\nconst routes: Routes = [{path: ':userId', component: AccountComponent}];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AccountRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ActionPanelModule",
            "id": "module-ActionPanelModule-3ad11624a06f23628ed3f3c615417350",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/ui-lib/action-panel/action-panel.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ActionPanelComponent } from './action-panel.component';\nimport { ButtonsModule } from '../buttons/buttons.module';\n\n@NgModule({\n  declarations: [ActionPanelComponent],\n  imports: [CommonModule, ButtonsModule],\n  exports: [ActionPanelComponent],\n})\nexport class ActionPanelModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ActionPanelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ActionPanelComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AddressModule",
            "id": "module-AddressModule-ddce4261f1c0e77b0e795d39308dd178",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/ui-lib/address/address.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AddressComponent } from './address.component';\nimport { MatIconModule } from '@angular/material/icon';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { ButtonsModule } from '../buttons/buttons.module';\nimport { PipesModule } from '../../shared/pipes/pipes.module';\n\n@NgModule({\n  declarations: [AddressComponent],\n  imports: [\n    CommonModule,\n    MatIconModule,\n    ClipboardModule,\n    ButtonsModule,\n    PipesModule,\n  ],\n  exports: [AddressComponent],\n})\nexport class AddressModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddressComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AddressComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "id": "module-AppModule-efd603fa88cbbafe88afc964dc8a7dd1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { APP_INITIALIZER, NgModule } from '@angular/core';\r\nimport {\r\n  BrowserModule,\r\n  BrowserTransferStateModule,\r\n} from '@angular/platform-browser';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { SharedModule } from './shared/shared.module';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { IconRegistryService } from './shared/services/icon-registry.service';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SpaceModule } from './space/space.module';\r\nimport { ErrorStateMatcher } from '@angular/material/core';\r\nimport { AppErrorStateMatcher } from './core/errors/error-matcher';\r\nimport { BaseControlValueAccessorComponent } from './core/base-component/base-value-accessor';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\r\nimport { environment } from '../environments/environment';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { SpaceEffects } from './state/space/space.effects';\r\nimport { appReducers } from './state/state';\r\nimport { SubsocialApiService } from './shared/services/subsocial-api.service';\r\nimport { ContentEffects } from './state/content/content.effects';\r\nimport { PostEffects } from './state/post/post.effects';\r\nimport { ReplyIdEffects } from './state/reply-id/reply-id.effects';\r\nimport { ProfileEffects } from './state/profile/profile.effects';\r\nimport { RouterModule } from '@angular/router';\r\nimport { MyPostReactionsEffects } from './state/my-post-reactions/my-post-reactions.effects';\r\nimport { PostModule } from './post/post.module';\r\n\r\n@NgModule({\r\n  declarations: [AppComponent, BaseControlValueAccessorComponent],\r\n  imports: [\r\n    CommonModule,\r\n    BrowserModule.withServerTransition({ appId: 'serverApp' }),\r\n    AppRoutingModule,\r\n    HttpClientModule,\r\n    PostModule,\r\n    SpaceModule,\r\n    BrowserAnimationsModule,\r\n    BrowserTransferStateModule,\r\n    RouterModule,\r\n    StoreModule.forRoot(appReducers, {}),\r\n    StoreDevtoolsModule.instrument({\r\n      maxAge: 25,\r\n      logOnly: environment.production,\r\n    }),\r\n    EffectsModule.forRoot([\r\n      SpaceEffects,\r\n      ContentEffects,\r\n      PostEffects,\r\n      ReplyIdEffects,\r\n      ProfileEffects,\r\n      MyPostReactionsEffects,\r\n    ]),\r\n    SharedModule,\r\n  ],\r\n  providers: [\r\n    IconRegistryService,\r\n    SubsocialApiService,\r\n    {\r\n      provide: APP_INITIALIZER,\r\n      useFactory: registryIcons,\r\n      deps: [IconRegistryService],\r\n      multi: true,\r\n    },\r\n    {\r\n      provide: APP_INITIALIZER,\r\n      useFactory: initApi,\r\n      deps: [SubsocialApiService],\r\n      multi: true,\r\n    },\r\n    { provide: ErrorStateMatcher, useClass: AppErrorStateMatcher },\r\n  ],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {}\r\n\r\nexport function registryIcons(service: IconRegistryService) {\r\n  return () => service.init();\r\n}\r\n\r\nexport function initApi(service: SubsocialApiService) {\r\n  return () => service.initSubsocialApi();\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "IconRegistryService"
                        },
                        {
                            "name": "SubsocialApiService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "BaseControlValueAccessorComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "PostModule"
                        },
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "SpaceModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-a955c8c7a96d7e1acc85a25dc3c54a14",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { SpaceComponent } from './space/space/space.component';\r\nimport { PostComponent } from './post/post/post.component';\r\nimport { EditSpaceComponent } from './space/edit-space/edit-space.component';\r\nimport { EditPostComponent } from './post/edit-post/edit-post.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    loadChildren: () => \"import('./main/main.module').then((m) => m.MainModule)\",\r\n    pathMatch: 'full',\r\n  },\r\n  {\r\n    path: 'spaces/:type',\r\n    component: EditSpaceComponent,\r\n  },\r\n  { path: 'posts/:type', component: EditPostComponent },\r\n  {\r\n    path: 'accounts',\r\n    loadChildren: () =>\r\n      \"import('./account/account.module').then((m) => m.AccountModule)\",\r\n  },\r\n  {\r\n    path: 'notification',\r\n    loadChildren: () =>\r\n      \"import('./notification/notification.module').then(\\\n        (m) => m.NotificationModule\\\n      )\",\r\n  },\r\n  {\r\n    path: ':spaceId',\r\n    component: SpaceComponent,\r\n  },\r\n  { path: ':spaceId/:slug', component: PostComponent },\r\n  { path: '**', redirectTo: '' },\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    RouterModule.forRoot(routes, {\r\n      initialNavigation: 'enabled',\r\n      scrollPositionRestoration: 'enabled',\r\n    }),\r\n  ],\r\n  exports: [RouterModule],\r\n})\r\nexport class AppRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppServerModule",
            "id": "module-AppServerModule-e2d40d7166ed00f6cdef619309043937",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.server.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport {\n  ServerModule,\n  ServerTransferStateModule,\n} from '@angular/platform-server';\n\nimport { AppModule } from './app.module';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  imports: [AppModule, ServerModule, ServerTransferStateModule],\n  bootstrap: [AppComponent],\n})\nexport class AppServerModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AvatarModule",
            "id": "module-AvatarModule-b5a899bbd75e44d713b5cd53dc721dd2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/ui-lib/avatar/avatar.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AvatarComponent } from './avatar.component';\nimport { NgxJdenticonModule } from 'ngx-jdenticon';\n\n@NgModule({\n  declarations: [AvatarComponent],\n  imports: [CommonModule, NgxJdenticonModule],\n  exports: [AvatarComponent],\n})\nexport class AvatarModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AvatarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AvatarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BalanceModule",
            "id": "module-BalanceModule-0db441049a459f138acc66979839bb09",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/ui-lib/balance/balance.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TokensComponent } from './tokens/tokens.component';\nimport { MatIconModule } from '@angular/material/icon';\n\n@NgModule({\n  declarations: [TokensComponent],\n  imports: [CommonModule, MatIconModule],\n  exports: [TokensComponent],\n})\nexport class BalanceModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TokensComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TokensComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ButtonsModule",
            "id": "module-ButtonsModule-68fca25c9252c36155393853ddac6798",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/ui-lib/buttons/buttons.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IconButtonComponent } from './icon-button/icon-button.component';\nimport { CloseButtonComponent } from './close-button/close-button.component';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { FollowButtonComponent } from './follow-button/follow-button.component';\nimport { OptionButtonComponent } from './option-button/option-button.component';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { SendTipsButtonComponent } from './send-tips-button/send-tips-button.component';\nimport { ReplyButtonComponent } from './reply-button/reply-button.component';\nimport { UpvoteButtonComponent } from './upvote-button/upvote-button.component';\nimport { CommentButtonComponent } from './comment-button/comment-button.component';\nimport { PipesModule } from '../../shared/pipes/pipes.module';\nimport { DownvoteButtonComponent } from './downvote-button/downvote-button.component';\nimport { SharedButtonComponent } from './shared-button/shared-button.component';\nimport { SendButtonComponent } from './send-button/send-button.component';\nimport { ProfileButtonComponent } from './profile-button/profile-button.component';\nimport { SendTokensButtonComponent } from './send-tokens-button/send-tokens-button.component';\nimport { WritePostButtonComponent } from './write-post-button/write-post-button.component';\nimport { SignOutButtonComponent } from './sign-out-button/sign-out-button.component';\nimport { EditButtonComponent } from './edit-button/edit-button.component';\nimport { RouterModule } from '@angular/router';\nimport { QrButtonComponent } from './qr-button/qr-button.component';\nimport { ContainersModule } from '../containers/containers.module';\nimport { AvatarModule } from '../avatar/avatar.module';\nimport { AddressModule } from '../address/address.module';\nimport { BalanceModule } from '../balance/balance.module';\n\nconst components = [\n  QrButtonComponent,\n  EditButtonComponent,\n  SendTokensButtonComponent,\n  WritePostButtonComponent,\n  SignOutButtonComponent,\n  ProfileButtonComponent,\n  IconButtonComponent,\n  CloseButtonComponent,\n  FollowButtonComponent,\n  OptionButtonComponent,\n  SendTipsButtonComponent,\n  ReplyButtonComponent,\n  UpvoteButtonComponent,\n  DownvoteButtonComponent,\n  CommentButtonComponent,\n  SharedButtonComponent,\n  SendButtonComponent,\n];\n\n@NgModule({\n  declarations: [...components],\n  exports: [...components],\n  imports: [\n    CommonModule,\n    MatIconModule,\n    MatButtonModule,\n    MatMenuModule,\n    PipesModule,\n    RouterModule,\n    ContainersModule,\n    AvatarModule,\n    BalanceModule,\n  ],\n})\nexport class ButtonsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CloseButtonComponent"
                        },
                        {
                            "name": "CommentButtonComponent"
                        },
                        {
                            "name": "DownvoteButtonComponent"
                        },
                        {
                            "name": "EditButtonComponent"
                        },
                        {
                            "name": "FollowButtonComponent"
                        },
                        {
                            "name": "IconButtonComponent"
                        },
                        {
                            "name": "OptionButtonComponent"
                        },
                        {
                            "name": "ProfileButtonComponent"
                        },
                        {
                            "name": "QrButtonComponent"
                        },
                        {
                            "name": "ReplyButtonComponent"
                        },
                        {
                            "name": "SendButtonComponent"
                        },
                        {
                            "name": "SendTipsButtonComponent"
                        },
                        {
                            "name": "SendTokensButtonComponent"
                        },
                        {
                            "name": "SharedButtonComponent"
                        },
                        {
                            "name": "SignOutButtonComponent"
                        },
                        {
                            "name": "UpvoteButtonComponent"
                        },
                        {
                            "name": "WritePostButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AvatarModule"
                        },
                        {
                            "name": "BalanceModule"
                        },
                        {
                            "name": "ContainersModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CloseButtonComponent"
                        },
                        {
                            "name": "CommentButtonComponent"
                        },
                        {
                            "name": "DownvoteButtonComponent"
                        },
                        {
                            "name": "EditButtonComponent"
                        },
                        {
                            "name": "FollowButtonComponent"
                        },
                        {
                            "name": "IconButtonComponent"
                        },
                        {
                            "name": "OptionButtonComponent"
                        },
                        {
                            "name": "ProfileButtonComponent"
                        },
                        {
                            "name": "QrButtonComponent"
                        },
                        {
                            "name": "ReplyButtonComponent"
                        },
                        {
                            "name": "SendButtonComponent"
                        },
                        {
                            "name": "SendTipsButtonComponent"
                        },
                        {
                            "name": "SendTokensButtonComponent"
                        },
                        {
                            "name": "SharedButtonComponent"
                        },
                        {
                            "name": "SignOutButtonComponent"
                        },
                        {
                            "name": "UpvoteButtonComponent"
                        },
                        {
                            "name": "WritePostButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CommentModule",
            "id": "module-CommentModule-b8bc07ec858ae7ce9f932a820f795d1e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/ui-lib/comment/comment.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CommentInputComponent } from './comment-input/comment-input.component';\nimport { CommentsComponent } from './comments/comments.component';\nimport { CommentMessageComponent } from './comment-message/comment-message.component';\nimport { ReplyCommentsComponent } from './reply-comments/reply-comments.component';\nimport { ButtonsModule } from '../buttons/buttons.module';\nimport { AvatarModule } from '../avatar/avatar.module';\nimport { TextModule } from '../text/text.module';\nimport { SharedModule } from '../../shared/shared.module';\nimport { RouterModule } from '@angular/router';\nimport { AddressModule } from '../address/address.module';\nimport { PipesModule } from '../../shared/pipes/pipes.module';\nimport { ContainersModule } from '../containers/containers.module';\nimport { ActionPanelModule } from '../action-panel/action-panel.module';\n\n@NgModule({\n  declarations: [\n    CommentInputComponent,\n    CommentsComponent,\n    CommentMessageComponent,\n    ReplyCommentsComponent,\n  ],\n  imports: [\n    CommonModule,\n    ButtonsModule,\n    AvatarModule,\n    TextModule,\n    SharedModule,\n    AddressModule,\n    RouterModule,\n    PipesModule,\n    ContainersModule,\n    ActionPanelModule,\n  ],\n  exports: [\n    CommentInputComponent,\n    CommentsComponent,\n    CommentMessageComponent,\n    ReplyCommentsComponent,\n  ],\n})\nexport class CommentModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CommentInputComponent"
                        },
                        {
                            "name": "CommentMessageComponent"
                        },
                        {
                            "name": "CommentsComponent"
                        },
                        {
                            "name": "ReplyCommentsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ActionPanelModule"
                        },
                        {
                            "name": "AddressModule"
                        },
                        {
                            "name": "AvatarModule"
                        },
                        {
                            "name": "ButtonsModule"
                        },
                        {
                            "name": "ContainersModule"
                        },
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "TextModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CommentInputComponent"
                        },
                        {
                            "name": "CommentMessageComponent"
                        },
                        {
                            "name": "CommentsComponent"
                        },
                        {
                            "name": "ReplyCommentsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ContainersModule",
            "id": "module-ContainersModule-ba7ae3b33e7102cf99f478f4f6aa846e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/ui-lib/containers/containers.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RowComponent } from './row/row.component';\nimport { ColumnComponent } from './column/column.component';\nimport { ScrollComponent } from './scroll/scroll.component';\n\n@NgModule({\n  declarations: [RowComponent, ColumnComponent, ScrollComponent],\n  exports: [RowComponent, ColumnComponent, ScrollComponent],\n  imports: [CommonModule],\n})\nexport class ContainersModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ColumnComponent"
                        },
                        {
                            "name": "RowComponent"
                        },
                        {
                            "name": "ScrollComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ColumnComponent"
                        },
                        {
                            "name": "RowComponent"
                        },
                        {
                            "name": "ScrollComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ContentModule",
            "id": "module-ContentModule-e2accf89de85cfad2e5b51e915a1eed6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/ui-lib/content/content.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { EmbedVideoComponent } from './embed-video/embed-video.component';\nimport { PostImageComponent } from './post-image/post-image.component';\nimport { YouTubePlayerModule } from '@angular/youtube-player';\nimport { RouterModule } from '@angular/router';\nimport { HiddenContentComponent } from './hidden-content/hidden-content.component';\nimport { ContainersModule } from '../containers/containers.module';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatRippleModule } from '@angular/material/core';\nimport { NoContentComponent } from './no-content/no-content.component';\nimport { MatCardModule } from '@angular/material/card';\n\n@NgModule({\n  declarations: [\n    EmbedVideoComponent,\n    PostImageComponent,\n    HiddenContentComponent,\n    NoContentComponent,\n  ],\n  imports: [\n    CommonModule,\n    YouTubePlayerModule,\n    RouterModule,\n    ContainersModule,\n    MatIconModule,\n    MatRippleModule,\n    MatCardModule,\n  ],\n  exports: [\n    EmbedVideoComponent,\n    PostImageComponent,\n    HiddenContentComponent,\n    NoContentComponent,\n  ],\n})\nexport class ContentModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "EmbedVideoComponent"
                        },
                        {
                            "name": "HiddenContentComponent"
                        },
                        {
                            "name": "NoContentComponent"
                        },
                        {
                            "name": "PostImageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ContainersModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "EmbedVideoComponent"
                        },
                        {
                            "name": "HiddenContentComponent"
                        },
                        {
                            "name": "NoContentComponent"
                        },
                        {
                            "name": "PostImageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DirectivesModule",
            "id": "module-DirectivesModule-b70ca21fccbccb72c9b38fad8a71fd9c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/directives/directives.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IfMobileDirective } from './if-mobile.directive';\nimport { IfDesktopDirective } from './if-desktop.directive';\n\n@NgModule({\n  declarations: [IfMobileDirective, IfDesktopDirective],\n  imports: [CommonModule],\n  exports: [IfMobileDirective, IfDesktopDirective],\n})\nexport class DirectivesModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "IfDesktopDirective"
                        },
                        {
                            "name": "IfMobileDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "IfDesktopDirective"
                        },
                        {
                            "name": "IfMobileDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "InputModule",
            "id": "module-InputModule-ccf56ed6c8ec551491546dded01c8f80",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/ui-lib/input/input.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TagComponent } from './tag/tag.component';\nimport { TagInputComponent } from './tag-input/tag-input.component';\nimport { TextAreaComponent } from './text-area/text-area.component';\nimport { TextInputComponent } from './text-input/text-input.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { ImageLoaderComponent } from './image-loader/image-loader.component';\n\n@NgModule({\n  declarations: [\n    TagComponent,\n    TagInputComponent,\n    TextAreaComponent,\n    TextInputComponent,\n    ImageLoaderComponent,\n  ],\n  exports: [\n    TagComponent,\n    TagInputComponent,\n    TextAreaComponent,\n    TextInputComponent,\n    ImageLoaderComponent,\n  ],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    MatFormFieldModule,\n    MatChipsModule,\n    MatIconModule,\n    FormsModule,\n    MatInputModule,\n  ],\n})\nexport class InputModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ImageLoaderComponent"
                        },
                        {
                            "name": "TagComponent"
                        },
                        {
                            "name": "TagInputComponent"
                        },
                        {
                            "name": "TextAreaComponent"
                        },
                        {
                            "name": "TextInputComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ImageLoaderComponent"
                        },
                        {
                            "name": "TagComponent"
                        },
                        {
                            "name": "TagInputComponent"
                        },
                        {
                            "name": "TextAreaComponent"
                        },
                        {
                            "name": "TextInputComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MainModule",
            "id": "module-MainModule-605ba0ba8eb59a08c6fc287853b8d925",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/main/main.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MainComponent } from './main/main.component';\nimport {MainRoutingModule} from \"./main-routing.module\";\nimport {SharedModule} from \"../shared/shared.module\";\nimport {SpaceModule} from \"../space/space.module\";\nimport {PostModule} from \"../post/post.module\";\n\n\n\n@NgModule({\n    declarations: [\n        MainComponent,\n    ],\n    exports: [\n        MainComponent\n    ],\n  imports: [\n    CommonModule,\n    MainRoutingModule,\n    SharedModule,\n    SpaceModule,\n    PostModule\n  ]\n})\nexport class MainModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MainComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MainRoutingModule"
                        },
                        {
                            "name": "PostModule"
                        },
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "SpaceModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MainComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MainRoutingModule",
            "id": "module-MainRoutingModule-85bece213b568caa749f4e29b0d06d6f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/main/main-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { MainComponent } from './main/main.component';\r\n\r\nconst routes: Routes = [{ path: '', component: MainComponent }];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class MainRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MenuModule",
            "id": "module-MenuModule-a52ee95821e49b46c42e681b7befef93",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/ui-lib/menu/menu.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SidenavMenuComponent } from './sidenav-menu/sidenav-menu.component';\nimport { MatIconModule } from '@angular/material/icon';\nimport { ContainersModule } from '../containers/containers.module';\nimport { MatRippleModule } from '@angular/material/core';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  declarations: [SidenavMenuComponent],\n  exports: [SidenavMenuComponent],\n  imports: [\n    CommonModule,\n    MatIconModule,\n    ContainersModule,\n    MatRippleModule,\n    RouterModule,\n  ],\n})\nexport class MenuModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SidenavMenuComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ContainersModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SidenavMenuComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NotificationModule",
            "id": "module-NotificationModule-08ed094c08d8b2ab82ed52b822af67e1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/notification/notification.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NotificationPageComponent } from './notification-page/notification-page.component';\r\nimport { SharedModule } from '../shared/shared.module';\r\nimport { TextModule } from '../ui-lib/text/text.module';\r\nimport { PostUiModule } from '../ui-lib/post-ui/post-ui.module';\r\nimport { ContentModule } from '../ui-lib/content/content.module';\r\nimport { NotificationRoutingModule } from './notification-routing.module';\r\n\r\n@NgModule({\r\n  declarations: [NotificationPageComponent],\r\n  imports: [\r\n    CommonModule,\r\n    SharedModule,\r\n    TextModule,\r\n    PostUiModule,\r\n    ContentModule,\r\n    NotificationRoutingModule,\r\n  ],\r\n})\r\nexport class NotificationModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NotificationPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ContentModule"
                        },
                        {
                            "name": "NotificationRoutingModule"
                        },
                        {
                            "name": "PostUiModule"
                        },
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "TextModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NotificationRoutingModule",
            "id": "module-NotificationRoutingModule-6296dff7e2e3f222fe6bd8d355f1059a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/notification/notification-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { NotificationPageComponent } from './notification-page/notification-page.component';\r\n\r\nconst routes: Routes = [{ path: '', component: NotificationPageComponent }];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class NotificationRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PipesModule",
            "id": "module-PipesModule-c1a4901ef38a89ec933413a6472717a9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/pipes/pipes.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PluralizePipe } from './pluralize.pipe';\nimport { DayjsPipe } from './dayjs.pipe';\nimport { LinkToIconPipe } from './link-to-icon.pipe';\nimport { NumeralPipe } from './numeral.pipe';\nimport { AddressHiddenPipe } from './address-hidden.pipe';\n\n@NgModule({\n  declarations: [\n    PluralizePipe,\n    DayjsPipe,\n    LinkToIconPipe,\n    NumeralPipe,\n    AddressHiddenPipe,\n  ],\n  imports: [CommonModule],\n  exports: [\n    NumeralPipe,\n    PluralizePipe,\n    DayjsPipe,\n    LinkToIconPipe,\n    AddressHiddenPipe,\n  ],\n  providers: [PluralizePipe],\n})\nexport class PipesModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddressHiddenPipe"
                        },
                        {
                            "name": "DayjsPipe"
                        },
                        {
                            "name": "LinkToIconPipe"
                        },
                        {
                            "name": "NumeralPipe"
                        },
                        {
                            "name": "PluralizePipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AddressHiddenPipe"
                        },
                        {
                            "name": "DayjsPipe"
                        },
                        {
                            "name": "LinkToIconPipe"
                        },
                        {
                            "name": "NumeralPipe"
                        },
                        {
                            "name": "PluralizePipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PostModule",
            "id": "module-PostModule-8a048830ad2425927bee607aeceb33f9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/post/post.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { PostRoutingModule } from './post-routing.module';\r\nimport { PostListComponent } from './post-list/post-list.component';\r\nimport { SharedModule } from '../shared/shared.module';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { PostComponent } from './post/post.component';\r\nimport { MarkdownModule } from 'ngx-markdown';\r\nimport { EditPostComponent } from './edit-post/edit-post.component';\r\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\r\nimport { TextModule } from '../ui-lib/text/text.module';\r\nimport { ButtonsModule } from '../ui-lib/buttons/buttons.module';\r\nimport { InputModule } from '../ui-lib/input/input.module';\r\nimport { SpaceUiModule } from '../ui-lib/space-ui/space-ui.module';\r\nimport { PipesModule } from '../shared/pipes/pipes.module';\r\nimport { PostUiModule } from '../ui-lib/post-ui/post-ui.module';\r\nimport { ContentModule } from '../ui-lib/content/content.module';\r\nimport { CommentModule } from '../ui-lib/comment/comment.module';\r\nimport { ActionPanelModule } from '../ui-lib/action-panel/action-panel.module';\r\n\r\n@NgModule({\r\n  declarations: [PostListComponent, PostComponent, EditPostComponent],\r\n  exports: [PostListComponent],\r\n  imports: [\r\n    CommonModule,\r\n    PostRoutingModule,\r\n    SharedModule,\r\n    HttpClientModule,\r\n    InfiniteScrollModule,\r\n    MarkdownModule.forRoot(),\r\n    TextModule,\r\n    ButtonsModule,\r\n    InputModule,\r\n    SpaceUiModule,\r\n    PipesModule,\r\n    PostUiModule,\r\n    ContentModule,\r\n    CommentModule,\r\n    ActionPanelModule,\r\n  ],\r\n})\r\nexport class PostModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "EditPostComponent"
                        },
                        {
                            "name": "PostComponent"
                        },
                        {
                            "name": "PostListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ActionPanelModule"
                        },
                        {
                            "name": "ButtonsModule"
                        },
                        {
                            "name": "CommentModule"
                        },
                        {
                            "name": "ContentModule"
                        },
                        {
                            "name": "InputModule"
                        },
                        {
                            "name": "PostRoutingModule"
                        },
                        {
                            "name": "PostUiModule"
                        },
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "SpaceUiModule"
                        },
                        {
                            "name": "TextModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PostListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PostRoutingModule",
            "id": "module-PostRoutingModule-c3a59ef3d91a0e6f845303a68bb2e716",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/post/post-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class PostRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PostUiModule",
            "id": "module-PostUiModule-4f49b538894829c7ed902957fa94236f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/ui-lib/post-ui/post-ui.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PostInfoComponent } from './post-info/post-info.component';\nimport { PostItemComponent } from './post-item/post-item.component';\nimport { SharedPostItemComponent } from './shared-post-item/shared-post-item.component';\nimport { SharedModule } from '../../shared/shared.module';\nimport { TextModule } from '../text/text.module';\nimport { ButtonsModule } from '../buttons/buttons.module';\nimport { AvatarModule } from '../avatar/avatar.module';\nimport { RouterModule } from '@angular/router';\nimport { PipesModule } from '../../shared/pipes/pipes.module';\nimport { ContainersModule } from '../containers/containers.module';\nimport { ContentModule } from '../content/content.module';\nimport { CommentModule } from '../comment/comment.module';\nimport { ActionPanelModule } from '../action-panel/action-panel.module';\n\n@NgModule({\n  declarations: [PostInfoComponent, PostItemComponent, SharedPostItemComponent],\n  imports: [\n    CommonModule,\n    SharedModule,\n    TextModule,\n    ButtonsModule,\n    AvatarModule,\n    RouterModule,\n    PipesModule,\n    ContainersModule,\n    ContentModule,\n    CommentModule,\n    ActionPanelModule,\n  ],\n  exports: [PostInfoComponent, PostItemComponent, SharedPostItemComponent],\n})\nexport class PostUiModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PostInfoComponent"
                        },
                        {
                            "name": "PostItemComponent"
                        },
                        {
                            "name": "SharedPostItemComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ActionPanelModule"
                        },
                        {
                            "name": "AvatarModule"
                        },
                        {
                            "name": "ButtonsModule"
                        },
                        {
                            "name": "CommentModule"
                        },
                        {
                            "name": "ContainersModule"
                        },
                        {
                            "name": "ContentModule"
                        },
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "TextModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PostInfoComponent"
                        },
                        {
                            "name": "PostItemComponent"
                        },
                        {
                            "name": "SharedPostItemComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProfileModule",
            "id": "module-ProfileModule-be6ffaf3f7868805ba34cd328bf5dfc1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/ui-lib/profile/profile.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AccountListItemComponent } from './account-list-item/account-list-item.component';\nimport { ContainersModule } from '../containers/containers.module';\nimport { AddressModule } from '../address/address.module';\nimport { AvatarModule } from '../avatar/avatar.module';\nimport { BalanceModule } from '../balance/balance.module';\nimport { TextModule } from '../text/text.module';\nimport { MatRippleModule } from '@angular/material/core';\nimport { PipesModule } from '../../shared/pipes/pipes.module';\nimport { ProfileInfoComponent } from './profile-info/profile-info.component';\nimport { MatDialogModule } from '@angular/material/dialog';\n\n@NgModule({\n  declarations: [AccountListItemComponent, ProfileInfoComponent],\n  exports: [AccountListItemComponent, ProfileInfoComponent],\n  imports: [\n    CommonModule,\n    ContainersModule,\n    AddressModule,\n    AvatarModule,\n    BalanceModule,\n    TextModule,\n    MatRippleModule,\n    PipesModule,\n    MatDialogModule,\n  ],\n})\nexport class ProfileModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccountListItemComponent"
                        },
                        {
                            "name": "ProfileInfoComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AddressModule"
                        },
                        {
                            "name": "AvatarModule"
                        },
                        {
                            "name": "BalanceModule"
                        },
                        {
                            "name": "ContainersModule"
                        },
                        {
                            "name": "TextModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccountListItemComponent"
                        },
                        {
                            "name": "ProfileInfoComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-e39598c5acaa160e78ff1a33216c46ad",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { ClipboardModule } from '@angular/cdk/clipboard';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { VoteUserListItemComponent } from './components/vote-user-list-item/vote-user-list-item.component';\r\nimport { HeaderComponent } from './components/header/header.component';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { RouterModule } from '@angular/router';\r\nimport { TabsComponent } from './components/tabs/tabs.component';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { VoteModalDialogComponent } from './modal-dialogs/vote-modal-dialog/vote-modal-dialog.component';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { AccountSidenavComponent } from './modal-dialogs/account-sidenav/account-sidenav.component';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { LinkIconsComponent } from './components/link-icons/link-icons.component';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { FollowersModalDialogComponent } from './modal-dialogs/followers-modal-dialog/followers-modal-dialog.component';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { SpinnerComponent } from './components/spinner/spinner.component';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\r\nimport { ConnectionsModalDialogComponent } from './modal-dialogs/connections-modal-dialog/connections-modal-dialog.component';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { QrModalDialogComponent } from './modal-dialogs/qr-modal-dialog/qr-modal-dialog.component';\r\nimport { QRCodeModule } from 'angularx-qrcode';\r\nimport { SignInModalDialogComponent } from './modal-dialogs/sign-in-modal-dialog/sign-in-modal-dialog.component';\r\nimport { VoteUserListComponent } from './components/vote-user-list/vote-user-list.component';\r\nimport { ContainersModule } from '../ui-lib/containers/containers.module';\r\nimport { ButtonsModule } from '../ui-lib/buttons/buttons.module';\r\nimport { MenuModule } from '../ui-lib/menu/menu.module';\r\nimport { AddressModule } from '../ui-lib/address/address.module';\r\nimport { ProfileModule } from '../ui-lib/profile/profile.module';\r\nimport { AvatarModule } from '../ui-lib/avatar/avatar.module';\r\nimport { BalanceModule } from '../ui-lib/balance/balance.module';\r\nimport { TextModule } from '../ui-lib/text/text.module';\r\nimport { PipesModule } from './pipes/pipes.module';\r\nimport { SimpleSnackBarComponent } from './components/simple-snack-bar/simple-snack-bar.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    VoteUserListItemComponent,\r\n    HeaderComponent,\r\n    TabsComponent,\r\n    VoteModalDialogComponent,\r\n    AccountSidenavComponent,\r\n    LinkIconsComponent,\r\n    FollowersModalDialogComponent,\r\n    SpinnerComponent,\r\n    ConnectionsModalDialogComponent,\r\n    QrModalDialogComponent,\r\n    SignInModalDialogComponent,\r\n    VoteUserListComponent,\r\n    SimpleSnackBarComponent,\r\n  ],\r\n  exports: [\r\n    VoteUserListItemComponent,\r\n    HeaderComponent,\r\n    MatButtonModule,\r\n    ClipboardModule,\r\n    MatIconModule,\r\n    MatTabsModule,\r\n    MatCardModule,\r\n    MatDividerModule,\r\n    TabsComponent,\r\n    MatMenuModule,\r\n    AccountSidenavComponent,\r\n    LinkIconsComponent,\r\n    MatTooltipModule,\r\n    MatRippleModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatChipsModule,\r\n    ReactiveFormsModule,\r\n    SpinnerComponent,\r\n    MatSnackBarModule,\r\n    QRCodeModule,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ClipboardModule,\r\n    MatIconModule,\r\n    MatTabsModule,\r\n    MatCardModule,\r\n    RouterModule,\r\n    MatDividerModule,\r\n    MatDialogModule,\r\n    MatSidenavModule,\r\n    MatTooltipModule,\r\n    MatRippleModule,\r\n    MatProgressSpinnerModule,\r\n    InfiniteScrollModule,\r\n    MatSnackBarModule,\r\n    QRCodeModule,\r\n    ContainersModule,\r\n    MenuModule,\r\n    AddressModule,\r\n    ProfileModule,\r\n    AvatarModule,\r\n    BalanceModule,\r\n    TextModule,\r\n    PipesModule,\r\n    ButtonsModule,\r\n  ],\r\n})\r\nexport class SharedModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccountSidenavComponent"
                        },
                        {
                            "name": "ConnectionsModalDialogComponent"
                        },
                        {
                            "name": "FollowersModalDialogComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "LinkIconsComponent"
                        },
                        {
                            "name": "QrModalDialogComponent"
                        },
                        {
                            "name": "SignInModalDialogComponent"
                        },
                        {
                            "name": "SimpleSnackBarComponent"
                        },
                        {
                            "name": "SpinnerComponent"
                        },
                        {
                            "name": "TabsComponent"
                        },
                        {
                            "name": "VoteModalDialogComponent"
                        },
                        {
                            "name": "VoteUserListComponent"
                        },
                        {
                            "name": "VoteUserListItemComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AddressModule"
                        },
                        {
                            "name": "AvatarModule"
                        },
                        {
                            "name": "BalanceModule"
                        },
                        {
                            "name": "ButtonsModule"
                        },
                        {
                            "name": "ContainersModule"
                        },
                        {
                            "name": "MenuModule"
                        },
                        {
                            "name": "ProfileModule"
                        },
                        {
                            "name": "TextModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccountSidenavComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "LinkIconsComponent"
                        },
                        {
                            "name": "SpinnerComponent"
                        },
                        {
                            "name": "TabsComponent"
                        },
                        {
                            "name": "VoteUserListItemComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SpaceModule",
            "id": "module-SpaceModule-cd97eba47696ea11ec204e120a232b17",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/space/space.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { SpaceRoutingModule } from './space-routing.module';\r\nimport { SharedModule } from '../shared/shared.module';\r\nimport { SpaceListComponent } from './space-list/space-list.component';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { SpaceComponent } from './space/space.component';\r\nimport { EditSpaceComponent } from './edit-space/edit-space.component';\r\nimport { SpaceProfileComponent } from './space-profile/space-profile.component';\r\nimport { PostModule } from '../post/post.module';\r\nimport { MarkdownModule } from 'ngx-markdown';\r\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\r\nimport { ButtonsModule } from '../ui-lib/buttons/buttons.module';\r\nimport { SpaceUiModule } from '../ui-lib/space-ui/space-ui.module';\r\nimport { InputModule } from '../ui-lib/input/input.module';\r\nimport { ContainersModule } from '../ui-lib/containers/containers.module';\r\nimport { TextModule } from '../ui-lib/text/text.module';\r\nimport { ContentModule } from '../ui-lib/content/content.module';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    SpaceListComponent,\r\n    SpaceComponent,\r\n    EditSpaceComponent,\r\n    SpaceProfileComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    SpaceRoutingModule,\r\n    HttpClientModule,\r\n    SharedModule,\r\n    PostModule,\r\n    InfiniteScrollModule,\r\n    MarkdownModule.forRoot(),\r\n    ButtonsModule,\r\n    SpaceUiModule,\r\n    InputModule,\r\n    ContainersModule,\r\n    TextModule,\r\n    ContentModule,\r\n  ],\r\n  exports: [SpaceListComponent],\r\n})\r\nexport class SpaceModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "EditSpaceComponent"
                        },
                        {
                            "name": "SpaceComponent"
                        },
                        {
                            "name": "SpaceListComponent"
                        },
                        {
                            "name": "SpaceProfileComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonsModule"
                        },
                        {
                            "name": "ContainersModule"
                        },
                        {
                            "name": "ContentModule"
                        },
                        {
                            "name": "InputModule"
                        },
                        {
                            "name": "PostModule"
                        },
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "SpaceRoutingModule"
                        },
                        {
                            "name": "SpaceUiModule"
                        },
                        {
                            "name": "TextModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SpaceListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SpaceRoutingModule",
            "id": "module-SpaceRoutingModule-05e3f48674899930e408078afbfeca05",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/space/space-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SpaceRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SpaceUiModule",
            "id": "module-SpaceUiModule-d57f5fe3f61a0f7357a3c30df8e120f3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/ui-lib/space-ui/space-ui.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SpaceItemComponent } from './space-item/space-item.component';\nimport { TextModule } from '../text/text.module';\nimport { ButtonsModule } from '../buttons/buttons.module';\nimport { InputModule } from '../input/input.module';\nimport { SpaceInfoComponent } from './space-info/space-info.component';\nimport { AvatarModule } from '../avatar/avatar.module';\nimport { PipesModule } from '../../shared/pipes/pipes.module';\nimport { MatCardModule } from '@angular/material/card';\nimport { ContainersModule } from '../containers/containers.module';\nimport { DirectivesModule } from '../../shared/directives/directives.module';\n\n@NgModule({\n  declarations: [SpaceItemComponent, SpaceInfoComponent],\n  imports: [\n    CommonModule,\n    TextModule,\n    ButtonsModule,\n    InputModule,\n    AvatarModule,\n    PipesModule,\n    MatCardModule,\n    ContainersModule,\n    DirectivesModule,\n  ],\n  exports: [SpaceInfoComponent, SpaceItemComponent],\n})\nexport class SpaceUiModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SpaceInfoComponent"
                        },
                        {
                            "name": "SpaceItemComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AvatarModule"
                        },
                        {
                            "name": "ButtonsModule"
                        },
                        {
                            "name": "ContainersModule"
                        },
                        {
                            "name": "DirectivesModule"
                        },
                        {
                            "name": "InputModule"
                        },
                        {
                            "name": "TextModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SpaceInfoComponent"
                        },
                        {
                            "name": "SpaceItemComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TextModule",
            "id": "module-TextModule-3f330e1be384651de9d0ed0042ae19ec",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/ui-lib/text/text.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TitleComponent } from './title/title.component';\nimport { RouterModule } from '@angular/router';\nimport { ParagraphComponent } from './paragraph/paragraph.component';\nimport { SeeMoreComponent } from './see-more/see-more.component';\nimport { ExpandParagraphComponent } from './expand-paragraph/expand-paragraph.component';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@NgModule({\n  declarations: [\n    TitleComponent,\n    ParagraphComponent,\n    SeeMoreComponent,\n    ExpandParagraphComponent,\n  ],\n  imports: [CommonModule, RouterModule, MarkdownModule],\n  exports: [\n    TitleComponent,\n    ParagraphComponent,\n    ExpandParagraphComponent,\n    SeeMoreComponent,\n  ],\n})\nexport class TextModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ExpandParagraphComponent"
                        },
                        {
                            "name": "ParagraphComponent"
                        },
                        {
                            "name": "SeeMoreComponent"
                        },
                        {
                            "name": "TitleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ExpandParagraphComponent"
                        },
                        {
                            "name": "ParagraphComponent"
                        },
                        {
                            "name": "SeeMoreComponent"
                        },
                        {
                            "name": "TitleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "__non_webpack_require__",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "NodeRequire"
            },
            {
                "name": "Address",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/address.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "appReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ActionReducerMap<AppState>",
                "defaultValue": "{\r\n  spaces: spaceReducer,\r\n  contents: contentReducer,\r\n  posts: postReducer,\r\n  profiles: profileReducer,\r\n  replyIds: replyIdReducer,\r\n  loader: loaderReducer,\r\n  myAccount: myAccountReducer,\r\n  myPostReactions: myPostReactionsReducer,\r\n}"
            },
            {
                "name": "AvatarWithImage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "AvatarWithoutImage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "CommentButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/comment-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "CommentMessage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/comment-message.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Comments",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/comment.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "component",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/image-loader.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new ImageLoaderComponent()"
            },
            {
                "name": "component",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/text-area.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new TextAreaComponent()"
            },
            {
                "name": "component",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/text-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new TextInputComponent()"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/buttons.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  QrButtonComponent,\n  EditButtonComponent,\n  SendTokensButtonComponent,\n  WritePostButtonComponent,\n  SignOutButtonComponent,\n  ProfileButtonComponent,\n  IconButtonComponent,\n  CloseButtonComponent,\n  FollowButtonComponent,\n  OptionButtonComponent,\n  SendTipsButtonComponent,\n  ReplyButtonComponent,\n  UpvoteButtonComponent,\n  DownvoteButtonComponent,\n  CommentButtonComponent,\n  SharedButtonComponent,\n  SendButtonComponent,\n]"
            },
            {
                "name": "contentAdapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/content/content.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "EntityAdapter<Content>",
                "defaultValue": "createEntityAdapter<Content>()"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "d",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/comment-message.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Date()"
            },
            {
                "name": "d",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/comment.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Date()"
            },
            {
                "name": "domino",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require('domino')"
            },
            {
                "name": "Downvote",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/downvote-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "EditButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/edit-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: true,\r\n  ipfsUrl: 'https://app.subsocial.network/ipfs/ipfs/',\r\n  domainUrl: 'http://localhost:4000/',\r\n  appName: 'Subsocial Angular',\r\n  substrateNodeUrl: 'wss://rpc.subsocial.network',\r\n  offchainUrl: 'https://app.subsocial.network/offchain',\r\n  ipfsNodeUrl: 'https://staging.subsocial.network/ipfs-1',\r\n  currency: 'SUB',\r\n  decimals: 11,\r\n  recommendedSpaceIds: [\r\n    '1',\r\n    '1354',\r\n    '1573',\r\n    '1599',\r\n    '1040',\r\n    '1624',\r\n    '1625',\r\n    '2425',\r\n    '1162',\r\n    '1141',\r\n    '1049',\r\n    '1163',\r\n    '1036',\r\n    '1042',\r\n    '1265',\r\n    '1238',\r\n    '1224',\r\n    '1731',\r\n    '1998',\r\n    '2984',\r\n    '1421',\r\n    '1442',\r\n    '1231',\r\n    '1273',\r\n    '1115',\r\n    '1112',\r\n    '1002',\r\n    '1013',\r\n    '4306',\r\n    '4544',\r\n  ],\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n  ipfsUrl: 'https://app.subsocial.network/ipfs/ipfs/',\r\n  domainUrl: 'http://localhost:4200/',\r\n  appName: 'Subsocial Angular',\r\n  substrateNodeUrl: 'wss://rpc.subsocial.network',\r\n  offchainUrl: 'https://app.subsocial.network/offchain',\r\n  ipfsNodeUrl: 'https://staging.subsocial.network/ipfs-1',\r\n  currency: 'SUB',\r\n  decimals: 11,\r\n  recommendedSpaceIds: [\r\n    '1',\r\n    '1354',\r\n    '1573',\r\n    '1599',\r\n    '1040',\r\n    '1624',\r\n    '1625',\r\n    '2425',\r\n    '1162',\r\n    '1141',\r\n    '1049',\r\n    '1163',\r\n    '1036',\r\n    '1042',\r\n    '1265',\r\n    '1238',\r\n    '1224',\r\n    '1731',\r\n    '1998',\r\n    '2984',\r\n    '1421',\r\n    '1442',\r\n    '1231',\r\n    '1273',\r\n    '1115',\r\n    '1112',\r\n    '1002',\r\n    '1013',\r\n    '4306',\r\n    '4544',\r\n  ],\r\n}"
            },
            {
                "name": "extractProfileData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/profile/profile.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\r\n  profileEntities: any,\r\n  contentEntities: any,\r\n  id: string\r\n) => {\r\n  const struct = profileEntities[id];\r\n  if (struct) {\r\n    const profileComponentData: ProfileComponentData = {\r\n      address: id,\r\n      followersCount: struct.followersCount,\r\n      followingCount: struct.followingAccountsCount,\r\n    };\r\n    if (struct?.contentId) {\r\n      const content = contentEntities[struct.contentId] as ProfileContent;\r\n      if (content) {\r\n        profileComponentData.avatar = content.avatar;\r\n        profileComponentData.name = content.name;\r\n        profileComponentData.summary = content.summary;\r\n      }\r\n    }\r\n\r\n    return profileComponentData;\r\n  }\r\n\r\n  return undefined;\r\n}"
            },
            {
                "name": "flatReaction",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/mapper/flatten.map.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(reaction: Reaction) => {\r\n  return {\r\n    id: reaction.id.toString(),\r\n    profileId: reaction.created.account.toString(),\r\n    isUpvote: reaction.kind.isUpvote,\r\n  } as FlatReaction;\r\n}"
            },
            {
                "name": "FollowButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/follow-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "followedAccountIdsAdapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/followed-account-ids/followed-account-ids.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "EntityAdapter<FollowedAccountIdsStruct>",
                "defaultValue": "createEntityAdapter<FollowedAccountIdsStruct>()"
            },
            {
                "name": "followedAccountIdsReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/followed-account-ids/followed-account-ids.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialFollowedAccountIdsState\r\n)"
            },
            {
                "name": "followedSpaceIdsAdapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/followed-space-ids/followed-space-ids.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "EntityAdapter<FollowedSpaceIdsStruct>",
                "defaultValue": "createEntityAdapter<FollowedSpaceIdsStruct>()"
            },
            {
                "name": "fs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require('fs')"
            },
            {
                "name": "getGetMyPostReactionsByPostIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/my-post-reactions/my-post-reactions.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[My Post Reactions] My Post Reactions By Post Ids',\r\n  props<{ ids: Array<string> }>()\r\n)"
            },
            {
                "name": "getPostById",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/post/post.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Post] Load Post By Id',\r\n  props<{ id: string }>()\r\n)"
            },
            {
                "name": "getPostLink",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/utils/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\r\n  spaceHandle: string,\r\n  title: string,\r\n  id: string\r\n): string => {\r\n  return title ? `/@${spaceHandle}/${slug(title)}-${id}` : '';\r\n}"
            },
            {
                "name": "getPostsByIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/post/post.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Post] Load Posts By Ids',\r\n  props<{ payload: LoadEntitiesProps }>()\r\n)"
            },
            {
                "name": "getPostsWithAllData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/post/post.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Post] Load Posts By Ids',\r\n  props<{ ids: Array<string> }>()\r\n)"
            },
            {
                "name": "getReplyIdsByParentPostId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reply-id/reply-id.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Reply Ids] Load ReplyIds By Parent Post Id',\r\n  props<{ id: string }>()\r\n)"
            },
            {
                "name": "getSpacesByIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/space/space.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Space] Load Spaces By Ids',\r\n  props<{ payload: LoadEntitiesProps }>()\r\n)"
            },
            {
                "name": "getStateEntityFromArray",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/utils/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T>(\r\n  array: Array<AnySubsocialData>,\r\n  type: 'struct' | 'content' = 'struct'\r\n): StateEntity<T> => {\r\n  const ids: string[] = [];\r\n  const entities: Entity<any> = {};\r\n  array.map((elem) => {\r\n    const id: string | undefined =\r\n      type === 'struct' ? elem.struct.id.toString() : elem.struct.contentId;\r\n    if (id) {\r\n      ids.push(id);\r\n      entities[id] = elem[type];\r\n    }\r\n  });\r\n  return { ids, entities };\r\n}"
            },
            {
                "name": "ImageLoader",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/image-loader.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "initialContentState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/content/content.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ContentState",
                "defaultValue": "contentAdapter.getInitialState()"
            },
            {
                "name": "initialFollowedAccountIdsState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/followed-account-ids/followed-account-ids.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FollowedAccountIdsState",
                "defaultValue": "followedAccountIdsAdapter.getInitialState()"
            },
            {
                "name": "initialFollowedSpaceIdsState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/followed-space-ids/followed-space-ids.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FollowedSpaceIdsState",
                "defaultValue": "followedSpaceIdsAdapter.getInitialState()"
            },
            {
                "name": "initialLoaderState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/loader/loader.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "LoaderState",
                "defaultValue": "{\r\n  isLoading: false,\r\n}"
            },
            {
                "name": "initialMyAccountState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/my-account/my-account.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MyAccountState",
                "defaultValue": "{\r\n  address: '',\r\n  blocked: false,\r\n  nonce: 0,\r\n}"
            },
            {
                "name": "initialMyPostReactionsState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/my-post-reactions/my-post-reactions.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MyPostReactionsState",
                "defaultValue": "myPostReactionsAdapter.getInitialState()"
            },
            {
                "name": "initialOwnSpaceIdsState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/own-space-ids/own-space-ids.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "OwnSpaceIdsState",
                "defaultValue": "ownSpaceIdsAdapter.getInitialState()"
            },
            {
                "name": "initialPostState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/post/post.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "PostState",
                "defaultValue": "postAdapter.getInitialState()"
            },
            {
                "name": "initialProfileState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/profile/profile.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ProfileState",
                "defaultValue": "profileAdapter.getInitialState()"
            },
            {
                "name": "initialReplyIdState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reply-id/reply-id.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ReplyIdState",
                "defaultValue": "replyIdAdapter.getInitialState()"
            },
            {
                "name": "initialSpaceState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/space/space.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "SpaceState",
                "defaultValue": "spaceAdapter.getInitialState()"
            },
            {
                "name": "LinkIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/link-icons.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "loaderReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/loader/loader.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialLoaderState,\r\n  on(setLoader, (state, { isLoading }) => {\r\n    return { ...state, isLoading };\r\n  })\r\n)"
            },
            {
                "name": "loadMyProfile",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/profile/profile.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Profile] Load My Profile By Id',\r\n  props<{ id: string }>()\r\n)"
            },
            {
                "name": "loadPostById",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/post/post.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Post] Load Post By Id',\r\n  props<{ id: string }>()\r\n)"
            },
            {
                "name": "loadPostsSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/post/post.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Post] Load Posts Success')"
            },
            {
                "name": "loadProfile",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/profile/profile.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Profile] Load Profile By Id',\r\n  props<{ id: string }>()\r\n)"
            },
            {
                "name": "loadProfiles",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/profile/profile.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Profile] Load Profiles By Ids',\r\n  props<{ payload: LoadEntitiesProps }>()\r\n)"
            },
            {
                "name": "loadSpaceById",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/space/space.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Space] Load Space By Id',\r\n  props<{ id: string }>()\r\n)"
            },
            {
                "name": "loadSpaceSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/space/space.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Space] Load Spaces Success')"
            },
            {
                "name": "mainModule",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "__non_webpack_require__.main"
            },
            {
                "name": "mapPostDataToPostListItem",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/mapper/post.map.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\n  postStruct: SharedPostStruct,\n  postContent: PostContent,\n  spaceStruct: SpaceStruct | undefined,\n  profileContent: ProfileContent | undefined,\n  spaceContent: SpaceContentExtend | undefined,\n  myAddress: string,\n  myPostReaction?: MyPostReactionsStruct\n): PostListItemData => {\n  return {\n    id: postStruct.id,\n    ownerId: postStruct.ownerId,\n    ownerImageUrl: profileContent?.avatar || '',\n    spaceName: spaceContent?.name || '',\n    title: postContent.title,\n    summary: postContent.summary,\n    imageUrl: postContent.image ? environment.ipfsUrl + postContent.image : '',\n    createdAtTime: postStruct.createdAtTime,\n    repliesCount: postStruct.repliesCount,\n    hiddenRepliesCount: postStruct.hiddenRepliesCount,\n    visibleRepliesCount: postStruct.visibleRepliesCount,\n    sharesCount: postStruct.visibleRepliesCount,\n    upvotesCount: postStruct.upvotesCount,\n    downvotesCount: postStruct.downvotesCount,\n    isSharedPost: postStruct.isSharedPost,\n    isComment: postStruct.isComment,\n    isShowMore: postContent.isShowMore,\n    ownerName: profileContent?.name || '',\n    postLink: spaceStruct?.handle\n      ? getPostLink(\n          spaceStruct!.handle,\n          postContent.title\n            ? postContent.title\n            : postContent.summary.slice(0, 30),\n          postStruct.id\n        )\n      : '',\n    hidden: postStruct.hidden,\n    isMyPost: postStruct.ownerId === myAddress,\n    body: postContent.body,\n    tags: postContent.tags,\n    spaceId: postStruct.spaceId,\n    link: postContent.link,\n    sharedPostId: postStruct.sharedPostId,\n    spaceLink: spaceStruct?.handle\n      ? '/' + (spaceStruct.handle ? '@' + spaceStruct.handle : spaceStruct.id)\n      : '',\n    upvoteActive: myPostReaction?.kind === 'Upvote',\n    downvoteActive: myPostReaction?.kind === 'Downvote',\n  };\n}"
            },
            {
                "name": "METHODS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/constants/query.const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  accountFollowers: 'accountFollowers',\r\n  accountsFollowedByAccount: 'accountsFollowedByAccount',\r\n  spaceFollowers: 'spaceFollowers',\r\n  reactionIdsByPostId: 'reactionIdsByPostId',\r\n  postReactionIdByAccount: 'postReactionIdByAccount',\r\n}"
            },
            {
                "name": "moduleFilename",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(mainModule && mainModule.filename) || ''"
            },
            {
                "name": "myAccountReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/my-account/my-account.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialMyAccountState,\r\n  on(setMyAccount, (state, { payload }) => {\r\n    return { ...payload };\r\n  })\r\n)"
            },
            {
                "name": "myPostReactionsAdapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/my-post-reactions/my-post-reactions.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "EntityAdapter<MyPostReactionsStruct>",
                "defaultValue": "createEntityAdapter<MyPostReactionsStruct>()"
            },
            {
                "name": "myPostReactionsReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/my-post-reactions/my-post-reactions.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialMyPostReactionsState,\r\n  on(MyPostReactionsActions.getGetMyPostReactionsByPostIds, (state) => state),\r\n  on(MyPostReactionsActions.upsertMyPostReactions, (state, { payload }) => {\r\n    return myPostReactionsAdapter.upsertMany(payload, state);\r\n  })\r\n)"
            },
            {
                "name": "OptionButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/option-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ownSpaceIdsAdapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/own-space-ids/own-space-ids.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "EntityAdapter<OwnSpaceIdsStruct>",
                "defaultValue": "createEntityAdapter<OwnSpaceIdsStruct>()"
            },
            {
                "name": "PALLETS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/constants/query.const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  profileFollows: 'profileFollows',\r\n  spaceFollows: 'spaceFollows',\r\n  reactions: 'reactions',\r\n}"
            },
            {
                "name": "path",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require('path')"
            },
            {
                "name": "postAdapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/post/post.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "EntityAdapter<PostStruct>",
                "defaultValue": "createEntityAdapter<PostStruct>()"
            },
            {
                "name": "PostInfo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/post-info.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "PostItem",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/post-list-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "postReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/post/post.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialPostState,\r\n  on(getPostsByIds, (state) => state),\r\n  on(getPostsWithAllData, (state) => state),\r\n  on(upsertPosts, (state, { payload }) => {\r\n    return postAdapter.upsertMany(payload, state);\r\n  })\r\n)"
            },
            {
                "name": "profileAdapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/profile/profile.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "EntityAdapter<ProfileStruct>",
                "defaultValue": "createEntityAdapter<ProfileStruct>()"
            },
            {
                "name": "ProfileInfo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/profile-info.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "profileReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/profile/profile.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialProfileState,\r\n  on(upsertProfiles, (state, { payload }) => {\r\n    return profileAdapter.upsertMany(payload, state);\r\n  }),\r\n  on(upsertProfile, (state, { payload }) => {\r\n    return profileAdapter.upsertOne(payload, state);\r\n  })\r\n)"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/content/content.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialContentState,\r\n  on(upsertContents, (state, { payload }) =>\r\n    payload ? contentAdapter.upsertMany(payload, state) : state\r\n  ),\r\n  on(upsertContent, (state, { payload }) =>\r\n    payload ? contentAdapter.upsertOne(payload, state) : state\r\n  )\r\n)"
            },
            {
                "name": "replyIdAdapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reply-id/reply-id.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "EntityAdapter<ReplyIdStruct>",
                "defaultValue": "createEntityAdapter<ReplyIdStruct>()"
            },
            {
                "name": "replyIdsReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reply-id/reply-id.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialReplyIdState,\r\n  on(getReplyIdsByParentPostId, (state) => state),\r\n  on(upsertReplyIds, (state, { payload }) => {\r\n    return replyIdAdapter.upsertOne(payload, state);\r\n  })\r\n)"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "saveProfilesSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/profile/profile.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Profile] Load Profiles Success'\r\n)"
            },
            {
                "name": "SeeMore",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/see-more.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "selectAllContents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/content/content.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectContentState, selectAll)"
            },
            {
                "name": "selectAllPosts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/post/post.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectPostState, selectAll)"
            },
            {
                "name": "selectAllPReplyIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reply-id/reply-id.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectReplyIdsState,\r\n  selectAll\r\n)"
            },
            {
                "name": "selectAllProfiles",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/profile/profile.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectProfileState, selectAll)"
            },
            {
                "name": "selectAllSpaces",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/space/space.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectSpaceState, selectAll)"
            },
            {
                "name": "selectCommentItemsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reply-id/reply-id.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(postId: string) =>\r\n  createSelector(\r\n    selectReplyIdsEntities,\r\n    selectPostEntities,\r\n    selectContentEntities,\r\n    selectProfileEntities,\r\n    selectMyAccountAddress,\r\n    selectMyPostReactionsEntities,\r\n    (\r\n      replyIdEntities,\r\n      postEntities,\r\n      contentEntities,\r\n      profileEntities,\r\n      address,\r\n      myPostReactionsEntities\r\n    ): CommentItemData[] => {\r\n      const commentItemsData: CommentItemData[] = [];\r\n\r\n      const replyIds = replyIdEntities[postId];\r\n\r\n      if (replyIds) {\r\n        replyIds.replyIds.map((replyPostId) => {\r\n          const postStruct = postEntities[replyPostId];\r\n          const postContent = contentEntities[\r\n            postStruct?.contentId!\r\n          ] as PostContent;\r\n          const profileStruct = profileEntities[postStruct?.ownerId!];\r\n          const profileContent = contentEntities[\r\n            profileStruct?.contentId!\r\n          ] as ProfileContent;\r\n          if (postStruct && postContent) {\r\n            const myPostReaction =\r\n              myPostReactionsEntities[address + '-' + postStruct!.id];\r\n\r\n            commentItemsData.push({\r\n              postId: postStruct.id,\r\n              ownerId: postStruct.ownerId,\r\n              profileName: profileContent?.name,\r\n              createdAtTime: postStruct.createdAtTime,\r\n              avatar: profileContent?.avatar,\r\n              commentText: postContent.body,\r\n              upvoteCount: postStruct.upvotesCount,\r\n              downvoteCount: postStruct.downvotesCount,\r\n              replyCount: postStruct.repliesCount,\r\n              upvoteActive: myPostReaction?.kind === 'Upvote',\r\n              downvoteActive: myPostReaction?.kind === 'Downvote',\r\n            });\r\n          }\r\n        });\r\n      }\r\n\r\n      return commentItemsData;\r\n    }\r\n  )"
            },
            {
                "name": "selectContentEntities",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/content/content.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectContentState,\r\n  selectEntities\r\n)"
            },
            {
                "name": "selectContentState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/content/content.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<ContentState>('contents')"
            },
            {
                "name": "selectLoader",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/loader/loader.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<LoaderState>('loader')"
            },
            {
                "name": "selectLoaderStatus",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/loader/loader.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectLoader,\r\n  (loader) => loader.isLoading\r\n)"
            },
            {
                "name": "selectMyAccount",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/my-account/my-account.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<MyAccountState>('myAccount')"
            },
            {
                "name": "selectMyAccountAddress",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/my-account/my-account.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectMyAccount,\r\n  (myAccount) => {\r\n    return myAccount.address;\r\n  }\r\n)"
            },
            {
                "name": "selectMyAccountProfileData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/profile/profile.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectMyAccountAddress,\r\n  selectProfileEntities,\r\n  selectContentEntities,\r\n  (address, profileEntities, contentEntities) =>\r\n    extractProfileData(profileEntities, contentEntities, address)\r\n)"
            },
            {
                "name": "selectMyPostReactions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/my-post-reactions/my-post-reactions.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<MyPostReactionsState>('myPostReactions')"
            },
            {
                "name": "selectMyPostReactionsCount",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/my-post-reactions/my-post-reactions.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectMyPostReactions,\r\n  selectTotal\r\n)"
            },
            {
                "name": "selectMyPostReactionsEntities",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/my-post-reactions/my-post-reactions.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectMyPostReactions,\r\n  selectEntities\r\n)"
            },
            {
                "name": "selectMyPostReactionsIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/my-post-reactions/my-post-reactions.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectMyPostReactions,\r\n  selectAll\r\n)"
            },
            {
                "name": "selectNonExistingPostIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/post/post.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(newIds: string[]) =>\r\n  createSelector(selectPostIds, (postIds) => {\r\n    return _.difference(newIds, postIds as string[]);\r\n  })"
            },
            {
                "name": "selectPostEntities",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/post/post.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectPostState,\r\n  selectEntities\r\n)"
            },
            {
                "name": "selectPostIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/post/post.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectPostState, selectIds)"
            },
            {
                "name": "selectPostsCount",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/post/post.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectPostState, selectTotal)"
            },
            {
                "name": "selectPostState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/post/post.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<PostState>('posts')"
            },
            {
                "name": "selectPostStructByIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/post/post.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(ids: string[]) =>\r\n  createSelector(selectPostEntities, (postEntities) => {\r\n    const structs: PostStruct[] = [];\r\n    ids.forEach((id) => {\r\n      const struct = postEntities[id];\r\n      struct ? structs.push(struct) : null;\r\n    });\r\n\r\n    return structs;\r\n  })"
            },
            {
                "name": "selectPostsWithAllDetailsByIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/post/post.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(ids: string[]) =>\r\n  createSelector(\r\n    selectPostStructByIds(ids),\r\n    selectContentEntities,\r\n    selectProfileEntities,\r\n    selectSpaceEntities,\r\n    selectMyAccountAddress,\r\n    selectMyPostReactionsEntities,\r\n    (\r\n      postArray,\r\n      contentEntities,\r\n      profileEntity,\r\n      spaceEntity,\r\n      address,\r\n      myPostReactionEntities\r\n    ) => {\r\n      const postListItemDataArray: KeyValuePair<PostListItemData> = {};\r\n\r\n      postArray.forEach((postStruct) => {\r\n        const profile = profileEntity[postStruct.ownerId];\r\n\r\n        const myPostReaction =\r\n          myPostReactionEntities[address + '-' + postStruct.id];\r\n\r\n        if (postStruct.contentId) {\r\n          const spaceStruct = postStruct.spaceId\r\n            ? spaceEntity[postStruct.spaceId]\r\n            : undefined;\r\n          const postContent = contentEntities[\r\n            postStruct.contentId\r\n          ] as PostContent;\r\n          const profileContent = profile?.contentId\r\n            ? (contentEntities[profile.contentId] as ProfileContent)\r\n            : undefined;\r\n\r\n          const spaceContent = contentEntities[\r\n            spaceStruct?.contentId!\r\n          ] as SpaceContentExtend;\r\n\r\n          if (postContent) {\r\n            const postListItemData: PostListItemData =\r\n              mapPostDataToPostListItem(\r\n                postStruct as SharedPostStruct,\r\n                postContent,\r\n                spaceStruct,\r\n                profileContent,\r\n                spaceContent,\r\n                address,\r\n                myPostReaction\r\n              );\r\n\r\n            postListItemDataArray[postStruct.id] = postListItemData;\r\n          }\r\n        }\r\n      });\r\n\r\n      return postListItemDataArray;\r\n    }\r\n  )"
            },
            {
                "name": "selectPostWithAllDetailsById",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/post/post.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(id: string) =>\r\n  createSelector(selectPostsWithAllDetailsByIds([id]), (postsData) => {\r\n    return postsData[id];\r\n  })"
            },
            {
                "name": "selectProfileDataById",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/profile/profile.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(id: string) =>\r\n  createSelector(\r\n    selectProfileEntities,\r\n    selectContentEntities,\r\n    (profileEntities, contentEntities) =>\r\n      extractProfileData(profileEntities, contentEntities, id)\r\n  )"
            },
            {
                "name": "selectProfileEntities",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/profile/profile.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectProfileState,\r\n  selectEntities\r\n)"
            },
            {
                "name": "selectProfilesCount",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/profile/profile.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectProfileState,\r\n  selectTotal\r\n)"
            },
            {
                "name": "selectProfileState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/profile/profile.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<ProfileState>('profiles')"
            },
            {
                "name": "selectReplyIdsCount",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reply-id/reply-id.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectReplyIdsState,\r\n  selectTotal\r\n)"
            },
            {
                "name": "selectReplyIdsEntities",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reply-id/reply-id.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectReplyIdsState,\r\n  selectEntities\r\n)"
            },
            {
                "name": "selectReplyIdsState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reply-id/reply-id.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<ReplyIdState>('replyIds')"
            },
            {
                "name": "selectSpaceById",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/space/space.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(id: string) =>\r\n  createSelector(\r\n    selectSpaceEntities,\r\n    selectContentEntities,\r\n    (spaceEntities, contentEntities) => {\r\n      const struct = spaceEntities[id];\r\n      if (struct && struct.contentId) {\r\n        const content = contentEntities[struct.contentId] as SpaceContentExtend;\r\n        return content ? ({ struct, content } as SpaceListItemData) : undefined;\r\n      }\r\n      return undefined;\r\n    }\r\n  )"
            },
            {
                "name": "selectSpaceEntities",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/space/space.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectSpaceState,\r\n  selectEntities\r\n)"
            },
            {
                "name": "selectSpacesByIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/space/space.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(ids: string[]) =>\r\n  createSelector(\r\n    selectSpaceEntities,\r\n    selectContentEntities,\r\n    (spaceEntities, contentEntities) => {\r\n      const spaceDataArray: KeyValuePair<SpaceListItemData> = {};\r\n      ids.forEach((id) => {\r\n        const struct = spaceEntities[id];\r\n        if (struct?.contentId) {\r\n          const content = contentEntities[\r\n            struct.contentId\r\n          ] as SpaceContentExtend;\r\n          if (content) {\r\n            const spaceListData: SpaceListItemData = {\r\n              struct,\r\n              content,\r\n              id: struct.id,\r\n            };\r\n\r\n            spaceDataArray[struct.id] = spaceListData;\r\n          }\r\n        }\r\n      });\r\n\r\n      return spaceDataArray;\r\n    }\r\n  )"
            },
            {
                "name": "selectSpacesCount",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/space/space.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectSpaceState, selectTotal)"
            },
            {
                "name": "selectSpaceState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/space/space.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<SpaceState>('spaces')"
            },
            {
                "name": "selectSpaceWithContent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/space/space.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(start: number, end: number) =>\r\n  createSelector(\r\n    selectAllSpaces,\r\n    selectContentEntities,\r\n    (spacesArray, contentEntities) => {\r\n      const spaceData: SpaceListItemData[] = [];\r\n\r\n      spacesArray.slice(start, end).map((struct) => {\r\n        if (struct.contentId) {\r\n          const content = contentEntities[\r\n            struct.contentId\r\n          ] as SpaceContentExtend;\r\n          content ? spaceData.push({ struct, content, id: struct.id }) : null;\r\n        }\r\n      });\r\n\r\n      return spaceData;\r\n    }\r\n  )"
            },
            {
                "name": "selectUserInfoByIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/profile/profile.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(ids: string[]) =>\r\n  createSelector(\r\n    selectProfileEntities,\r\n    selectContentEntities,\r\n    (profileEntities, contentEntities) => {\r\n      const usersInfo: KeyValuePair<UserInfo> = {};\r\n      ids.forEach((id) => {\r\n        const profile = profileEntities[id];\r\n        if (profile) {\r\n          let content: ProfileContent | undefined;\r\n          if (profile.contentId) {\r\n            content = contentEntities[profile.contentId] as ProfileContent;\r\n          }\r\n\r\n          usersInfo[profile.id] = {\r\n            userName: content?.name,\r\n            address: profile.id,\r\n            avatarSrc: content?.avatar,\r\n            id: profile.id,\r\n            isFollowing: false,\r\n          };\r\n        }\r\n      });\r\n\r\n      return usersInfo;\r\n    }\r\n  )"
            },
            {
                "name": "SendButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/send-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "setLoader",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/loader/loader.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Loader] Set Loader',\r\n  props<{ isLoading: boolean }>()\r\n)"
            },
            {
                "name": "setMyAccount",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/my-account/my-account.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[My Account] Set My Account',\r\n  props<{ payload: MyAccountState }>()\r\n)"
            },
            {
                "name": "ShareButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/share-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "sliceEntityArray",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/utils/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\r\n  entityArray: Array<any>,\r\n  contentEntities: any,\r\n  start: number,\r\n  end: number\r\n) => {\r\n  const entityData: any[] = [];\r\n\r\n  entityArray.slice(start, end).map((struct) => {\r\n    if (struct.contentId) {\r\n      const content = contentEntities[struct.contentId];\r\n      content ? entityData.push({ struct, content }) : null;\r\n    }\r\n  });\r\n\r\n  return entityData;\r\n}"
            },
            {
                "name": "spaceAdapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/space/space.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "EntityAdapter<SpaceStruct>",
                "defaultValue": "createEntityAdapter<SpaceStruct>()"
            },
            {
                "name": "SpaceListItem",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/space-list-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "spaceReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/space/space.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialSpaceState,\r\n  on(SpaceActions.getSpacesByIds, (state) => state),\r\n  on(SpaceActions.upsertSpaces, (state, { payload }) => {\r\n    return spaceAdapter.upsertMany(payload, state);\r\n  }),\r\n  on(SpaceActions.upsertSpace, (state, { payload }) => {\r\n    return spaceAdapter.upsertOne(payload, state);\r\n  }),\r\n  on(SpaceActions.loadSpaceById, (state) => state)\r\n)"
            },
            {
                "name": "STORAGE_KEYS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/services/storage.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  accountId: 'accountId',\n}"
            },
            {
                "name": "Tabs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/tabs.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Tag",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "fs\n  .readFileSync('dist/subsocial-angular/browser/index.html')\n  .toString()"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/address.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<AddressComponent>",
                "defaultValue": "(args: AddressComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<AvatarComponent>",
                "defaultValue": "(args: AvatarComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/comment-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<CommentButtonComponent>",
                "defaultValue": "(\r\n  args: CommentButtonComponent\r\n) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/comment-message.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<CommentMessageComponent>",
                "defaultValue": "(\r\n  args: CommentMessageComponent\r\n) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/comment.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<CommentsComponent>",
                "defaultValue": "(args: CommentsComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/downvote-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<DownvoteButtonComponent>",
                "defaultValue": "(\r\n  args: DownvoteButtonComponent\r\n) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/edit-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<EditButtonComponent>",
                "defaultValue": "(args: EditButtonComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/follow-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FollowButtonComponent>",
                "defaultValue": "(\r\n  args: FollowButtonComponent\r\n) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/image-loader.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ImageLoaderComponent>",
                "defaultValue": "(args: ImageLoaderComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/link-icons.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<LinkIconsComponent>",
                "defaultValue": "(args: LinkIconsComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/option-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<OptionButtonComponent>",
                "defaultValue": "(\r\n  args: OptionButtonComponent\r\n) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/post-info.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<PostInfoComponent>",
                "defaultValue": "(args: PostInfoComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/post-list-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<PostItemComponent>",
                "defaultValue": "(args: PostItemComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/profile-info.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ProfileInfoComponent>",
                "defaultValue": "(args: ProfileInfoComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/see-more.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SeeMoreComponent>",
                "defaultValue": "(args: SeeMoreComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/send-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SendButtonComponent>",
                "defaultValue": "(args: SendButtonComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/share-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SharedButtonComponent>",
                "defaultValue": "(\r\n  args: SharedButtonComponent\r\n) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/space-list-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SpaceItemComponent>",
                "defaultValue": "(args: SpaceItemComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/tabs.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TabsComponent>",
                "defaultValue": "(args: TabsComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TagComponent>",
                "defaultValue": "(args: TagComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/text-area.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TextAreaComponent>",
                "defaultValue": "(args: TextAreaComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/text-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TextInputComponent>",
                "defaultValue": "(args: TextInputComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/title.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TitleComponent>",
                "defaultValue": "(args: TitleComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/upvote-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<UpvoteButtonComponent>",
                "defaultValue": "(\r\n  args: UpvoteButtonComponent\r\n) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/vote-user-list-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<VoteUserListItemComponent>",
                "defaultValue": "(\r\n  args: VoteUserListItemComponent\r\n) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/write-post-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<WritePostButtonComponent>",
                "defaultValue": "(\r\n  args: WritePostButtonComponent\r\n) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "TextArea",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/text-area.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "TextInput",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/text-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Title",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/title.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "TRANSFER_KEYS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/constants/transfer-keys.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  POST_DATA: 'post_data',\r\n  SPACE_DATA: 'space_data',\r\n}"
            },
            {
                "name": "transformEntityDataArray",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/utils/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\r\n  array: Array<SpaceData> | Array<PostData> | Array<ProfileData>\r\n): TransformDataArray => {\r\n  const structs: any[] = [];\r\n  const contents: Content[] = [];\r\n  array.map((data) => {\r\n    if (data.content && data.struct.contentId) {\r\n      structs.push(data.struct);\r\n      contents.push({ id: data.struct.contentId, ...data.content });\r\n    }\r\n  });\r\n\r\n  return { structs, contents };\r\n}"
            },
            {
                "name": "upsertContent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/content/content.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Content] Upsert Content',\r\n  props<{ payload: Content }>()\r\n)"
            },
            {
                "name": "upsertContents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/content/content.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Content] Upsert Contents',\r\n  props<{ payload: Array<Content> }>()\r\n)"
            },
            {
                "name": "Upvote",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/upvote-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "VoteUserListItem",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/vote-user-list-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "win",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "domino.createWindow(template)"
            },
            {
                "name": "WritePostButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/write-post-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/content/content.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "contentAdapter.getSelectors()"
            },
            {
                "name": "upsertMyPostReactions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/my-post-reactions/my-post-reactions.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[My Post Reactions] Upsert My Post Reactions',\r\n  props<{ payload: Array<MyPostReactionsStruct> }>()\r\n)"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/my-post-reactions/my-post-reactions.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "myPostReactionsAdapter.getSelectors()"
            },
            {
                "name": "upsertPost",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/post/post.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Post] Upsert Post',\r\n  props<{ payload: PostStruct }>()\r\n)"
            },
            {
                "name": "upsertPosts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/post/post.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Post] Upsert Posts',\r\n  props<{ payload: Array<PostStruct> }>()\r\n)"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/post/post.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "postAdapter.getSelectors()"
            },
            {
                "name": "upsertProfile",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/profile/profile.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Profile] Upsert Profile',\r\n  props<{ payload: ProfileStruct }>()\r\n)"
            },
            {
                "name": "upsertProfiles",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/profile/profile.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Profile] Upsert Profiles',\r\n  props<{ payload: Array<ProfileStruct> }>()\r\n)"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/profile/profile.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "profileAdapter.getSelectors()"
            },
            {
                "name": "upsertReplyIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reply-id/reply-id.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Space] Upsert Reply Ids',\r\n  props<{ payload: ReplyIdStruct }>()\r\n)"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reply-id/reply-id.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "replyIdAdapter.getSelectors()"
            },
            {
                "name": "upsertSpace",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/space/space.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Space] Upsert Space',\r\n  props<{ payload: SpaceStruct }>()\r\n)"
            },
            {
                "name": "upsertSpaces",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/space/space.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Space] Upsert Spaces',\r\n  props<{ payload: Array<SpaceStruct> }>()\r\n)"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/space/space.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "spaceAdapter.getSelectors()"
            }
        ],
        "functions": [
            {
                "name": "app",
                "file": "server.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "express.Express"
            },
            {
                "name": "contentReducer",
                "file": "src/app/state/content/content.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "followedAccountIdsReducer",
                "file": "src/app/state/followed-account-ids/followed-account-ids.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "initApi",
                "file": "src/app/app.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "service",
                        "type": "SubsocialApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "SubsocialApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "loaderReducer",
                "file": "src/app/state/loader/loader.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "myAccountReducer",
                "file": "src/app/state/my-account/my-account.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "myPostReactionsReducer",
                "file": "src/app/state/my-post-reactions/my-post-reactions.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "postReducer",
                "file": "src/app/state/post/post.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "profileReducer",
                "file": "src/app/state/profile/profile.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "registryIcons",
                "file": "src/app/app.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "service",
                        "type": "IconRegistryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "IconRegistryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "replyIdReducer",
                "file": "src/app/state/reply-id/reply-id.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "run",
                "file": "server.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "void"
            },
            {
                "name": "spaceReducer",
                "file": "src/app/state/space/space.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "SSRLoadData",
                "file": "src/app/core/decorators/ssr-load-data.decorator.tw.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            }
        ],
        "typealiases": [
            {
                "name": "AccountData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/types/account.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "AccountRawData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/types/account.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "AddressSizeType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"small\" | \"medium\" | \"large\"",
                "file": "src/app/core/types/address-size.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 185
            },
            {
                "name": "AlignType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"start\" | \"end\" | \"center\" | \"normal\" | \"space-between\"",
                "file": "src/app/core/base-component/box.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 185
            },
            {
                "name": "Balance",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/types/account.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "CommentItemData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/types/comment-data.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "ConnectionModalData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/types/dialog-modal-data.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Content",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/core/types/content.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "EntityListData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/types/entity-data.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "FetchSubstrateMultiProps",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/services/subsocial-api.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "FetchSubstrateProps",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/services/subsocial-api.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "FlatReaction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/mapper/flatten.map.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "FollowedAccountIdsStruct",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/state/followed-account-ids/followed-account-ids.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "FollowedSpaceIdsStruct",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/state/followed-space-ids/followed-space-ids.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "FollowersModalData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/types/dialog-modal-data.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "HasHandle",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/models/space/space-list-item.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "ImageType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"square\" | \"full\" | \"notification\"",
                "file": "src/app/core/types/image.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 185
            },
            {
                "name": "LoadEntitiesProps",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/state/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "MyPostReactionsStruct",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/state/my-post-reactions/my-post-reactions.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "OptionButtonType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"post\" | \"space\" | \"comment\"",
                "file": "src/app/core/types/option-button.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 185
            },
            {
                "name": "OwnSpaceIdsStruct",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/state/own-space-ids/own-space-ids.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "PolkadotAccount",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/types/account.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "ProfileComponentData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/types/profile-component-data.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "ReactionModalData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/types/dialog-modal-data.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "ReplyIdStruct",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/types/reply-id.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "ScrollProps",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/types/scroll-props.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "SignInModalData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/types/dialog-modal-data.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "SimpleSnackBarOption",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/components/simple-snack-bar/simple-snack-bar.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "SpaceContentExtend",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/core/models/space/space-list-item.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "SpaceInfoType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"medium\" | \"large\"",
                "file": "src/app/core/types/space-info.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 185
            },
            {
                "name": "SpaceListItemData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/core/models/space/space-list-item.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "Tabs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"spaces\" | \"posts\"",
                "file": "src/app/core/types/tabs.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 185
            },
            {
                "name": "TagSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"small\" | \"medium\" | \"large\" | \"huge\"",
                "file": "src/app/core/types/tag-size.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 185
            },
            {
                "name": "TitleSizeType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"small\" | \"medium\" | \"large\"",
                "file": "src/app/core/types/title.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 185
            },
            {
                "name": "TransformData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/types/transform-dto.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "TransformDataArray",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/types/transform-dto.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "TransformPostWithAllDetails",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/types/transform-dto.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "UserInfo",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/core/models/user-info.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "UserListType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"follow\" | \"sub\"",
                "file": "src/app/core/types/user-list.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 185
            },
            {
                "name": "VoteIconType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"upvote\" | \"downvote\"",
                "file": "src/app/core/types/vote-icon.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 185
            }
        ],
        "enumerations": [
            {
                "name": "ACCOUNT_STATUS",
                "childs": [
                    {
                        "name": "INIT",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "EXTENSION_NOT_FOUND",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ACCOUNTS_NOT_FOUND",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "UNAUTHORIZED",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "AUTHORIZED",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/services/account.service.ts"
            }
        ],
        "groupedVariables": {
            "server.ts": [
                {
                    "name": "__non_webpack_require__",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NodeRequire"
                },
                {
                    "name": "domino",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require('domino')"
                },
                {
                    "name": "fs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require('fs')"
                },
                {
                    "name": "mainModule",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "__non_webpack_require__.main"
                },
                {
                    "name": "moduleFilename",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(mainModule && mainModule.filename) || ''"
                },
                {
                    "name": "path",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require('path')"
                },
                {
                    "name": "template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "fs\n  .readFileSync('dist/subsocial-angular/browser/index.html')\n  .toString()"
                },
                {
                    "name": "win",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "domino.createWindow(template)"
                }
            ],
            "src/stories/address.stories.ts": [
                {
                    "name": "Address",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/address.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/address.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<AddressComponent>",
                    "defaultValue": "(args: AddressComponent) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/app/state/state.ts": [
                {
                    "name": "appReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionReducerMap<AppState>",
                    "defaultValue": "{\r\n  spaces: spaceReducer,\r\n  contents: contentReducer,\r\n  posts: postReducer,\r\n  profiles: profileReducer,\r\n  replyIds: replyIdReducer,\r\n  loader: loaderReducer,\r\n  myAccount: myAccountReducer,\r\n  myPostReactions: myPostReactionsReducer,\r\n}"
                }
            ],
            "src/stories/avatar.stories.ts": [
                {
                    "name": "AvatarWithImage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "AvatarWithoutImage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<AvatarComponent>",
                    "defaultValue": "(args: AvatarComponent) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/comment-button.stories.ts": [
                {
                    "name": "CommentButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/comment-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/comment-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<CommentButtonComponent>",
                    "defaultValue": "(\r\n  args: CommentButtonComponent\r\n) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/comment-message.stories.ts": [
                {
                    "name": "CommentMessage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/comment-message.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "d",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/comment-message.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Date()"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/comment-message.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<CommentMessageComponent>",
                    "defaultValue": "(\r\n  args: CommentMessageComponent\r\n) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/comment.stories.ts": [
                {
                    "name": "Comments",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/comment.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "d",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/comment.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Date()"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/comment.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<CommentsComponent>",
                    "defaultValue": "(args: CommentsComponent) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/image-loader.stories.ts": [
                {
                    "name": "component",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/image-loader.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new ImageLoaderComponent()"
                },
                {
                    "name": "ImageLoader",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/image-loader.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/image-loader.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ImageLoaderComponent>",
                    "defaultValue": "(args: ImageLoaderComponent) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/text-area.stories.ts": [
                {
                    "name": "component",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/text-area.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new TextAreaComponent()"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/text-area.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TextAreaComponent>",
                    "defaultValue": "(args: TextAreaComponent) => ({\r\n  props: args,\r\n})"
                },
                {
                    "name": "TextArea",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/text-area.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/stories/text-input.stories.ts": [
                {
                    "name": "component",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/text-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new TextInputComponent()"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/text-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TextInputComponent>",
                    "defaultValue": "(args: TextInputComponent) => ({\r\n  props: args,\r\n})"
                },
                {
                    "name": "TextInput",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/text-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/app/ui-lib/buttons/buttons.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/buttons.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  QrButtonComponent,\n  EditButtonComponent,\n  SendTokensButtonComponent,\n  WritePostButtonComponent,\n  SignOutButtonComponent,\n  ProfileButtonComponent,\n  IconButtonComponent,\n  CloseButtonComponent,\n  FollowButtonComponent,\n  OptionButtonComponent,\n  SendTipsButtonComponent,\n  ReplyButtonComponent,\n  UpvoteButtonComponent,\n  DownvoteButtonComponent,\n  CommentButtonComponent,\n  SharedButtonComponent,\n  SendButtonComponent,\n]"
                }
            ],
            "src/app/state/content/content.state.ts": [
                {
                    "name": "contentAdapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/content/content.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityAdapter<Content>",
                    "defaultValue": "createEntityAdapter<Content>()"
                },
                {
                    "name": "initialContentState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/content/content.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ContentState",
                    "defaultValue": "contentAdapter.getInitialState()"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/stories/downvote-button.stories.ts": [
                {
                    "name": "Downvote",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/downvote-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/downvote-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<DownvoteButtonComponent>",
                    "defaultValue": "(\r\n  args: DownvoteButtonComponent\r\n) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/edit-button.stories.ts": [
                {
                    "name": "EditButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/edit-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/edit-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<EditButtonComponent>",
                    "defaultValue": "(args: EditButtonComponent) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true,\r\n  ipfsUrl: 'https://app.subsocial.network/ipfs/ipfs/',\r\n  domainUrl: 'http://localhost:4000/',\r\n  appName: 'Subsocial Angular',\r\n  substrateNodeUrl: 'wss://rpc.subsocial.network',\r\n  offchainUrl: 'https://app.subsocial.network/offchain',\r\n  ipfsNodeUrl: 'https://staging.subsocial.network/ipfs-1',\r\n  currency: 'SUB',\r\n  decimals: 11,\r\n  recommendedSpaceIds: [\r\n    '1',\r\n    '1354',\r\n    '1573',\r\n    '1599',\r\n    '1040',\r\n    '1624',\r\n    '1625',\r\n    '2425',\r\n    '1162',\r\n    '1141',\r\n    '1049',\r\n    '1163',\r\n    '1036',\r\n    '1042',\r\n    '1265',\r\n    '1238',\r\n    '1224',\r\n    '1731',\r\n    '1998',\r\n    '2984',\r\n    '1421',\r\n    '1442',\r\n    '1231',\r\n    '1273',\r\n    '1115',\r\n    '1112',\r\n    '1002',\r\n    '1013',\r\n    '4306',\r\n    '4544',\r\n  ],\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n  ipfsUrl: 'https://app.subsocial.network/ipfs/ipfs/',\r\n  domainUrl: 'http://localhost:4200/',\r\n  appName: 'Subsocial Angular',\r\n  substrateNodeUrl: 'wss://rpc.subsocial.network',\r\n  offchainUrl: 'https://app.subsocial.network/offchain',\r\n  ipfsNodeUrl: 'https://staging.subsocial.network/ipfs-1',\r\n  currency: 'SUB',\r\n  decimals: 11,\r\n  recommendedSpaceIds: [\r\n    '1',\r\n    '1354',\r\n    '1573',\r\n    '1599',\r\n    '1040',\r\n    '1624',\r\n    '1625',\r\n    '2425',\r\n    '1162',\r\n    '1141',\r\n    '1049',\r\n    '1163',\r\n    '1036',\r\n    '1042',\r\n    '1265',\r\n    '1238',\r\n    '1224',\r\n    '1731',\r\n    '1998',\r\n    '2984',\r\n    '1421',\r\n    '1442',\r\n    '1231',\r\n    '1273',\r\n    '1115',\r\n    '1112',\r\n    '1002',\r\n    '1013',\r\n    '4306',\r\n    '4544',\r\n  ],\r\n}"
                }
            ],
            "src/app/state/profile/profile.selectors.ts": [
                {
                    "name": "extractProfileData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/profile/profile.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\r\n  profileEntities: any,\r\n  contentEntities: any,\r\n  id: string\r\n) => {\r\n  const struct = profileEntities[id];\r\n  if (struct) {\r\n    const profileComponentData: ProfileComponentData = {\r\n      address: id,\r\n      followersCount: struct.followersCount,\r\n      followingCount: struct.followingAccountsCount,\r\n    };\r\n    if (struct?.contentId) {\r\n      const content = contentEntities[struct.contentId] as ProfileContent;\r\n      if (content) {\r\n        profileComponentData.avatar = content.avatar;\r\n        profileComponentData.name = content.name;\r\n        profileComponentData.summary = content.summary;\r\n      }\r\n    }\r\n\r\n    return profileComponentData;\r\n  }\r\n\r\n  return undefined;\r\n}"
                },
                {
                    "name": "selectAllProfiles",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/profile/profile.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectProfileState, selectAll)"
                },
                {
                    "name": "selectMyAccountProfileData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/profile/profile.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectMyAccountAddress,\r\n  selectProfileEntities,\r\n  selectContentEntities,\r\n  (address, profileEntities, contentEntities) =>\r\n    extractProfileData(profileEntities, contentEntities, address)\r\n)"
                },
                {
                    "name": "selectProfileDataById",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/profile/profile.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(id: string) =>\r\n  createSelector(\r\n    selectProfileEntities,\r\n    selectContentEntities,\r\n    (profileEntities, contentEntities) =>\r\n      extractProfileData(profileEntities, contentEntities, id)\r\n  )"
                },
                {
                    "name": "selectProfileEntities",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/profile/profile.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectProfileState,\r\n  selectEntities\r\n)"
                },
                {
                    "name": "selectProfilesCount",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/profile/profile.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectProfileState,\r\n  selectTotal\r\n)"
                },
                {
                    "name": "selectProfileState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/profile/profile.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<ProfileState>('profiles')"
                },
                {
                    "name": "selectUserInfoByIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/profile/profile.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(ids: string[]) =>\r\n  createSelector(\r\n    selectProfileEntities,\r\n    selectContentEntities,\r\n    (profileEntities, contentEntities) => {\r\n      const usersInfo: KeyValuePair<UserInfo> = {};\r\n      ids.forEach((id) => {\r\n        const profile = profileEntities[id];\r\n        if (profile) {\r\n          let content: ProfileContent | undefined;\r\n          if (profile.contentId) {\r\n            content = contentEntities[profile.contentId] as ProfileContent;\r\n          }\r\n\r\n          usersInfo[profile.id] = {\r\n            userName: content?.name,\r\n            address: profile.id,\r\n            avatarSrc: content?.avatar,\r\n            id: profile.id,\r\n            isFollowing: false,\r\n          };\r\n        }\r\n      });\r\n\r\n      return usersInfo;\r\n    }\r\n  )"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/profile/profile.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "profileAdapter.getSelectors()"
                }
            ],
            "src/app/core/mapper/flatten.map.ts": [
                {
                    "name": "flatReaction",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/mapper/flatten.map.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(reaction: Reaction) => {\r\n  return {\r\n    id: reaction.id.toString(),\r\n    profileId: reaction.created.account.toString(),\r\n    isUpvote: reaction.kind.isUpvote,\r\n  } as FlatReaction;\r\n}"
                }
            ],
            "src/stories/follow-button.stories.ts": [
                {
                    "name": "FollowButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/follow-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/follow-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FollowButtonComponent>",
                    "defaultValue": "(\r\n  args: FollowButtonComponent\r\n) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/app/state/followed-account-ids/followed-account-ids.state.ts": [
                {
                    "name": "followedAccountIdsAdapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/followed-account-ids/followed-account-ids.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityAdapter<FollowedAccountIdsStruct>",
                    "defaultValue": "createEntityAdapter<FollowedAccountIdsStruct>()"
                },
                {
                    "name": "initialFollowedAccountIdsState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/followed-account-ids/followed-account-ids.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FollowedAccountIdsState",
                    "defaultValue": "followedAccountIdsAdapter.getInitialState()"
                }
            ],
            "src/app/state/followed-account-ids/followed-account-ids.reducer.ts": [
                {
                    "name": "followedAccountIdsReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/followed-account-ids/followed-account-ids.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialFollowedAccountIdsState\r\n)"
                }
            ],
            "src/app/state/followed-space-ids/followed-space-ids.state.ts": [
                {
                    "name": "followedSpaceIdsAdapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/followed-space-ids/followed-space-ids.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityAdapter<FollowedSpaceIdsStruct>",
                    "defaultValue": "createEntityAdapter<FollowedSpaceIdsStruct>()"
                },
                {
                    "name": "initialFollowedSpaceIdsState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/followed-space-ids/followed-space-ids.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FollowedSpaceIdsState",
                    "defaultValue": "followedSpaceIdsAdapter.getInitialState()"
                }
            ],
            "src/app/state/my-post-reactions/my-post-reactions.actions.ts": [
                {
                    "name": "getGetMyPostReactionsByPostIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/my-post-reactions/my-post-reactions.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[My Post Reactions] My Post Reactions By Post Ids',\r\n  props<{ ids: Array<string> }>()\r\n)"
                },
                {
                    "name": "upsertMyPostReactions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/my-post-reactions/my-post-reactions.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[My Post Reactions] Upsert My Post Reactions',\r\n  props<{ payload: Array<MyPostReactionsStruct> }>()\r\n)"
                }
            ],
            "src/app/state/post/post.actions.ts": [
                {
                    "name": "getPostById",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/post/post.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Post] Load Post By Id',\r\n  props<{ id: string }>()\r\n)"
                },
                {
                    "name": "getPostsByIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/post/post.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Post] Load Posts By Ids',\r\n  props<{ payload: LoadEntitiesProps }>()\r\n)"
                },
                {
                    "name": "getPostsWithAllData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/post/post.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Post] Load Posts By Ids',\r\n  props<{ ids: Array<string> }>()\r\n)"
                },
                {
                    "name": "loadPostById",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/post/post.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Post] Load Post By Id',\r\n  props<{ id: string }>()\r\n)"
                },
                {
                    "name": "loadPostsSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/post/post.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Post] Load Posts Success')"
                },
                {
                    "name": "upsertPost",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/post/post.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Post] Upsert Post',\r\n  props<{ payload: PostStruct }>()\r\n)"
                },
                {
                    "name": "upsertPosts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/post/post.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Post] Upsert Posts',\r\n  props<{ payload: Array<PostStruct> }>()\r\n)"
                }
            ],
            "src/app/core/utils/utils.ts": [
                {
                    "name": "getPostLink",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/utils/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\r\n  spaceHandle: string,\r\n  title: string,\r\n  id: string\r\n): string => {\r\n  return title ? `/@${spaceHandle}/${slug(title)}-${id}` : '';\r\n}"
                },
                {
                    "name": "getStateEntityFromArray",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/utils/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T>(\r\n  array: Array<AnySubsocialData>,\r\n  type: 'struct' | 'content' = 'struct'\r\n): StateEntity<T> => {\r\n  const ids: string[] = [];\r\n  const entities: Entity<any> = {};\r\n  array.map((elem) => {\r\n    const id: string | undefined =\r\n      type === 'struct' ? elem.struct.id.toString() : elem.struct.contentId;\r\n    if (id) {\r\n      ids.push(id);\r\n      entities[id] = elem[type];\r\n    }\r\n  });\r\n  return { ids, entities };\r\n}"
                },
                {
                    "name": "sliceEntityArray",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/utils/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\r\n  entityArray: Array<any>,\r\n  contentEntities: any,\r\n  start: number,\r\n  end: number\r\n) => {\r\n  const entityData: any[] = [];\r\n\r\n  entityArray.slice(start, end).map((struct) => {\r\n    if (struct.contentId) {\r\n      const content = contentEntities[struct.contentId];\r\n      content ? entityData.push({ struct, content }) : null;\r\n    }\r\n  });\r\n\r\n  return entityData;\r\n}"
                },
                {
                    "name": "transformEntityDataArray",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/utils/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\r\n  array: Array<SpaceData> | Array<PostData> | Array<ProfileData>\r\n): TransformDataArray => {\r\n  const structs: any[] = [];\r\n  const contents: Content[] = [];\r\n  array.map((data) => {\r\n    if (data.content && data.struct.contentId) {\r\n      structs.push(data.struct);\r\n      contents.push({ id: data.struct.contentId, ...data.content });\r\n    }\r\n  });\r\n\r\n  return { structs, contents };\r\n}"
                }
            ],
            "src/app/state/reply-id/reply-id.actions.ts": [
                {
                    "name": "getReplyIdsByParentPostId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reply-id/reply-id.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Reply Ids] Load ReplyIds By Parent Post Id',\r\n  props<{ id: string }>()\r\n)"
                },
                {
                    "name": "upsertReplyIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reply-id/reply-id.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Space] Upsert Reply Ids',\r\n  props<{ payload: ReplyIdStruct }>()\r\n)"
                }
            ],
            "src/app/state/space/space.actions.ts": [
                {
                    "name": "getSpacesByIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/space/space.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Space] Load Spaces By Ids',\r\n  props<{ payload: LoadEntitiesProps }>()\r\n)"
                },
                {
                    "name": "loadSpaceById",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/space/space.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Space] Load Space By Id',\r\n  props<{ id: string }>()\r\n)"
                },
                {
                    "name": "loadSpaceSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/space/space.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Space] Load Spaces Success')"
                },
                {
                    "name": "upsertSpace",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/space/space.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Space] Upsert Space',\r\n  props<{ payload: SpaceStruct }>()\r\n)"
                },
                {
                    "name": "upsertSpaces",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/space/space.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Space] Upsert Spaces',\r\n  props<{ payload: Array<SpaceStruct> }>()\r\n)"
                }
            ],
            "src/app/state/loader/loader.state.ts": [
                {
                    "name": "initialLoaderState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/loader/loader.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LoaderState",
                    "defaultValue": "{\r\n  isLoading: false,\r\n}"
                }
            ],
            "src/app/state/my-account/my-account.state.ts": [
                {
                    "name": "initialMyAccountState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/my-account/my-account.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MyAccountState",
                    "defaultValue": "{\r\n  address: '',\r\n  blocked: false,\r\n  nonce: 0,\r\n}"
                }
            ],
            "src/app/state/my-post-reactions/my-post-reactions.state.ts": [
                {
                    "name": "initialMyPostReactionsState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/my-post-reactions/my-post-reactions.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MyPostReactionsState",
                    "defaultValue": "myPostReactionsAdapter.getInitialState()"
                },
                {
                    "name": "myPostReactionsAdapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/my-post-reactions/my-post-reactions.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityAdapter<MyPostReactionsStruct>",
                    "defaultValue": "createEntityAdapter<MyPostReactionsStruct>()"
                }
            ],
            "src/app/state/own-space-ids/own-space-ids.state.ts": [
                {
                    "name": "initialOwnSpaceIdsState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/own-space-ids/own-space-ids.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OwnSpaceIdsState",
                    "defaultValue": "ownSpaceIdsAdapter.getInitialState()"
                },
                {
                    "name": "ownSpaceIdsAdapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/own-space-ids/own-space-ids.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityAdapter<OwnSpaceIdsStruct>",
                    "defaultValue": "createEntityAdapter<OwnSpaceIdsStruct>()"
                }
            ],
            "src/app/state/post/post.state.ts": [
                {
                    "name": "initialPostState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/post/post.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PostState",
                    "defaultValue": "postAdapter.getInitialState()"
                },
                {
                    "name": "postAdapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/post/post.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityAdapter<PostStruct>",
                    "defaultValue": "createEntityAdapter<PostStruct>()"
                }
            ],
            "src/app/state/profile/profile.state.ts": [
                {
                    "name": "initialProfileState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/profile/profile.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProfileState",
                    "defaultValue": "profileAdapter.getInitialState()"
                },
                {
                    "name": "profileAdapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/profile/profile.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityAdapter<ProfileStruct>",
                    "defaultValue": "createEntityAdapter<ProfileStruct>()"
                }
            ],
            "src/app/state/reply-id/reply-id.state.ts": [
                {
                    "name": "initialReplyIdState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reply-id/reply-id.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReplyIdState",
                    "defaultValue": "replyIdAdapter.getInitialState()"
                },
                {
                    "name": "replyIdAdapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reply-id/reply-id.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityAdapter<ReplyIdStruct>",
                    "defaultValue": "createEntityAdapter<ReplyIdStruct>()"
                }
            ],
            "src/app/state/space/space.state.ts": [
                {
                    "name": "initialSpaceState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/space/space.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SpaceState",
                    "defaultValue": "spaceAdapter.getInitialState()"
                },
                {
                    "name": "spaceAdapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/space/space.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityAdapter<SpaceStruct>",
                    "defaultValue": "createEntityAdapter<SpaceStruct>()"
                }
            ],
            "src/stories/link-icons.stories.ts": [
                {
                    "name": "LinkIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/link-icons.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/link-icons.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<LinkIconsComponent>",
                    "defaultValue": "(args: LinkIconsComponent) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/app/state/loader/loader.reducer.ts": [
                {
                    "name": "loaderReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/loader/loader.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialLoaderState,\r\n  on(setLoader, (state, { isLoading }) => {\r\n    return { ...state, isLoading };\r\n  })\r\n)"
                }
            ],
            "src/app/state/profile/profile.actions.ts": [
                {
                    "name": "loadMyProfile",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/profile/profile.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Profile] Load My Profile By Id',\r\n  props<{ id: string }>()\r\n)"
                },
                {
                    "name": "loadProfile",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/profile/profile.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Profile] Load Profile By Id',\r\n  props<{ id: string }>()\r\n)"
                },
                {
                    "name": "loadProfiles",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/profile/profile.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Profile] Load Profiles By Ids',\r\n  props<{ payload: LoadEntitiesProps }>()\r\n)"
                },
                {
                    "name": "saveProfilesSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/profile/profile.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Profile] Load Profiles Success'\r\n)"
                },
                {
                    "name": "upsertProfile",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/profile/profile.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Profile] Upsert Profile',\r\n  props<{ payload: ProfileStruct }>()\r\n)"
                },
                {
                    "name": "upsertProfiles",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/profile/profile.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Profile] Upsert Profiles',\r\n  props<{ payload: Array<ProfileStruct> }>()\r\n)"
                }
            ],
            "src/app/core/mapper/post.map.ts": [
                {
                    "name": "mapPostDataToPostListItem",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/mapper/post.map.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\n  postStruct: SharedPostStruct,\n  postContent: PostContent,\n  spaceStruct: SpaceStruct | undefined,\n  profileContent: ProfileContent | undefined,\n  spaceContent: SpaceContentExtend | undefined,\n  myAddress: string,\n  myPostReaction?: MyPostReactionsStruct\n): PostListItemData => {\n  return {\n    id: postStruct.id,\n    ownerId: postStruct.ownerId,\n    ownerImageUrl: profileContent?.avatar || '',\n    spaceName: spaceContent?.name || '',\n    title: postContent.title,\n    summary: postContent.summary,\n    imageUrl: postContent.image ? environment.ipfsUrl + postContent.image : '',\n    createdAtTime: postStruct.createdAtTime,\n    repliesCount: postStruct.repliesCount,\n    hiddenRepliesCount: postStruct.hiddenRepliesCount,\n    visibleRepliesCount: postStruct.visibleRepliesCount,\n    sharesCount: postStruct.visibleRepliesCount,\n    upvotesCount: postStruct.upvotesCount,\n    downvotesCount: postStruct.downvotesCount,\n    isSharedPost: postStruct.isSharedPost,\n    isComment: postStruct.isComment,\n    isShowMore: postContent.isShowMore,\n    ownerName: profileContent?.name || '',\n    postLink: spaceStruct?.handle\n      ? getPostLink(\n          spaceStruct!.handle,\n          postContent.title\n            ? postContent.title\n            : postContent.summary.slice(0, 30),\n          postStruct.id\n        )\n      : '',\n    hidden: postStruct.hidden,\n    isMyPost: postStruct.ownerId === myAddress,\n    body: postContent.body,\n    tags: postContent.tags,\n    spaceId: postStruct.spaceId,\n    link: postContent.link,\n    sharedPostId: postStruct.sharedPostId,\n    spaceLink: spaceStruct?.handle\n      ? '/' + (spaceStruct.handle ? '@' + spaceStruct.handle : spaceStruct.id)\n      : '',\n    upvoteActive: myPostReaction?.kind === 'Upvote',\n    downvoteActive: myPostReaction?.kind === 'Downvote',\n  };\n}"
                }
            ],
            "src/app/core/constants/query.const.ts": [
                {
                    "name": "METHODS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/constants/query.const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  accountFollowers: 'accountFollowers',\r\n  accountsFollowedByAccount: 'accountsFollowedByAccount',\r\n  spaceFollowers: 'spaceFollowers',\r\n  reactionIdsByPostId: 'reactionIdsByPostId',\r\n  postReactionIdByAccount: 'postReactionIdByAccount',\r\n}"
                },
                {
                    "name": "PALLETS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/constants/query.const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  profileFollows: 'profileFollows',\r\n  spaceFollows: 'spaceFollows',\r\n  reactions: 'reactions',\r\n}"
                }
            ],
            "src/app/state/my-account/my-account.reducer.ts": [
                {
                    "name": "myAccountReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/my-account/my-account.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialMyAccountState,\r\n  on(setMyAccount, (state, { payload }) => {\r\n    return { ...payload };\r\n  })\r\n)"
                }
            ],
            "src/app/state/my-post-reactions/my-post-reactions.reducer.ts": [
                {
                    "name": "myPostReactionsReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/my-post-reactions/my-post-reactions.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialMyPostReactionsState,\r\n  on(MyPostReactionsActions.getGetMyPostReactionsByPostIds, (state) => state),\r\n  on(MyPostReactionsActions.upsertMyPostReactions, (state, { payload }) => {\r\n    return myPostReactionsAdapter.upsertMany(payload, state);\r\n  })\r\n)"
                }
            ],
            "src/stories/option-button.stories.ts": [
                {
                    "name": "OptionButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/option-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/option-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<OptionButtonComponent>",
                    "defaultValue": "(\r\n  args: OptionButtonComponent\r\n) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/post-info.stories.ts": [
                {
                    "name": "PostInfo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/post-info.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/post-info.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<PostInfoComponent>",
                    "defaultValue": "(args: PostInfoComponent) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/post-list-item.stories.ts": [
                {
                    "name": "PostItem",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/post-list-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/post-list-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<PostItemComponent>",
                    "defaultValue": "(args: PostItemComponent) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/app/state/post/post.reducer.ts": [
                {
                    "name": "postReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/post/post.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialPostState,\r\n  on(getPostsByIds, (state) => state),\r\n  on(getPostsWithAllData, (state) => state),\r\n  on(upsertPosts, (state, { payload }) => {\r\n    return postAdapter.upsertMany(payload, state);\r\n  })\r\n)"
                }
            ],
            "src/stories/profile-info.stories.ts": [
                {
                    "name": "ProfileInfo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/profile-info.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/profile-info.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ProfileInfoComponent>",
                    "defaultValue": "(args: ProfileInfoComponent) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/app/state/profile/profile.reducer.ts": [
                {
                    "name": "profileReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/profile/profile.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialProfileState,\r\n  on(upsertProfiles, (state, { payload }) => {\r\n    return profileAdapter.upsertMany(payload, state);\r\n  }),\r\n  on(upsertProfile, (state, { payload }) => {\r\n    return profileAdapter.upsertOne(payload, state);\r\n  })\r\n)"
                }
            ],
            "src/app/state/content/content.reducer.ts": [
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/content/content.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialContentState,\r\n  on(upsertContents, (state, { payload }) =>\r\n    payload ? contentAdapter.upsertMany(payload, state) : state\r\n  ),\r\n  on(upsertContent, (state, { payload }) =>\r\n    payload ? contentAdapter.upsertOne(payload, state) : state\r\n  )\r\n)"
                }
            ],
            "src/app/state/reply-id/reply-id.reducer.ts": [
                {
                    "name": "replyIdsReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reply-id/reply-id.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialReplyIdState,\r\n  on(getReplyIdsByParentPostId, (state) => state),\r\n  on(upsertReplyIds, (state, { payload }) => {\r\n    return replyIdAdapter.upsertOne(payload, state);\r\n  })\r\n)"
                }
            ],
            "src/stories/see-more.stories.ts": [
                {
                    "name": "SeeMore",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/see-more.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/see-more.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SeeMoreComponent>",
                    "defaultValue": "(args: SeeMoreComponent) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/app/state/content/content.selectors.ts": [
                {
                    "name": "selectAllContents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/content/content.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectContentState, selectAll)"
                },
                {
                    "name": "selectContentEntities",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/content/content.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectContentState,\r\n  selectEntities\r\n)"
                },
                {
                    "name": "selectContentState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/content/content.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<ContentState>('contents')"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/content/content.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "contentAdapter.getSelectors()"
                }
            ],
            "src/app/state/post/post.selectors.ts": [
                {
                    "name": "selectAllPosts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/post/post.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectPostState, selectAll)"
                },
                {
                    "name": "selectNonExistingPostIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/post/post.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(newIds: string[]) =>\r\n  createSelector(selectPostIds, (postIds) => {\r\n    return _.difference(newIds, postIds as string[]);\r\n  })"
                },
                {
                    "name": "selectPostEntities",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/post/post.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectPostState,\r\n  selectEntities\r\n)"
                },
                {
                    "name": "selectPostIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/post/post.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectPostState, selectIds)"
                },
                {
                    "name": "selectPostsCount",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/post/post.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectPostState, selectTotal)"
                },
                {
                    "name": "selectPostState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/post/post.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<PostState>('posts')"
                },
                {
                    "name": "selectPostStructByIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/post/post.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(ids: string[]) =>\r\n  createSelector(selectPostEntities, (postEntities) => {\r\n    const structs: PostStruct[] = [];\r\n    ids.forEach((id) => {\r\n      const struct = postEntities[id];\r\n      struct ? structs.push(struct) : null;\r\n    });\r\n\r\n    return structs;\r\n  })"
                },
                {
                    "name": "selectPostsWithAllDetailsByIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/post/post.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(ids: string[]) =>\r\n  createSelector(\r\n    selectPostStructByIds(ids),\r\n    selectContentEntities,\r\n    selectProfileEntities,\r\n    selectSpaceEntities,\r\n    selectMyAccountAddress,\r\n    selectMyPostReactionsEntities,\r\n    (\r\n      postArray,\r\n      contentEntities,\r\n      profileEntity,\r\n      spaceEntity,\r\n      address,\r\n      myPostReactionEntities\r\n    ) => {\r\n      const postListItemDataArray: KeyValuePair<PostListItemData> = {};\r\n\r\n      postArray.forEach((postStruct) => {\r\n        const profile = profileEntity[postStruct.ownerId];\r\n\r\n        const myPostReaction =\r\n          myPostReactionEntities[address + '-' + postStruct.id];\r\n\r\n        if (postStruct.contentId) {\r\n          const spaceStruct = postStruct.spaceId\r\n            ? spaceEntity[postStruct.spaceId]\r\n            : undefined;\r\n          const postContent = contentEntities[\r\n            postStruct.contentId\r\n          ] as PostContent;\r\n          const profileContent = profile?.contentId\r\n            ? (contentEntities[profile.contentId] as ProfileContent)\r\n            : undefined;\r\n\r\n          const spaceContent = contentEntities[\r\n            spaceStruct?.contentId!\r\n          ] as SpaceContentExtend;\r\n\r\n          if (postContent) {\r\n            const postListItemData: PostListItemData =\r\n              mapPostDataToPostListItem(\r\n                postStruct as SharedPostStruct,\r\n                postContent,\r\n                spaceStruct,\r\n                profileContent,\r\n                spaceContent,\r\n                address,\r\n                myPostReaction\r\n              );\r\n\r\n            postListItemDataArray[postStruct.id] = postListItemData;\r\n          }\r\n        }\r\n      });\r\n\r\n      return postListItemDataArray;\r\n    }\r\n  )"
                },
                {
                    "name": "selectPostWithAllDetailsById",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/post/post.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(id: string) =>\r\n  createSelector(selectPostsWithAllDetailsByIds([id]), (postsData) => {\r\n    return postsData[id];\r\n  })"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/post/post.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "postAdapter.getSelectors()"
                }
            ],
            "src/app/state/reply-id/reply-id.selectors.ts": [
                {
                    "name": "selectAllPReplyIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reply-id/reply-id.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectReplyIdsState,\r\n  selectAll\r\n)"
                },
                {
                    "name": "selectCommentItemsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reply-id/reply-id.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(postId: string) =>\r\n  createSelector(\r\n    selectReplyIdsEntities,\r\n    selectPostEntities,\r\n    selectContentEntities,\r\n    selectProfileEntities,\r\n    selectMyAccountAddress,\r\n    selectMyPostReactionsEntities,\r\n    (\r\n      replyIdEntities,\r\n      postEntities,\r\n      contentEntities,\r\n      profileEntities,\r\n      address,\r\n      myPostReactionsEntities\r\n    ): CommentItemData[] => {\r\n      const commentItemsData: CommentItemData[] = [];\r\n\r\n      const replyIds = replyIdEntities[postId];\r\n\r\n      if (replyIds) {\r\n        replyIds.replyIds.map((replyPostId) => {\r\n          const postStruct = postEntities[replyPostId];\r\n          const postContent = contentEntities[\r\n            postStruct?.contentId!\r\n          ] as PostContent;\r\n          const profileStruct = profileEntities[postStruct?.ownerId!];\r\n          const profileContent = contentEntities[\r\n            profileStruct?.contentId!\r\n          ] as ProfileContent;\r\n          if (postStruct && postContent) {\r\n            const myPostReaction =\r\n              myPostReactionsEntities[address + '-' + postStruct!.id];\r\n\r\n            commentItemsData.push({\r\n              postId: postStruct.id,\r\n              ownerId: postStruct.ownerId,\r\n              profileName: profileContent?.name,\r\n              createdAtTime: postStruct.createdAtTime,\r\n              avatar: profileContent?.avatar,\r\n              commentText: postContent.body,\r\n              upvoteCount: postStruct.upvotesCount,\r\n              downvoteCount: postStruct.downvotesCount,\r\n              replyCount: postStruct.repliesCount,\r\n              upvoteActive: myPostReaction?.kind === 'Upvote',\r\n              downvoteActive: myPostReaction?.kind === 'Downvote',\r\n            });\r\n          }\r\n        });\r\n      }\r\n\r\n      return commentItemsData;\r\n    }\r\n  )"
                },
                {
                    "name": "selectReplyIdsCount",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reply-id/reply-id.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectReplyIdsState,\r\n  selectTotal\r\n)"
                },
                {
                    "name": "selectReplyIdsEntities",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reply-id/reply-id.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectReplyIdsState,\r\n  selectEntities\r\n)"
                },
                {
                    "name": "selectReplyIdsState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reply-id/reply-id.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<ReplyIdState>('replyIds')"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reply-id/reply-id.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "replyIdAdapter.getSelectors()"
                }
            ],
            "src/app/state/space/space.selectors.ts": [
                {
                    "name": "selectAllSpaces",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/space/space.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectSpaceState, selectAll)"
                },
                {
                    "name": "selectSpaceById",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/space/space.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(id: string) =>\r\n  createSelector(\r\n    selectSpaceEntities,\r\n    selectContentEntities,\r\n    (spaceEntities, contentEntities) => {\r\n      const struct = spaceEntities[id];\r\n      if (struct && struct.contentId) {\r\n        const content = contentEntities[struct.contentId] as SpaceContentExtend;\r\n        return content ? ({ struct, content } as SpaceListItemData) : undefined;\r\n      }\r\n      return undefined;\r\n    }\r\n  )"
                },
                {
                    "name": "selectSpaceEntities",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/space/space.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectSpaceState,\r\n  selectEntities\r\n)"
                },
                {
                    "name": "selectSpacesByIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/space/space.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(ids: string[]) =>\r\n  createSelector(\r\n    selectSpaceEntities,\r\n    selectContentEntities,\r\n    (spaceEntities, contentEntities) => {\r\n      const spaceDataArray: KeyValuePair<SpaceListItemData> = {};\r\n      ids.forEach((id) => {\r\n        const struct = spaceEntities[id];\r\n        if (struct?.contentId) {\r\n          const content = contentEntities[\r\n            struct.contentId\r\n          ] as SpaceContentExtend;\r\n          if (content) {\r\n            const spaceListData: SpaceListItemData = {\r\n              struct,\r\n              content,\r\n              id: struct.id,\r\n            };\r\n\r\n            spaceDataArray[struct.id] = spaceListData;\r\n          }\r\n        }\r\n      });\r\n\r\n      return spaceDataArray;\r\n    }\r\n  )"
                },
                {
                    "name": "selectSpacesCount",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/space/space.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectSpaceState, selectTotal)"
                },
                {
                    "name": "selectSpaceState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/space/space.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<SpaceState>('spaces')"
                },
                {
                    "name": "selectSpaceWithContent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/space/space.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(start: number, end: number) =>\r\n  createSelector(\r\n    selectAllSpaces,\r\n    selectContentEntities,\r\n    (spacesArray, contentEntities) => {\r\n      const spaceData: SpaceListItemData[] = [];\r\n\r\n      spacesArray.slice(start, end).map((struct) => {\r\n        if (struct.contentId) {\r\n          const content = contentEntities[\r\n            struct.contentId\r\n          ] as SpaceContentExtend;\r\n          content ? spaceData.push({ struct, content, id: struct.id }) : null;\r\n        }\r\n      });\r\n\r\n      return spaceData;\r\n    }\r\n  )"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/space/space.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "spaceAdapter.getSelectors()"
                }
            ],
            "src/app/state/loader/loader.selectors.ts": [
                {
                    "name": "selectLoader",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/loader/loader.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<LoaderState>('loader')"
                },
                {
                    "name": "selectLoaderStatus",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/loader/loader.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectLoader,\r\n  (loader) => loader.isLoading\r\n)"
                }
            ],
            "src/app/state/my-account/my-account.selectors.ts": [
                {
                    "name": "selectMyAccount",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/my-account/my-account.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<MyAccountState>('myAccount')"
                },
                {
                    "name": "selectMyAccountAddress",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/my-account/my-account.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectMyAccount,\r\n  (myAccount) => {\r\n    return myAccount.address;\r\n  }\r\n)"
                }
            ],
            "src/app/state/my-post-reactions/my-post-reactions.selectors.ts": [
                {
                    "name": "selectMyPostReactions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/my-post-reactions/my-post-reactions.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<MyPostReactionsState>('myPostReactions')"
                },
                {
                    "name": "selectMyPostReactionsCount",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/my-post-reactions/my-post-reactions.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectMyPostReactions,\r\n  selectTotal\r\n)"
                },
                {
                    "name": "selectMyPostReactionsEntities",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/my-post-reactions/my-post-reactions.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectMyPostReactions,\r\n  selectEntities\r\n)"
                },
                {
                    "name": "selectMyPostReactionsIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/my-post-reactions/my-post-reactions.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectMyPostReactions,\r\n  selectAll\r\n)"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/my-post-reactions/my-post-reactions.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "myPostReactionsAdapter.getSelectors()"
                }
            ],
            "src/stories/send-button.stories.ts": [
                {
                    "name": "SendButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/send-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/send-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SendButtonComponent>",
                    "defaultValue": "(args: SendButtonComponent) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/app/state/loader/loader.actions.ts": [
                {
                    "name": "setLoader",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/loader/loader.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Loader] Set Loader',\r\n  props<{ isLoading: boolean }>()\r\n)"
                }
            ],
            "src/app/state/my-account/my-account.actions.ts": [
                {
                    "name": "setMyAccount",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/my-account/my-account.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[My Account] Set My Account',\r\n  props<{ payload: MyAccountState }>()\r\n)"
                }
            ],
            "src/stories/share-button.stories.ts": [
                {
                    "name": "ShareButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/share-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/share-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SharedButtonComponent>",
                    "defaultValue": "(\r\n  args: SharedButtonComponent\r\n) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/space-list-item.stories.ts": [
                {
                    "name": "SpaceListItem",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/space-list-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/space-list-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SpaceItemComponent>",
                    "defaultValue": "(args: SpaceItemComponent) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/app/state/space/space.reducer.ts": [
                {
                    "name": "spaceReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/space/space.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialSpaceState,\r\n  on(SpaceActions.getSpacesByIds, (state) => state),\r\n  on(SpaceActions.upsertSpaces, (state, { payload }) => {\r\n    return spaceAdapter.upsertMany(payload, state);\r\n  }),\r\n  on(SpaceActions.upsertSpace, (state, { payload }) => {\r\n    return spaceAdapter.upsertOne(payload, state);\r\n  }),\r\n  on(SpaceActions.loadSpaceById, (state) => state)\r\n)"
                }
            ],
            "src/app/shared/services/storage.service.ts": [
                {
                    "name": "STORAGE_KEYS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/services/storage.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  accountId: 'accountId',\n}"
                }
            ],
            "src/stories/tabs.stories.ts": [
                {
                    "name": "Tabs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/tabs.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/tabs.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TabsComponent>",
                    "defaultValue": "(args: TabsComponent) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/tag.stories.ts": [
                {
                    "name": "Tag",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TagComponent>",
                    "defaultValue": "(args: TagComponent) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/title.stories.ts": [
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/title.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TitleComponent>",
                    "defaultValue": "(args: TitleComponent) => ({\r\n  props: args,\r\n})"
                },
                {
                    "name": "Title",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/title.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/stories/upvote-button.stories.ts": [
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/upvote-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<UpvoteButtonComponent>",
                    "defaultValue": "(\r\n  args: UpvoteButtonComponent\r\n) => ({\r\n  props: args,\r\n})"
                },
                {
                    "name": "Upvote",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/upvote-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/stories/vote-user-list-item.stories.ts": [
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/vote-user-list-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<VoteUserListItemComponent>",
                    "defaultValue": "(\r\n  args: VoteUserListItemComponent\r\n) => ({\r\n  props: args,\r\n})"
                },
                {
                    "name": "VoteUserListItem",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/vote-user-list-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/stories/write-post-button.stories.ts": [
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/write-post-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<WritePostButtonComponent>",
                    "defaultValue": "(\r\n  args: WritePostButtonComponent\r\n) => ({\r\n  props: args,\r\n})"
                },
                {
                    "name": "WritePostButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/write-post-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/app/core/constants/transfer-keys.ts": [
                {
                    "name": "TRANSFER_KEYS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/constants/transfer-keys.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  POST_DATA: 'post_data',\r\n  SPACE_DATA: 'space_data',\r\n}"
                }
            ],
            "src/app/state/content/content.actions.ts": [
                {
                    "name": "upsertContent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/content/content.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Content] Upsert Content',\r\n  props<{ payload: Content }>()\r\n)"
                },
                {
                    "name": "upsertContents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/content/content.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Content] Upsert Contents',\r\n  props<{ payload: Array<Content> }>()\r\n)"
                }
            ]
        },
        "groupedFunctions": {
            "server.ts": [
                {
                    "name": "app",
                    "file": "server.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "express.Express"
                },
                {
                    "name": "run",
                    "file": "server.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "void"
                }
            ],
            "src/app/state/content/content.reducer.ts": [
                {
                    "name": "contentReducer",
                    "file": "src/app/state/content/content.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/state/followed-account-ids/followed-account-ids.reducer.ts": [
                {
                    "name": "followedAccountIdsReducer",
                    "file": "src/app/state/followed-account-ids/followed-account-ids.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/app.module.ts": [
                {
                    "name": "initApi",
                    "file": "src/app/app.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "service",
                            "type": "SubsocialApiService",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "service",
                            "type": "SubsocialApiService",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registryIcons",
                    "file": "src/app/app.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "service",
                            "type": "IconRegistryService",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "service",
                            "type": "IconRegistryService",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/state/loader/loader.reducer.ts": [
                {
                    "name": "loaderReducer",
                    "file": "src/app/state/loader/loader.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/state/my-account/my-account.reducer.ts": [
                {
                    "name": "myAccountReducer",
                    "file": "src/app/state/my-account/my-account.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/state/my-post-reactions/my-post-reactions.reducer.ts": [
                {
                    "name": "myPostReactionsReducer",
                    "file": "src/app/state/my-post-reactions/my-post-reactions.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/state/post/post.reducer.ts": [
                {
                    "name": "postReducer",
                    "file": "src/app/state/post/post.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/state/profile/profile.reducer.ts": [
                {
                    "name": "profileReducer",
                    "file": "src/app/state/profile/profile.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/state/reply-id/reply-id.reducer.ts": [
                {
                    "name": "replyIdReducer",
                    "file": "src/app/state/reply-id/reply-id.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/state/space/space.reducer.ts": [
                {
                    "name": "spaceReducer",
                    "file": "src/app/state/space/space.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/core/decorators/ssr-load-data.decorator.tw.ts": [
                {
                    "name": "SSRLoadData",
                    "file": "src/app/core/decorators/ssr-load-data.decorator.tw.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/shared/services/account.service.ts": [
                {
                    "name": "ACCOUNT_STATUS",
                    "childs": [
                        {
                            "name": "INIT",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "EXTENSION_NOT_FOUND",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ACCOUNTS_NOT_FOUND",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "UNAUTHORIZED",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "AUTHORIZED",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/services/account.service.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/core/types/account.types.ts": [
                {
                    "name": "AccountData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/types/account.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                },
                {
                    "name": "AccountRawData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/types/account.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                },
                {
                    "name": "Balance",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/types/account.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                },
                {
                    "name": "PolkadotAccount",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/types/account.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/core/types/address-size.type.ts": [
                {
                    "name": "AddressSizeType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"small\" | \"medium\" | \"large\"",
                    "file": "src/app/core/types/address-size.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 185
                }
            ],
            "src/app/core/base-component/box.component.ts": [
                {
                    "name": "AlignType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"start\" | \"end\" | \"center\" | \"normal\" | \"space-between\"",
                    "file": "src/app/core/base-component/box.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 185
                }
            ],
            "src/app/core/types/comment-data.type.ts": [
                {
                    "name": "CommentItemData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/types/comment-data.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/core/types/dialog-modal-data.types.ts": [
                {
                    "name": "ConnectionModalData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/types/dialog-modal-data.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                },
                {
                    "name": "FollowersModalData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/types/dialog-modal-data.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                },
                {
                    "name": "ReactionModalData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/types/dialog-modal-data.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                },
                {
                    "name": "SignInModalData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/types/dialog-modal-data.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/core/types/content.type.ts": [
                {
                    "name": "Content",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/core/types/content.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "src/app/core/types/entity-data.type.ts": [
                {
                    "name": "EntityListData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/types/entity-data.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/shared/services/subsocial-api.service.ts": [
                {
                    "name": "FetchSubstrateMultiProps",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/services/subsocial-api.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                },
                {
                    "name": "FetchSubstrateProps",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/services/subsocial-api.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/core/mapper/flatten.map.ts": [
                {
                    "name": "FlatReaction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/mapper/flatten.map.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/state/followed-account-ids/followed-account-ids.state.ts": [
                {
                    "name": "FollowedAccountIdsStruct",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/state/followed-account-ids/followed-account-ids.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/state/followed-space-ids/followed-space-ids.state.ts": [
                {
                    "name": "FollowedSpaceIdsStruct",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/state/followed-space-ids/followed-space-ids.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/core/models/space/space-list-item.model.ts": [
                {
                    "name": "HasHandle",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/models/space/space-list-item.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                },
                {
                    "name": "SpaceContentExtend",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/core/models/space/space-list-item.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "SpaceListItemData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/core/models/space/space-list-item.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "src/app/core/types/image.type.ts": [
                {
                    "name": "ImageType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"square\" | \"full\" | \"notification\"",
                    "file": "src/app/core/types/image.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 185
                }
            ],
            "src/app/state/types.ts": [
                {
                    "name": "LoadEntitiesProps",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/state/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/state/my-post-reactions/my-post-reactions.state.ts": [
                {
                    "name": "MyPostReactionsStruct",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/state/my-post-reactions/my-post-reactions.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/core/types/option-button.type.ts": [
                {
                    "name": "OptionButtonType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"post\" | \"space\" | \"comment\"",
                    "file": "src/app/core/types/option-button.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 185
                }
            ],
            "src/app/state/own-space-ids/own-space-ids.state.ts": [
                {
                    "name": "OwnSpaceIdsStruct",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/state/own-space-ids/own-space-ids.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/core/types/profile-component-data.type.ts": [
                {
                    "name": "ProfileComponentData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/types/profile-component-data.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/core/types/reply-id.type.ts": [
                {
                    "name": "ReplyIdStruct",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/types/reply-id.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/core/types/scroll-props.type.ts": [
                {
                    "name": "ScrollProps",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/types/scroll-props.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/shared/components/simple-snack-bar/simple-snack-bar.component.ts": [
                {
                    "name": "SimpleSnackBarOption",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/components/simple-snack-bar/simple-snack-bar.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/core/types/space-info.type.ts": [
                {
                    "name": "SpaceInfoType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"medium\" | \"large\"",
                    "file": "src/app/core/types/space-info.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 185
                }
            ],
            "src/app/core/types/tabs.type.ts": [
                {
                    "name": "Tabs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"spaces\" | \"posts\"",
                    "file": "src/app/core/types/tabs.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 185
                }
            ],
            "src/app/core/types/tag-size.type.ts": [
                {
                    "name": "TagSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"small\" | \"medium\" | \"large\" | \"huge\"",
                    "file": "src/app/core/types/tag-size.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 185
                }
            ],
            "src/app/core/types/title.type.ts": [
                {
                    "name": "TitleSizeType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"small\" | \"medium\" | \"large\"",
                    "file": "src/app/core/types/title.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 185
                }
            ],
            "src/app/core/types/transform-dto.types.ts": [
                {
                    "name": "TransformData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/types/transform-dto.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                },
                {
                    "name": "TransformDataArray",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/types/transform-dto.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                },
                {
                    "name": "TransformPostWithAllDetails",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/types/transform-dto.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/core/models/user-info.model.ts": [
                {
                    "name": "UserInfo",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/core/models/user-info.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "src/app/core/types/user-list.type.ts": [
                {
                    "name": "UserListType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"follow\" | \"sub\"",
                    "file": "src/app/core/types/user-list.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 185
                }
            ],
            "src/app/core/types/vote-icon.type.ts": [
                {
                    "name": "VoteIconType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"upvote\" | \"downvote\"",
                    "file": "src/app/core/types/vote-icon.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 185
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "server.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "app",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "server.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "run",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "__non_webpack_require__",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "domino",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mainModule",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "moduleFilename",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "path",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "win",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/account/account/account.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/account/profile/profile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/account/services/profile.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProfileService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "initApi",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "registryIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/base-component/base-infinity-scroll.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BaseInfinityScrollComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "src/app/core/base-component/base-value-accessor.ts",
                "type": "component",
                "linktype": "component",
                "name": "BaseControlValueAccessorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/core/base-component/box.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/core/base-entity/with-id.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "WithId",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/classes/scroll-props.class.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScrollProps",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/constants/query.const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "METHODS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/constants/query.const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PALLETS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/constants/transfer-keys.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TRANSFER_KEYS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/decorators/ssr-load-data.decorator.tw.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "SSRLoadData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/entities/content-entity.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ContentEntity",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/core/entities/entity.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Entity",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/entities/post-entity.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PostEntity",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/core/entities/profile-entity.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProfileEntity",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/core/entities/space-entity.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SpaceEntity",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/core/entities/state-entity.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StateEntity",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/errors/error-matcher.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppErrorStateMatcher",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interfaces/on-view-reaction.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "OnViewReaction",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mapper/flatten.map.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "flatReaction",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mapper/post.map.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mapPostDataToPostListItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/key-value-pair.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "KeyValuePair",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/mockup-data.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MockupData",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/post/post-list-item.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PostListItemData",
                "coveragePercent": 0,
                "coverageCount": "0/30",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/tab-link-data.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TabLinkData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/utils/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getPostLink",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/utils/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getStateEntityFromArray",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/utils/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sliceEntityArray",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/utils/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "transformEntityDataArray",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/main/main/main.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/notification/notification-page/notification-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotificationPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/post/edit-post/edit-post.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditPostComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/post/post-list/post-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PostListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "src/app/post/post/post.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PostComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/post/services/post.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PostService",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/link-icons/link-icons.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LinkIconsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/simple-snack-bar/simple-snack-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SimpleSnackBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/spinner/spinner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpinnerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/tabs/tabs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/vote-user-list-item/vote-user-list-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VoteUserListItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/vote-user-list/vote-user-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VoteUserListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/if-desktop.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "IfDesktopDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/if-mobile.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "IfMobileDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modal-dialogs/account-sidenav/account-sidenav.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountSidenavComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modal-dialogs/connections-modal-dialog/connections-modal-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConnectionsModalDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modal-dialogs/followers-modal-dialog/followers-modal-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FollowersModalDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modal-dialogs/qr-modal-dialog/qr-modal-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QrModalDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modal-dialogs/sign-in-modal-dialog/sign-in-modal-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignInModalDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modal-dialogs/vote-modal-dialog/vote-modal-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VoteModalDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/address-hidden.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "AddressHiddenPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/dayjs.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "DayjsPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/image-url.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ImageUrlPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/link-to-icon.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "LinkToIconPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/numeral.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "NumeralPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/pluralize.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "PluralizePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/account.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AccountService",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/comment.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CommentService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/content.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ContentService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/convert.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ConvertService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/date.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DateService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/device.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DeviceService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/http.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HttpService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/icon-registry.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "IconRegistryService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/link.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LinkService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/navigation.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NavigationService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/reactions.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ReactionsService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/side-nav.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SideNavService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/snack-bar.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SnackBarService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/storage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StorageService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/storage.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STORAGE_KEYS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/subsocial-api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SubsocialApiService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/transfer-state.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TransferStateService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/space/edit-space/edit-space.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditSpaceComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/space/services/space.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SpaceService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/space/space-list/space-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpaceListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "src/app/space/space-profile/space-profile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpaceProfileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/space/space/space.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpaceComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/state/content/content.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "upsertContent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/content/content.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "upsertContents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/content/content.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ContentEffects",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/content/content.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "contentReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/content/content.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/content/content.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllContents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/content/content.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectContentEntities",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/content/content.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectContentState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/content/content.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/content/content.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ContentState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/content/content.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "contentAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/content/content.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialContentState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/followed-account-ids/followed-account-ids.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "followedAccountIdsReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/followed-account-ids/followed-account-ids.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "followedAccountIdsReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/followed-account-ids/followed-account-ids.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FollowedAccountIdsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/followed-account-ids/followed-account-ids.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "followedAccountIdsAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/followed-account-ids/followed-account-ids.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialFollowedAccountIdsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/followed-space-ids/followed-space-ids.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FollowedSpaceIdsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/followed-space-ids/followed-space-ids.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "followedSpaceIdsAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/followed-space-ids/followed-space-ids.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialFollowedSpaceIdsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/loader/loader.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setLoader",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/loader/loader.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoaderEffects",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/loader/loader.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "loaderReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/loader/loader.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loaderReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/loader/loader.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectLoader",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/loader/loader.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectLoaderStatus",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/loader/loader.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoaderState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/loader/loader.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialLoaderState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-account/my-account.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setMyAccount",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-account/my-account.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "myAccountReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-account/my-account.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "myAccountReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-account/my-account.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMyAccount",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-account/my-account.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMyAccountAddress",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-account/my-account.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MyAccountState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-account/my-account.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialMyAccountState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-post-reactions/my-post-reactions.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getGetMyPostReactionsByPostIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-post-reactions/my-post-reactions.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "upsertMyPostReactions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-post-reactions/my-post-reactions.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MyPostReactionsEffects",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-post-reactions/my-post-reactions.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "myPostReactionsReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-post-reactions/my-post-reactions.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "myPostReactionsReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-post-reactions/my-post-reactions.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMyPostReactions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-post-reactions/my-post-reactions.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMyPostReactionsCount",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-post-reactions/my-post-reactions.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMyPostReactionsEntities",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-post-reactions/my-post-reactions.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMyPostReactionsIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-post-reactions/my-post-reactions.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-post-reactions/my-post-reactions.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MyPostReactionsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-post-reactions/my-post-reactions.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialMyPostReactionsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-post-reactions/my-post-reactions.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "myPostReactionsAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/own-space-ids/own-space-ids.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "OwnSpaceIdsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/own-space-ids/own-space-ids.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialOwnSpaceIdsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/own-space-ids/own-space-ids.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ownSpaceIdsAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getPostById",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getPostsByIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getPostsWithAllData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadPostById",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadPostsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "upsertPost",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "upsertPosts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PostEffects",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "postReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "postReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllPosts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectNonExistingPostIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectPostEntities",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectPostIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectPostsCount",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectPostState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectPostStructByIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectPostsWithAllDetailsByIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectPostWithAllDetailsById",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PostState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialPostState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "postAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile/profile.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadMyProfile",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile/profile.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadProfile",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile/profile.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadProfiles",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile/profile.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "saveProfilesSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile/profile.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "upsertProfile",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile/profile.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "upsertProfiles",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile/profile.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProfileEffects",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile/profile.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "profileReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile/profile.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "profileReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile/profile.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "extractProfileData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile/profile.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllProfiles",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile/profile.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMyAccountProfileData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile/profile.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProfileDataById",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile/profile.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProfileEntities",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile/profile.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProfilesCount",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile/profile.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProfileState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile/profile.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectUserInfoByIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile/profile.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile/profile.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProfileState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile/profile.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialProfileState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile/profile.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "profileAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reply-id/reply-id.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getReplyIdsByParentPostId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reply-id/reply-id.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "upsertReplyIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reply-id/reply-id.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ReplyIdEffects",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reply-id/reply-id.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "replyIdReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reply-id/reply-id.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "replyIdsReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reply-id/reply-id.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllPReplyIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reply-id/reply-id.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCommentItemsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reply-id/reply-id.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectReplyIdsCount",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reply-id/reply-id.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectReplyIdsEntities",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reply-id/reply-id.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectReplyIdsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reply-id/reply-id.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reply-id/reply-id.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ReplyIdState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reply-id/reply-id.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialReplyIdState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reply-id/reply-id.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "replyIdAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/space/space.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getSpacesByIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/space/space.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadSpaceById",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/space/space.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadSpaceSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/space/space.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "upsertSpace",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/space/space.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "upsertSpaces",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/space/space.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SpaceEffects",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/space/space.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "spaceReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/space/space.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "spaceReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/space/space.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllSpaces",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/space/space.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSpaceById",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/space/space.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSpaceEntities",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/space/space.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSpacesByIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/space/space.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSpacesCount",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/space/space.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSpaceState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/space/space.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSpaceWithContent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/space/space.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/space/space.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SpaceState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/space/space.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialSpaceState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/space/space.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "spaceAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/state/state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/store.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StoreService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/action-panel/action-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ActionPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/address/address.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddressComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/avatar/avatar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AvatarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/balance/tokens/tokens.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TokensComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/buttons.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/close-button/close-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CloseButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/comment-button/comment-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CommentButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/downvote-button/downvote-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DownvoteButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/edit-button/edit-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/follow-button/follow-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FollowButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/icon-button/icon-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/option-button/option-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OptionButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/profile-button/profile-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfileButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/qr-button/qr-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QrButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/reply-button/reply-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ReplyButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/send-button/send-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SendButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/send-tips-button/send-tips-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SendTipsButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/send-tokens-button/send-tokens-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SendTokensButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/shared-button/shared-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SharedButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/sign-out-button/sign-out-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignOutButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/upvote-button/upvote-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UpvoteButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/write-post-button/write-post-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WritePostButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/comment/comment-input/comment-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CommentInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/comment/comment-message/comment-message.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CommentMessageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/comment/comments/comments.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CommentsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/comment/reply-comments/reply-comments.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ReplyCommentsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/containers/column/column.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColumnComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/containers/row/row.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RowComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/containers/scroll/scroll.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScrollComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/content/embed-video/embed-video.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EmbedVideoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/content/hidden-content/hidden-content.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HiddenContentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/content/no-content/no-content.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NoContentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/content/post-image/post-image.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PostImageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/input/image-loader/image-loader.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ImageLoaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/input/tag-input/tag-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TagInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/input/tag/tag.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TagComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/input/text-area/text-area.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextAreaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/input/text-input/text-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/menu/sidenav-menu/sidenav-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidenavMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/post-ui/post-info/post-info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PostInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/post-ui/post-item/post-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PostItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/post-ui/shared-post-item/shared-post-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SharedPostItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/profile/account-list-item/account-list-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountListItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/profile/profile-info/profile-info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfileInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/space-ui/space-info/space-info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpaceInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/space-ui/space-item/space-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpaceItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/text/expand-paragraph/expand-paragraph.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExpandParagraphComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/text/paragraph/paragraph.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ParagraphComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/text/see-more/see-more.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SeeMoreComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/text/title/title.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TitleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/address.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Address",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/address.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AvatarWithImage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AvatarWithoutImage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/comment-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CommentButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/comment-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/comment-message.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CommentMessage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/comment-message.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "d",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/comment-message.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/comment.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Comments",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/comment.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "d",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/comment.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/downvote-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Downvote",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/downvote-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/edit-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EditButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/edit-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/follow-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FollowButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/follow-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/image-loader.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "component",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/image-loader.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ImageLoader",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/image-loader.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/link-icons.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LinkIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/link-icons.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/option-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OptionButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/option-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/post-info.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PostInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/post-info.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/post-list-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PostItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/post-list-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/profile-info.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ProfileInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/profile-info.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/see-more.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SeeMore",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/see-more.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/send-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SendButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/send-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/share-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ShareButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/share-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/space-list-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SpaceListItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/space-list-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/tabs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Tabs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/tabs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Tag",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/text-area.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "component",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/text-area.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/text-area.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextArea",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/text-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "component",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/text-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/text-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextInput",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/title.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/title.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Title",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/upvote-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/upvote-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Upvote",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/vote-user-list-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/vote-user-list-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VoteUserListItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/write-post-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/write-post-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WritePostButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}